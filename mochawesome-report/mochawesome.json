{
  "stats": {
    "suites": 531,
    "tests": 872,
    "passes": 872,
    "pending": 0,
    "failures": 0,
    "start": "2019-02-20T03:19:13.362Z",
    "end": "2019-02-20T03:19:32.207Z",
    "duration": 18845,
    "testsRegistered": 872,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "55e26edd-04af-4786-a700-d9657395be41",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "c4c71827-6ee4-41b0-9d8f-a9a4f7eb01b5",
        "title": "Promises/A+ Tests",
        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
        "file": "\\test\\index.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "04946ea4-ea03-4932-accc-8f98b39eeadf",
            "title": "2.1.2.1: When fulfilled, a promise: must not transition to any other state.",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "already-fulfilled",
                "fullTitle": "Promises/A+ Tests 2.1.2.1: When fulfilled, a promise: must not transition to any other state. already-fulfilled",
                "timedOut": false,
                "duration": 102,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "test(resolved(value), done);",
                "err": {},
                "isRoot": false,
                "uuid": "ad06f5fd-916f-413c-8dac-dbf2825e490c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "immediately-fulfilled",
                "fullTitle": "Promises/A+ Tests 2.1.2.1: When fulfilled, a promise: must not transition to any other state. immediately-fulfilled",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                "err": {},
                "isRoot": false,
                "uuid": "fc35f016-6193-4055-a92c-73602d183679",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "eventually-fulfilled",
                "fullTitle": "Promises/A+ Tests 2.1.2.1: When fulfilled, a promise: must not transition to any other state. eventually-fulfilled",
                "timedOut": false,
                "duration": 102,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                "err": {},
                "isRoot": false,
                "uuid": "63367499-c11c-42c8-a746-0b535299e545",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "trying to fulfill then immediately reject",
                "fullTitle": "Promises/A+ Tests 2.1.2.1: When fulfilled, a promise: must not transition to any other state. trying to fulfill then immediately reject",
                "timedOut": false,
                "duration": 102,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar onFulfilledCalled = false;\nd.promise.then(function onFulfilled() {\n    onFulfilledCalled = true;\n}, function onRejected() {\n    assert.strictEqual(onFulfilledCalled, false);\n    done();\n});\nd.resolve(dummy);\nd.reject(dummy);\nsetTimeout(done, 100);",
                "err": {},
                "isRoot": false,
                "uuid": "b8b598a9-6be7-4038-947c-d99f10145408",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "trying to fulfill then reject, delayed",
                "fullTitle": "Promises/A+ Tests 2.1.2.1: When fulfilled, a promise: must not transition to any other state. trying to fulfill then reject, delayed",
                "timedOut": false,
                "duration": 100,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar onFulfilledCalled = false;\nd.promise.then(function onFulfilled() {\n    onFulfilledCalled = true;\n}, function onRejected() {\n    assert.strictEqual(onFulfilledCalled, false);\n    done();\n});\nsetTimeout(function () {\n    d.resolve(dummy);\n    d.reject(dummy);\n}, 50);\nsetTimeout(done, 100);",
                "err": {},
                "isRoot": false,
                "uuid": "87487252-fb2a-4f93-977d-ef2bb8ff96ee",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "trying to fulfill immediately then reject delayed",
                "fullTitle": "Promises/A+ Tests 2.1.2.1: When fulfilled, a promise: must not transition to any other state. trying to fulfill immediately then reject delayed",
                "timedOut": false,
                "duration": 102,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar onFulfilledCalled = false;\nd.promise.then(function onFulfilled() {\n    onFulfilledCalled = true;\n}, function onRejected() {\n    assert.strictEqual(onFulfilledCalled, false);\n    done();\n});\nd.resolve(dummy);\nsetTimeout(function () {\n    d.reject(dummy);\n}, 50);\nsetTimeout(done, 100);",
                "err": {},
                "isRoot": false,
                "uuid": "c7e5903a-c73d-45d8-9135-7c497a4a3e3a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ad06f5fd-916f-413c-8dac-dbf2825e490c",
              "fc35f016-6193-4055-a92c-73602d183679",
              "63367499-c11c-42c8-a746-0b535299e545",
              "b8b598a9-6be7-4038-947c-d99f10145408",
              "87487252-fb2a-4f93-977d-ef2bb8ff96ee",
              "c7e5903a-c73d-45d8-9135-7c497a4a3e3a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 609,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "14d27327-b2bb-4dbb-9ada-cf556d9984a6",
            "title": "2.1.3.1: When rejected, a promise: must not transition to any other state.",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "already-rejected",
                "fullTitle": "Promises/A+ Tests 2.1.3.1: When rejected, a promise: must not transition to any other state. already-rejected",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "test(rejected(reason), done);",
                "err": {},
                "isRoot": false,
                "uuid": "dbfa2988-a22a-4afb-82c4-cd8342d20052",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "immediately-rejected",
                "fullTitle": "Promises/A+ Tests 2.1.3.1: When rejected, a promise: must not transition to any other state. immediately-rejected",
                "timedOut": false,
                "duration": 102,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                "err": {},
                "isRoot": false,
                "uuid": "81de300c-cf2c-4a75-8430-11794ef77ee3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "eventually-rejected",
                "fullTitle": "Promises/A+ Tests 2.1.3.1: When rejected, a promise: must not transition to any other state. eventually-rejected",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                "err": {},
                "isRoot": false,
                "uuid": "3e374765-359f-4888-855c-fd2042201b09",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "trying to reject then immediately fulfill",
                "fullTitle": "Promises/A+ Tests 2.1.3.1: When rejected, a promise: must not transition to any other state. trying to reject then immediately fulfill",
                "timedOut": false,
                "duration": 100,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar onRejectedCalled = false;\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(onRejectedCalled, false);\n    done();\n}, function onRejected() {\n    onRejectedCalled = true;\n});\nd.reject(dummy);\nd.resolve(dummy);\nsetTimeout(done, 100);",
                "err": {},
                "isRoot": false,
                "uuid": "096e3832-1847-4071-940a-453ace3cb572",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "trying to reject then fulfill, delayed",
                "fullTitle": "Promises/A+ Tests 2.1.3.1: When rejected, a promise: must not transition to any other state. trying to reject then fulfill, delayed",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar onRejectedCalled = false;\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(onRejectedCalled, false);\n    done();\n}, function onRejected() {\n    onRejectedCalled = true;\n});\nsetTimeout(function () {\n    d.reject(dummy);\n    d.resolve(dummy);\n}, 50);\nsetTimeout(done, 100);",
                "err": {},
                "isRoot": false,
                "uuid": "8ca90e98-c19e-4032-8ffa-3774c5c6ca40",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "trying to reject immediately then fulfill delayed",
                "fullTitle": "Promises/A+ Tests 2.1.3.1: When rejected, a promise: must not transition to any other state. trying to reject immediately then fulfill delayed",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar onRejectedCalled = false;\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(onRejectedCalled, false);\n    done();\n}, function onRejected() {\n    onRejectedCalled = true;\n});\nd.reject(dummy);\nsetTimeout(function () {\n    d.resolve(dummy);\n}, 50);\nsetTimeout(done, 100);",
                "err": {},
                "isRoot": false,
                "uuid": "0ab336f2-a95a-4fbf-a340-182e6001bcc9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "dbfa2988-a22a-4afb-82c4-cd8342d20052",
              "81de300c-cf2c-4a75-8430-11794ef77ee3",
              "3e374765-359f-4888-855c-fd2042201b09",
              "096e3832-1847-4071-940a-453ace3cb572",
              "8ca90e98-c19e-4032-8ffa-3774c5c6ca40",
              "0ab336f2-a95a-4fbf-a340-182e6001bcc9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 606,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "825cee87-3b4f-4f5d-a9b5-b32e1b35d3da",
            "title": "2.2.1: Both `onFulfilled` and `onRejected` are optional arguments.",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "983fe09e-e20d-4385-b746-9d30172390a4",
                "title": "2.2.1.1: If `onFulfilled` is not a function, it must be ignored.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "4a821084-01dd-40ac-9319-2c7b6b495fb1",
                    "title": "applied to a directly-rejected promise",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "`onFulfilled` is `undefined`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a directly-rejected promise `onFulfilled` is `undefined`",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rejected(dummy).then(nonFunction, function () {\n    done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8edcc02e-5cca-4ee1-8998-dcfd1e61a26b",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is `null`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a directly-rejected promise `onFulfilled` is `null`",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rejected(dummy).then(nonFunction, function () {\n    done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "92cb4705-1637-40b2-8be2-d0a015d2957c",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is `false`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a directly-rejected promise `onFulfilled` is `false`",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rejected(dummy).then(nonFunction, function () {\n    done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8db6621d-8289-49cc-bbb8-65a808dcc1ab",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is `5`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a directly-rejected promise `onFulfilled` is `5`",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rejected(dummy).then(nonFunction, function () {\n    done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f50b18a0-66b2-4749-9e67-da027e8dfecb",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is an object",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a directly-rejected promise `onFulfilled` is an object",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rejected(dummy).then(nonFunction, function () {\n    done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f2cb8fda-d686-4683-a53e-67c9327dcba2",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "8edcc02e-5cca-4ee1-8998-dcfd1e61a26b",
                      "92cb4705-1637-40b2-8be2-d0a015d2957c",
                      "8db6621d-8289-49cc-bbb8-65a808dcc1ab",
                      "f50b18a0-66b2-4749-9e67-da027e8dfecb",
                      "f2cb8fda-d686-4683-a53e-67c9327dcba2"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 7,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "ad2896c2-41ce-45bd-8402-04aa92e3db48",
                    "title": "applied to a promise rejected and then chained off of",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "`onFulfilled` is `undefined`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a promise rejected and then chained off of `onFulfilled` is `undefined`",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rejected(dummy).then(function () { }, undefined).then(nonFunction, function () {\n    done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "45cc5f58-c103-43d8-8dc6-362558cba123",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is `null`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a promise rejected and then chained off of `onFulfilled` is `null`",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rejected(dummy).then(function () { }, undefined).then(nonFunction, function () {\n    done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "fa3754ef-cd86-4b92-859a-c179d4bf6716",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is `false`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a promise rejected and then chained off of `onFulfilled` is `false`",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rejected(dummy).then(function () { }, undefined).then(nonFunction, function () {\n    done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "30a727d4-3b88-4262-bcf3-ee61a72508bb",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is `5`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a promise rejected and then chained off of `onFulfilled` is `5`",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rejected(dummy).then(function () { }, undefined).then(nonFunction, function () {\n    done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "08489245-c8ee-44ef-8546-062994d79f09",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is an object",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a promise rejected and then chained off of `onFulfilled` is an object",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rejected(dummy).then(function () { }, undefined).then(nonFunction, function () {\n    done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ac76c317-7733-462b-92ed-f376e243bfbc",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "45cc5f58-c103-43d8-8dc6-362558cba123",
                      "fa3754ef-cd86-4b92-859a-c179d4bf6716",
                      "30a727d4-3b88-4262-bcf3-ee61a72508bb",
                      "08489245-c8ee-44ef-8546-062994d79f09",
                      "ac76c317-7733-462b-92ed-f376e243bfbc"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 24,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "d87ff04a-969c-4ccc-a5a3-3ce6cb723f75",
                "title": "2.2.1.2: If `onRejected` is not a function, it must be ignored.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "f313c710-a4cb-4025-98a2-ab29e7eac68d",
                    "title": "applied to a directly-fulfilled promise",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "`onRejected` is `undefined`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a directly-fulfilled promise `onRejected` is `undefined`",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "resolved(dummy).then(function () {\n    done();\n}, nonFunction);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "29f83a8a-de2e-4d90-be39-ce2885ba6b68",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onRejected` is `null`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a directly-fulfilled promise `onRejected` is `null`",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "resolved(dummy).then(function () {\n    done();\n}, nonFunction);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4e868a88-54cf-45a0-bfbd-84f621c9a04f",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onRejected` is `false`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a directly-fulfilled promise `onRejected` is `false`",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "resolved(dummy).then(function () {\n    done();\n}, nonFunction);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8e2576f0-af59-498a-8114-725b4a315ee5",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onRejected` is `5`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a directly-fulfilled promise `onRejected` is `5`",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "resolved(dummy).then(function () {\n    done();\n}, nonFunction);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5ba3526a-a263-4798-bf9b-3abe7c2e958e",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onRejected` is an object",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a directly-fulfilled promise `onRejected` is an object",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "resolved(dummy).then(function () {\n    done();\n}, nonFunction);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7632ae1a-51c7-4fa8-84e1-d5e949c23747",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "29f83a8a-de2e-4d90-be39-ce2885ba6b68",
                      "4e868a88-54cf-45a0-bfbd-84f621c9a04f",
                      "8e2576f0-af59-498a-8114-725b4a315ee5",
                      "5ba3526a-a263-4798-bf9b-3abe7c2e958e",
                      "7632ae1a-51c7-4fa8-84e1-d5e949c23747"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 11,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "0c054396-8421-49b6-91ec-cf6ae1949859",
                    "title": "applied to a promise fulfilled and then chained off of",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "`onFulfilled` is `undefined`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a promise fulfilled and then chained off of `onFulfilled` is `undefined`",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "resolved(dummy).then(undefined, function () { }).then(function () {\n    done();\n}, nonFunction);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b654032d-495d-4250-a50f-b58631e5874d",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is `null`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a promise fulfilled and then chained off of `onFulfilled` is `null`",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "resolved(dummy).then(undefined, function () { }).then(function () {\n    done();\n}, nonFunction);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f755d202-46b2-4d08-90bb-f39e419eaf42",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is `false`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a promise fulfilled and then chained off of `onFulfilled` is `false`",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "resolved(dummy).then(undefined, function () { }).then(function () {\n    done();\n}, nonFunction);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8837f2a1-c216-4fc2-ad08-47b5ac78244d",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is `5`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a promise fulfilled and then chained off of `onFulfilled` is `5`",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "resolved(dummy).then(undefined, function () { }).then(function () {\n    done();\n}, nonFunction);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ab65ba27-5056-441f-8939-3c7141b6342c",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is an object",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a promise fulfilled and then chained off of `onFulfilled` is an object",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "resolved(dummy).then(undefined, function () { }).then(function () {\n    done();\n}, nonFunction);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "793e4d63-9c1e-49ef-969e-b79763d46784",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "b654032d-495d-4250-a50f-b58631e5874d",
                      "f755d202-46b2-4d08-90bb-f39e419eaf42",
                      "8837f2a1-c216-4fc2-ad08-47b5ac78244d",
                      "ab65ba27-5056-441f-8939-3c7141b6342c",
                      "793e4d63-9c1e-49ef-969e-b79763d46784"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 26,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "1e9225e8-1802-4eef-814f-fa43024cf0cc",
            "title": "2.2.2: If `onFulfilled` is a function,",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "725b1f26-e85f-4953-b0d8-3382b9370179",
                "title": "2.2.2.1: it must be called after `promise` is fulfilled, with `promise`’s fulfillment value as its first argument.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.1: it must be called after `promise` is fulfilled, with `promise`’s fulfillment value as its first argument. already-fulfilled",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "78a37e87-3ac3-40aa-a468-12fa6cb8cb7c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.1: it must be called after `promise` is fulfilled, with `promise`’s fulfillment value as its first argument. immediately-fulfilled",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "392ae714-d465-4464-9f79-f015f3601663",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.1: it must be called after `promise` is fulfilled, with `promise`’s fulfillment value as its first argument. eventually-fulfilled",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bb337ffc-14f3-44bc-a228-d0b03e3a44cf",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "78a37e87-3ac3-40aa-a468-12fa6cb8cb7c",
                  "392ae714-d465-4464-9f79-f015f3601663",
                  "bb337ffc-14f3-44bc-a228-d0b03e3a44cf"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 64,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "36aa13b7-696d-466f-85ab-cf48675332d2",
                "title": "2.2.2.2: it must not be called before `promise` is fulfilled",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "fulfilled after a delay",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.2: it must not be called before `promise` is fulfilled fulfilled after a delay",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar isFulfilled = false;\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(isFulfilled, true);\n    done();\n});\nsetTimeout(function () {\n    d.resolve(dummy);\n    isFulfilled = true;\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b733eaeb-ecc4-41f3-9293-ce28e4a02271",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "never fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.2: it must not be called before `promise` is fulfilled never fulfilled",
                    "timedOut": false,
                    "duration": 152,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar onFulfilledCalled = false;\nd.promise.then(function onFulfilled() {\n    onFulfilledCalled = true;\n    done();\n});\nsetTimeout(function () {\n    assert.strictEqual(onFulfilledCalled, false);\n    done();\n}, 150);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7cd2f3be-01bd-4b8c-a33f-26a04ec8c888",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "b733eaeb-ecc4-41f3-9293-ce28e4a02271",
                  "7cd2f3be-01bd-4b8c-a33f-26a04ec8c888"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 207,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "1c6c5081-46c3-4730-998c-c07430a4b93d",
                "title": "2.2.2.3: it must not be called more than once.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.3: it must not be called more than once. already-fulfilled",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var timesCalled = 0;\nresolved(dummy).then(function onFulfilled() {\n    assert.strictEqual(++timesCalled, 1);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "58c24df2-74e0-4ee4-929c-787f67cb12e5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "trying to fulfill a pending promise more than once, immediately",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.3: it must not be called more than once. trying to fulfill a pending promise more than once, immediately",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar timesCalled = 0;\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(++timesCalled, 1);\n    done();\n});\nd.resolve(dummy);\nd.resolve(dummy);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b3f8b2bf-3e2e-4b40-8787-f9f69977d950",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "trying to fulfill a pending promise more than once, delayed",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.3: it must not be called more than once. trying to fulfill a pending promise more than once, delayed",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar timesCalled = 0;\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(++timesCalled, 1);\n    done();\n});\nsetTimeout(function () {\n    d.resolve(dummy);\n    d.resolve(dummy);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b93e9e5d-3bd5-4b50-855c-62a05fa2b0f1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "trying to fulfill a pending promise more than once, immediately then delayed",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.3: it must not be called more than once. trying to fulfill a pending promise more than once, immediately then delayed",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar timesCalled = 0;\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(++timesCalled, 1);\n    done();\n});\nd.resolve(dummy);\nsetTimeout(function () {\n    d.resolve(dummy);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "217993fd-7acd-41e8-9f16-9b4a5d9a80de",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when multiple `then` calls are made, spaced apart in time",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.3: it must not be called more than once. when multiple `then` calls are made, spaced apart in time",
                    "timedOut": false,
                    "duration": 157,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar timesCalled = [0, 0, 0];\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(++timesCalled[0], 1);\n});\nsetTimeout(function () {\n    d.promise.then(function onFulfilled() {\n        assert.strictEqual(++timesCalled[1], 1);\n    });\n}, 50);\nsetTimeout(function () {\n    d.promise.then(function onFulfilled() {\n        assert.strictEqual(++timesCalled[2], 1);\n        done();\n    });\n}, 100);\nsetTimeout(function () {\n    d.resolve(dummy);\n}, 150);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "91de60d9-f832-4066-93ad-d1a7f82fec4d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when `then` is interleaved with fulfillment",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.3: it must not be called more than once. when `then` is interleaved with fulfillment",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar timesCalled = [0, 0];\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(++timesCalled[0], 1);\n});\nd.resolve(dummy);\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(++timesCalled[1], 1);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0384e6b7-d60c-4a77-b386-712453f2369e",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "58c24df2-74e0-4ee4-929c-787f67cb12e5",
                  "b3f8b2bf-3e2e-4b40-8787-f9f69977d950",
                  "b93e9e5d-3bd5-4b50-855c-62a05fa2b0f1",
                  "217993fd-7acd-41e8-9f16-9b4a5d9a80de",
                  "91de60d9-f832-4066-93ad-d1a7f82fec4d",
                  "0384e6b7-d60c-4a77-b386-712453f2369e"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 220,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "b4a380d2-d2bd-4ee9-bb8e-18ca3c94a439",
            "title": "2.2.3: If `onRejected` is a function,",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "3c19c82d-7f3d-4259-babe-c17ebb335aff",
                "title": "2.2.3.1: it must be called after `promise` is rejected, with `promise`’s rejection reason as its first argument.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.1: it must be called after `promise` is rejected, with `promise`’s rejection reason as its first argument. already-rejected",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "103d1efb-727a-4c99-b390-f5b1c8342e14",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.1: it must be called after `promise` is rejected, with `promise`’s rejection reason as its first argument. immediately-rejected",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ee20bcb9-719a-4b26-bd65-f7436ee4c275",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.1: it must be called after `promise` is rejected, with `promise`’s rejection reason as its first argument. eventually-rejected",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "140a4d74-86d0-4b81-ad11-9743b6f87352",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "103d1efb-727a-4c99-b390-f5b1c8342e14",
                  "ee20bcb9-719a-4b26-bd65-f7436ee4c275",
                  "140a4d74-86d0-4b81-ad11-9743b6f87352"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 60,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "95a0a2ce-a837-40fc-95a7-cae07ea8f2b8",
                "title": "2.2.3.2: it must not be called before `promise` is rejected",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "rejected after a delay",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.2: it must not be called before `promise` is rejected rejected after a delay",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar isRejected = false;\nd.promise.then(null, function onRejected() {\n    assert.strictEqual(isRejected, true);\n    done();\n});\nsetTimeout(function () {\n    d.reject(dummy);\n    isRejected = true;\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1b7bfd4e-5df6-4e8c-bb18-c34e69591275",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "never rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.2: it must not be called before `promise` is rejected never rejected",
                    "timedOut": false,
                    "duration": 151,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar onRejectedCalled = false;\nd.promise.then(null, function onRejected() {\n    onRejectedCalled = true;\n    done();\n});\nsetTimeout(function () {\n    assert.strictEqual(onRejectedCalled, false);\n    done();\n}, 150);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "14618212-51b5-4339-92a5-7d4d5ef15b55",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "1b7bfd4e-5df6-4e8c-bb18-c34e69591275",
                  "14618212-51b5-4339-92a5-7d4d5ef15b55"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 205,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "0b5ecafb-6bd2-4008-bd32-d6bd95f99100",
                "title": "2.2.3.3: it must not be called more than once.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.3: it must not be called more than once. already-rejected",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var timesCalled = 0;\nrejected(dummy).then(null, function onRejected() {\n    assert.strictEqual(++timesCalled, 1);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8bd3fc97-b3e3-4977-b094-8333239abbbd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "trying to reject a pending promise more than once, immediately",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.3: it must not be called more than once. trying to reject a pending promise more than once, immediately",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar timesCalled = 0;\nd.promise.then(null, function onRejected() {\n    assert.strictEqual(++timesCalled, 1);\n    done();\n});\nd.reject(dummy);\nd.reject(dummy);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5b7ddfa5-0191-444f-acea-674c60862880",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "trying to reject a pending promise more than once, delayed",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.3: it must not be called more than once. trying to reject a pending promise more than once, delayed",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar timesCalled = 0;\nd.promise.then(null, function onRejected() {\n    assert.strictEqual(++timesCalled, 1);\n    done();\n});\nsetTimeout(function () {\n    d.reject(dummy);\n    d.reject(dummy);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d37a63ed-4f78-49e1-bdf5-3b11206fdfdb",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "trying to reject a pending promise more than once, immediately then delayed",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.3: it must not be called more than once. trying to reject a pending promise more than once, immediately then delayed",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar timesCalled = 0;\nd.promise.then(null, function onRejected() {\n    assert.strictEqual(++timesCalled, 1);\n    done();\n});\nd.reject(dummy);\nsetTimeout(function () {\n    d.reject(dummy);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dd90191e-1429-4827-81a5-ad55cea50b83",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when multiple `then` calls are made, spaced apart in time",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.3: it must not be called more than once. when multiple `then` calls are made, spaced apart in time",
                    "timedOut": false,
                    "duration": 155,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar timesCalled = [0, 0, 0];\nd.promise.then(null, function onRejected() {\n    assert.strictEqual(++timesCalled[0], 1);\n});\nsetTimeout(function () {\n    d.promise.then(null, function onRejected() {\n        assert.strictEqual(++timesCalled[1], 1);\n    });\n}, 50);\nsetTimeout(function () {\n    d.promise.then(null, function onRejected() {\n        assert.strictEqual(++timesCalled[2], 1);\n        done();\n    });\n}, 100);\nsetTimeout(function () {\n    d.reject(dummy);\n}, 150);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3b0708d0-3e6e-4a6a-9e5a-cf6037888385",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when `then` is interleaved with rejection",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.3: it must not be called more than once. when `then` is interleaved with rejection",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar timesCalled = [0, 0];\nd.promise.then(null, function onRejected() {\n    assert.strictEqual(++timesCalled[0], 1);\n});\nd.reject(dummy);\nd.promise.then(null, function onRejected() {\n    assert.strictEqual(++timesCalled[1], 1);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "33ed7162-3eff-424c-8656-9b63a95ccf3e",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "8bd3fc97-b3e3-4977-b094-8333239abbbd",
                  "5b7ddfa5-0191-444f-acea-674c60862880",
                  "d37a63ed-4f78-49e1-bdf5-3b11206fdfdb",
                  "dd90191e-1429-4827-81a5-ad55cea50b83",
                  "3b0708d0-3e6e-4a6a-9e5a-cf6037888385",
                  "33ed7162-3eff-424c-8656-9b63a95ccf3e"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 221,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "aa781b4c-3709-4af0-b59f-6ef712266509",
            "title": "2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code.",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "e9352cbb-db4a-4b8a-9d36-96bb48a599c4",
                "title": "`then` returns before the promise becomes fulfilled or rejected",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. `then` returns before the promise becomes fulfilled or rejected already-fulfilled",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b9d90ca6-7809-4bf0-bb7e-90740ae00540",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. `then` returns before the promise becomes fulfilled or rejected immediately-fulfilled",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3f218362-d463-42d5-b67c-de5786c0a534",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. `then` returns before the promise becomes fulfilled or rejected eventually-fulfilled",
                    "timedOut": false,
                    "duration": 53,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "efb07a79-99d8-4ef4-a919-e3716302bef7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. `then` returns before the promise becomes fulfilled or rejected already-rejected",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "93918c95-d94a-4c24-af76-3a956d34fa50",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. `then` returns before the promise becomes fulfilled or rejected immediately-rejected",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3349b5a9-5919-41a0-a11a-72c847884ee6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. `then` returns before the promise becomes fulfilled or rejected eventually-rejected",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "57a7d2d9-50c4-4efe-a179-303b9ea06da0",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "b9d90ca6-7809-4bf0-bb7e-90740ae00540",
                  "3f218362-d463-42d5-b67c-de5786c0a534",
                  "efb07a79-99d8-4ef4-a919-e3716302bef7",
                  "93918c95-d94a-4c24-af76-3a956d34fa50",
                  "3349b5a9-5919-41a0-a11a-72c847884ee6",
                  "57a7d2d9-50c4-4efe-a179-303b9ea06da0"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 118,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "5aeb9fee-bdc1-4de7-9698-50c58b11ae4a",
                "title": "Clean-stack execution ordering tests (fulfillment case)",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "when `onFulfilled` is added immediately before the promise is fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (fulfillment case) when `onFulfilled` is added immediately before the promise is fulfilled",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar onFulfilledCalled = false;\nd.promise.then(function onFulfilled() {\n    onFulfilledCalled = true;\n});\nd.resolve(dummy);\nassert.strictEqual(onFulfilledCalled, false);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c7747907-d0fd-494d-a655-6970fbbaf8c5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when `onFulfilled` is added immediately after the promise is fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (fulfillment case) when `onFulfilled` is added immediately after the promise is fulfilled",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar onFulfilledCalled = false;\nd.resolve(dummy);\nd.promise.then(function onFulfilled() {\n    onFulfilledCalled = true;\n});\nassert.strictEqual(onFulfilledCalled, false);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "16904fdd-7e08-463c-b0c1-3c2331b314cf",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when one `onFulfilled` is added inside another `onFulfilled`",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (fulfillment case) when one `onFulfilled` is added inside another `onFulfilled`",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved();\nvar firstOnFulfilledFinished = false;\npromise.then(function () {\n    promise.then(function () {\n        assert.strictEqual(firstOnFulfilledFinished, true);\n        done();\n    });\n    firstOnFulfilledFinished = true;\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "897624dc-f8a1-4d7c-b8c6-d86fb29cf4d5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when `onFulfilled` is added inside an `onRejected`",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (fulfillment case) when `onFulfilled` is added inside an `onRejected`",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected();\nvar promise2 = resolved();\nvar firstOnRejectedFinished = false;\npromise.then(null, function () {\n    promise2.then(function () {\n        assert.strictEqual(firstOnRejectedFinished, true);\n        done();\n    });\n    firstOnRejectedFinished = true;\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0cd79cd4-deb9-46b5-88b5-07c65381308b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when the promise is fulfilled asynchronously",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (fulfillment case) when the promise is fulfilled asynchronously",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar firstStackFinished = false;\nsetTimeout(function () {\n    d.resolve(dummy);\n    firstStackFinished = true;\n}, 0);\nd.promise.then(function () {\n    assert.strictEqual(firstStackFinished, true);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2372d461-f02a-420d-876c-095d6ab4b82c",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "c7747907-d0fd-494d-a655-6970fbbaf8c5",
                  "16904fdd-7e08-463c-b0c1-3c2331b314cf",
                  "897624dc-f8a1-4d7c-b8c6-d86fb29cf4d5",
                  "0cd79cd4-deb9-46b5-88b5-07c65381308b",
                  "2372d461-f02a-420d-876c-095d6ab4b82c"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 14,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "022ae642-9c5f-41b2-be5f-a35f3635140e",
                "title": "Clean-stack execution ordering tests (rejection case)",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "when `onRejected` is added immediately before the promise is rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (rejection case) when `onRejected` is added immediately before the promise is rejected",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar onRejectedCalled = false;\nd.promise.then(null, function onRejected() {\n    onRejectedCalled = true;\n});\nd.reject(dummy);\nassert.strictEqual(onRejectedCalled, false);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e5e2d03d-bcb8-4b88-950d-173d5e0cf572",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when `onRejected` is added immediately after the promise is rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (rejection case) when `onRejected` is added immediately after the promise is rejected",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar onRejectedCalled = false;\nd.reject(dummy);\nd.promise.then(null, function onRejected() {\n    onRejectedCalled = true;\n});\nassert.strictEqual(onRejectedCalled, false);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3783c9e2-df10-4fd8-8dc4-07871ffaca3a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when `onRejected` is added inside an `onFulfilled`",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (rejection case) when `onRejected` is added inside an `onFulfilled`",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved();\nvar promise2 = rejected();\nvar firstOnFulfilledFinished = false;\npromise.then(function () {\n    promise2.then(null, function () {\n        assert.strictEqual(firstOnFulfilledFinished, true);\n        done();\n    });\n    firstOnFulfilledFinished = true;\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5a6a4c7d-5749-4d0a-b42f-361aa6d4bdab",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when one `onRejected` is added inside another `onRejected`",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (rejection case) when one `onRejected` is added inside another `onRejected`",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected();\nvar firstOnRejectedFinished = false;\npromise.then(null, function () {\n    promise.then(null, function () {\n        assert.strictEqual(firstOnRejectedFinished, true);\n        done();\n    });\n    firstOnRejectedFinished = true;\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b89fa42f-1eb4-4048-b20d-75e0e69afbe8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when the promise is rejected asynchronously",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (rejection case) when the promise is rejected asynchronously",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar firstStackFinished = false;\nsetTimeout(function () {\n    d.reject(dummy);\n    firstStackFinished = true;\n}, 0);\nd.promise.then(null, function () {\n    assert.strictEqual(firstStackFinished, true);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c4912ab7-2d3e-40f5-ab63-56d81a3354e9",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "e5e2d03d-bcb8-4b88-950d-173d5e0cf572",
                  "3783c9e2-df10-4fd8-8dc4-07871ffaca3a",
                  "5a6a4c7d-5749-4d0a-b42f-361aa6d4bdab",
                  "b89fa42f-1eb4-4048-b20d-75e0e69afbe8",
                  "c4912ab7-2d3e-40f5-ab63-56d81a3354e9"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 13,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "bab26bd6-5f00-4c42-88e8-626ff091e239",
            "title": "2.2.5 `onFulfilled` and `onRejected` must be called as functions (i.e. with no `this` value).",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "1ed12b40-8a4d-4dd0-8aa5-a555fcda4c70",
                "title": "strict mode",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.5 `onFulfilled` and `onRejected` must be called as functions (i.e. with no `this` value). strict mode fulfilled",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "resolved(dummy).then(function onFulfilled() {\n    \"use strict\";\n    assert.strictEqual(this, undefined);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "87d1bafe-0421-4b7d-aca2-b707c956ac24",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.5 `onFulfilled` and `onRejected` must be called as functions (i.e. with no `this` value). strict mode rejected",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "rejected(dummy).then(null, function onRejected() {\n    \"use strict\";\n    assert.strictEqual(this, undefined);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "45df8ac4-0bb1-449b-906b-f467597d2143",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "87d1bafe-0421-4b7d-aca2-b707c956ac24",
                  "45df8ac4-0bb1-449b-906b-f467597d2143"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 5,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "277aa087-57bd-4363-bf9b-5a29c56f0d51",
                "title": "sloppy mode",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.5 `onFulfilled` and `onRejected` must be called as functions (i.e. with no `this` value). sloppy mode fulfilled",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "resolved(dummy).then(function onFulfilled() {\n    assert.strictEqual(this, global);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "372560be-aaee-4e82-9674-f1e3c70f218c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.5 `onFulfilled` and `onRejected` must be called as functions (i.e. with no `this` value). sloppy mode rejected",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "rejected(dummy).then(null, function onRejected() {\n    assert.strictEqual(this, global);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ced348af-f95c-4b23-9d62-7ea825037df9",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "372560be-aaee-4e82-9674-f1e3c70f218c",
                  "ced348af-f95c-4b23-9d62-7ea825037df9"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 3,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "9de92856-b7cc-4bfe-b06e-e96aa562abd5",
            "title": "2.2.6: `then` may be called multiple times on the same promise.",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "efdd1bbd-a504-4159-b78f-dd6f5496e1a6",
                "title": "2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "b8c3a20e-e4e2-4347-ae15-b416ad98d371",
                    "title": "multiple boring fulfillment handlers",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. multiple boring fulfillment handlers already-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7ab0efb5-c43d-44f2-8b90-1ad70fc48120",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. multiple boring fulfillment handlers immediately-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "01345853-8932-486d-859d-4c5fa249ec77",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. multiple boring fulfillment handlers eventually-fulfilled",
                        "timedOut": false,
                        "duration": 54,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0fb2fc80-10fc-4286-9f21-a909201433c2",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "7ab0efb5-c43d-44f2-8b90-1ad70fc48120",
                      "01345853-8932-486d-859d-4c5fa249ec77",
                      "0fb2fc80-10fc-4286-9f21-a909201433c2"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 64,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "86de89f2-da76-49ad-96b5-f2b70afa6645",
                    "title": "multiple fulfillment handlers, one of which throws",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. multiple fulfillment handlers, one of which throws already-fulfilled",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "596cb036-9f65-4532-9eb6-20424aa06950",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. multiple fulfillment handlers, one of which throws immediately-fulfilled",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "daf06ea0-38c2-47f8-b241-4a7b75620a44",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. multiple fulfillment handlers, one of which throws eventually-fulfilled",
                        "timedOut": false,
                        "duration": 55,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f9e7e6d6-beab-4ecd-bb14-3062e520d12e",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "596cb036-9f65-4532-9eb6-20424aa06950",
                      "daf06ea0-38c2-47f8-b241-4a7b75620a44",
                      "f9e7e6d6-beab-4ecd-bb14-3062e520d12e"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 61,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "c694863e-6f2f-4ce7-bc5b-7a1d50b93fa5",
                    "title": "results in multiple branching chains with their own fulfillment values",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. results in multiple branching chains with their own fulfillment values already-fulfilled",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c34676fd-b257-46cc-8872-ad7c25076664",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. results in multiple branching chains with their own fulfillment values immediately-fulfilled",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f0d7991b-3368-4bb7-933f-9d577d79c9ac",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. results in multiple branching chains with their own fulfillment values eventually-fulfilled",
                        "timedOut": false,
                        "duration": 58,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "091a7871-d3d6-47dd-b2a9-06c2e58189e1",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "c34676fd-b257-46cc-8872-ad7c25076664",
                      "f0d7991b-3368-4bb7-933f-9d577d79c9ac",
                      "091a7871-d3d6-47dd-b2a9-06c2e58189e1"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 72,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "b1538996-2856-4beb-a513-f3fd0a75b526",
                    "title": "`onFulfilled` handlers are called in the original order",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. `onFulfilled` handlers are called in the original order already-fulfilled",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "03ecd2a8-d1fa-489e-8996-e77f39893659",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. `onFulfilled` handlers are called in the original order immediately-fulfilled",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d80020f5-8abe-4594-bc55-2abb6f7d7bba",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. `onFulfilled` handlers are called in the original order eventually-fulfilled",
                        "timedOut": false,
                        "duration": 52,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f462aabc-4411-4c4b-86fd-a5e725a6f369",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [
                      {
                        "uuid": "7c12dca3-1aee-4510-8548-0d99d708c7a4",
                        "title": "even when one handler is added inside another handler",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "already-fulfilled",
                            "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. `onFulfilled` handlers are called in the original order even when one handler is added inside another handler already-fulfilled",
                            "timedOut": false,
                            "duration": 20,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "test(resolved(value), done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "6f022764-4ad6-4011-b778-82d3083261fb",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "immediately-fulfilled",
                            "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. `onFulfilled` handlers are called in the original order even when one handler is added inside another handler immediately-fulfilled",
                            "timedOut": false,
                            "duration": 21,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "53c7cf65-724c-492b-beaa-5fc4bd489292",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "eventually-fulfilled",
                            "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. `onFulfilled` handlers are called in the original order even when one handler is added inside another handler eventually-fulfilled",
                            "timedOut": false,
                            "duration": 71,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "b5de985b-4e30-4c1f-b9f6-346462d6e84c",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "6f022764-4ad6-4011-b778-82d3083261fb",
                          "53c7cf65-724c-492b-beaa-5fc4bd489292",
                          "b5de985b-4e30-4c1f-b9f6-346462d6e84c"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 112,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      }
                    ],
                    "passes": [
                      "03ecd2a8-d1fa-489e-8996-e77f39893659",
                      "d80020f5-8abe-4594-bc55-2abb6f7d7bba",
                      "f462aabc-4411-4c4b-86fd-a5e725a6f369"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 56,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "f0bec8bc-9654-4b35-b544-fe3a5eb4b0d2",
                "title": "2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "7b64c75d-5f21-4bd6-8778-d70887ff28a9",
                    "title": "multiple boring rejection handlers",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. multiple boring rejection handlers already-rejected",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8ffa851f-1d1c-4daf-8e29-6cb8f9997d72",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. multiple boring rejection handlers immediately-rejected",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "24be80ae-83df-4b8e-aba4-ab21f2ee2c1d",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. multiple boring rejection handlers eventually-rejected",
                        "timedOut": false,
                        "duration": 56,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "95b1f617-8821-4d07-908e-631380058cd8",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "8ffa851f-1d1c-4daf-8e29-6cb8f9997d72",
                      "24be80ae-83df-4b8e-aba4-ab21f2ee2c1d",
                      "95b1f617-8821-4d07-908e-631380058cd8"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 63,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "2b407c71-4c0a-4aee-a9cb-9882f5fe1ed4",
                    "title": "multiple rejection handlers, one of which throws",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. multiple rejection handlers, one of which throws already-rejected",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "42a4106d-2f11-4f59-96c0-4bd92d9a5eeb",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. multiple rejection handlers, one of which throws immediately-rejected",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7f0d3218-1683-4336-81a7-9b6185446f60",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. multiple rejection handlers, one of which throws eventually-rejected",
                        "timedOut": false,
                        "duration": 56,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2e347a27-95e5-45f2-a67b-3b5e36a429c7",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "42a4106d-2f11-4f59-96c0-4bd92d9a5eeb",
                      "7f0d3218-1683-4336-81a7-9b6185446f60",
                      "2e347a27-95e5-45f2-a67b-3b5e36a429c7"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 61,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "c5ecb975-b312-4265-ad26-4169c5ae7bfa",
                    "title": "results in multiple branching chains with their own fulfillment values",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. results in multiple branching chains with their own fulfillment values already-rejected",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7dbac9c7-c2ac-4c1c-a136-3a7eaf645fdc",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. results in multiple branching chains with their own fulfillment values immediately-rejected",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2ac80e79-3dd4-4cc8-a9a4-1593c7ed4af7",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. results in multiple branching chains with their own fulfillment values eventually-rejected",
                        "timedOut": false,
                        "duration": 57,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "610bc802-1fa4-4b09-9128-6cc74171d6e1",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "7dbac9c7-c2ac-4c1c-a136-3a7eaf645fdc",
                      "2ac80e79-3dd4-4cc8-a9a4-1593c7ed4af7",
                      "610bc802-1fa4-4b09-9128-6cc74171d6e1"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 71,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "c00be438-0c51-4b66-aa24-e3b23573b43c",
                    "title": "`onRejected` handlers are called in the original order",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. `onRejected` handlers are called in the original order already-rejected",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ccd0c010-acba-47a7-80fb-0ef55f6b4af9",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. `onRejected` handlers are called in the original order immediately-rejected",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d88862de-baf9-4e9d-b507-99c10f0f9853",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. `onRejected` handlers are called in the original order eventually-rejected",
                        "timedOut": false,
                        "duration": 54,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e82fb285-909f-4add-81a9-599941eb2061",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [
                      {
                        "uuid": "6a18d90f-2fb4-4c5b-9704-3882a89bd7de",
                        "title": "even when one handler is added inside another handler",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "already-rejected",
                            "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. `onRejected` handlers are called in the original order even when one handler is added inside another handler already-rejected",
                            "timedOut": false,
                            "duration": 18,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "test(rejected(reason), done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "08edebbb-2aee-4b63-9c19-6fae5e7a5752",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "immediately-rejected",
                            "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. `onRejected` handlers are called in the original order even when one handler is added inside another handler immediately-rejected",
                            "timedOut": false,
                            "duration": 20,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "63e98c9d-4938-4644-9751-6a270658d767",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "eventually-rejected",
                            "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. `onRejected` handlers are called in the original order even when one handler is added inside another handler eventually-rejected",
                            "timedOut": false,
                            "duration": 69,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "140f5c96-7f75-445d-8790-92b9c8552088",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "08edebbb-2aee-4b63-9c19-6fae5e7a5752",
                          "63e98c9d-4938-4644-9751-6a270658d767",
                          "140f5c96-7f75-445d-8790-92b9c8552088"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 107,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      }
                    ],
                    "passes": [
                      "ccd0c010-acba-47a7-80fb-0ef55f6b4af9",
                      "d88862de-baf9-4e9d-b507-99c10f0f9853",
                      "e82fb285-909f-4add-81a9-599941eb2061"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 60,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "fb8a4c9d-1ac6-4475-bbf2-8ef431b960ef",
            "title": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)`",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "is a promise",
                "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` is a promise",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var promise1 = deferred().promise;\nvar promise2 = promise1.then();\nassert(typeof promise2 === \"object\" || typeof promise2 === \"function\");\nassert.notStrictEqual(promise2, null);\nassert.strictEqual(typeof promise2.then, \"function\");",
                "err": {},
                "isRoot": false,
                "uuid": "0590190e-b7ae-491d-a858-65382876fb62",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [
              {
                "uuid": "d7b61ffa-bf15-491c-821d-a6e3c10b4bf0",
                "title": "2.2.7.1: If either `onFulfilled` or `onRejected` returns a value `x`, run the Promise Resolution Procedure `[[Resolve]](promise2, x)`",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "see separate 3.3 tests",
                    "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.1: If either `onFulfilled` or `onRejected` returns a value `x`, run the Promise Resolution Procedure `[[Resolve]](promise2, x)` see separate 3.3 tests",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a22129b2-a98b-4782-80d9-dd97aa42ad86",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "a22129b2-a98b-4782-80d9-dd97aa42ad86"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "649c9981-5dfe-4676-8a49-4aa0375e4e0c",
                "title": "2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "adf51b2e-934f-494e-a334-eca5a653dc06",
                    "title": "The reason is `undefined`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `undefined` already-fulfilled",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c30d8ca1-c04e-4671-8306-e7b01bdc3e2b",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `undefined` immediately-fulfilled",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "db240931-07ea-49bb-a9dd-a61cd30d73f2",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `undefined` eventually-fulfilled",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "118bb523-471f-4d2a-86bf-bcd20361229d",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `undefined` already-rejected",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6c3bea2d-1a3b-4ee3-ad86-fd87b2c0f50b",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `undefined` immediately-rejected",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e9bba732-48c0-4feb-8541-49c2f9eac9c3",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `undefined` eventually-rejected",
                        "timedOut": false,
                        "duration": 58,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "597ed545-ed46-4ca7-aabd-243a3deedc97",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "c30d8ca1-c04e-4671-8306-e7b01bdc3e2b",
                      "db240931-07ea-49bb-a9dd-a61cd30d73f2",
                      "118bb523-471f-4d2a-86bf-bcd20361229d",
                      "6c3bea2d-1a3b-4ee3-ad86-fd87b2c0f50b",
                      "e9bba732-48c0-4feb-8541-49c2f9eac9c3",
                      "597ed545-ed46-4ca7-aabd-243a3deedc97"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 141,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "25db4420-89e1-4b41-aac7-807b86a42752",
                    "title": "The reason is `null`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `null` already-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e3a2d272-41fd-4bec-9015-5e402a99a911",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `null` immediately-fulfilled",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f3daedf3-b9ba-4405-b94c-061604f0cab6",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `null` eventually-fulfilled",
                        "timedOut": false,
                        "duration": 62,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f0941ffa-40f8-4764-8b0e-3a6976e0383e",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `null` already-rejected",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "06afe2bd-49be-4d89-80cc-82fc13bbca0f",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `null` immediately-rejected",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "395c2287-a733-42d8-8973-ee428f4d9973",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `null` eventually-rejected",
                        "timedOut": false,
                        "duration": 57,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a2a3bfeb-68a0-4895-8da8-8d4f7176a7da",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "e3a2d272-41fd-4bec-9015-5e402a99a911",
                      "f3daedf3-b9ba-4405-b94c-061604f0cab6",
                      "f0941ffa-40f8-4764-8b0e-3a6976e0383e",
                      "06afe2bd-49be-4d89-80cc-82fc13bbca0f",
                      "395c2287-a733-42d8-8973-ee428f4d9973",
                      "a2a3bfeb-68a0-4895-8da8-8d4f7176a7da"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 141,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "4194289d-ff6c-4d61-b6fc-5e9a23466ec3",
                    "title": "The reason is `false`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `false` already-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7fdcd16e-7cba-40c5-a52a-801b9bc0a639",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `false` immediately-fulfilled",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "eded7845-3d50-4f3b-989c-0e7a0caf9b8b",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `false` eventually-fulfilled",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f3413f34-8805-4da3-bf16-edcfa9a1d834",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `false` already-rejected",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "85843a28-9a68-4cb1-a58e-ec8925444c80",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `false` immediately-rejected",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f9decdcb-0393-4859-8036-0be5f185b58a",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `false` eventually-rejected",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ba43ca74-acfd-424a-a3e2-1c8d2d303ff2",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "7fdcd16e-7cba-40c5-a52a-801b9bc0a639",
                      "eded7845-3d50-4f3b-989c-0e7a0caf9b8b",
                      "f3413f34-8805-4da3-bf16-edcfa9a1d834",
                      "85843a28-9a68-4cb1-a58e-ec8925444c80",
                      "f9decdcb-0393-4859-8036-0be5f185b58a",
                      "ba43ca74-acfd-424a-a3e2-1c8d2d303ff2"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 145,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "ad41b092-a10b-4545-bc42-6d3498071413",
                    "title": "The reason is `0`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `0` already-fulfilled",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b5ea4f24-c933-45ff-b2c4-05a0448405a2",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `0` immediately-fulfilled",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "050aa985-82db-4bf8-96d0-000311d33b58",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `0` eventually-fulfilled",
                        "timedOut": false,
                        "duration": 58,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c75d5fdd-94f3-457c-807d-ee7037203f81",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `0` already-rejected",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0885ba23-5c4e-42aa-926f-9b996191fc11",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `0` immediately-rejected",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c9a141a6-2533-40de-9b4c-e53c1782d1a0",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `0` eventually-rejected",
                        "timedOut": false,
                        "duration": 57,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "dbf56856-56bb-4121-8190-fbf64d3c362f",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "b5ea4f24-c933-45ff-b2c4-05a0448405a2",
                      "050aa985-82db-4bf8-96d0-000311d33b58",
                      "c75d5fdd-94f3-457c-807d-ee7037203f81",
                      "0885ba23-5c4e-42aa-926f-9b996191fc11",
                      "c9a141a6-2533-40de-9b4c-e53c1782d1a0",
                      "dbf56856-56bb-4121-8190-fbf64d3c362f"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 139,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "d4341ecb-e335-42ac-8c32-9e4ca8db2528",
                    "title": "The reason is an error",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error already-fulfilled",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2ef4f9b9-ffe9-4fce-a15b-0132026cac96",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error immediately-fulfilled",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8084b0b8-75e0-4993-9db2-cfae8fec99b9",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error eventually-fulfilled",
                        "timedOut": false,
                        "duration": 55,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5f7f0037-ab81-4f20-bffb-cfbf8c3c7c3f",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error already-rejected",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "025e7357-273e-4aa0-aa6b-f1360ad46fa1",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error immediately-rejected",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "405f3416-f408-46c3-91c8-1e56fdaf2d61",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error eventually-rejected",
                        "timedOut": false,
                        "duration": 57,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ff41c2a0-912f-48fc-be76-52c3a7c9d2cb",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "2ef4f9b9-ffe9-4fce-a15b-0132026cac96",
                      "8084b0b8-75e0-4993-9db2-cfae8fec99b9",
                      "5f7f0037-ab81-4f20-bffb-cfbf8c3c7c3f",
                      "025e7357-273e-4aa0-aa6b-f1360ad46fa1",
                      "405f3416-f408-46c3-91c8-1e56fdaf2d61",
                      "ff41c2a0-912f-48fc-be76-52c3a7c9d2cb"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 137,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "cb6becb7-8883-4ce2-8000-bffd0726322d",
                    "title": "The reason is an error without a stack",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error without a stack already-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0914bed4-d57f-469d-b148-e7e9684fcf5e",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error without a stack immediately-fulfilled",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c121287b-eb4c-4272-ac20-03fce4c9e381",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error without a stack eventually-fulfilled",
                        "timedOut": false,
                        "duration": 56,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b7247dd4-0784-4949-a510-ec1daaeb6a68",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error without a stack already-rejected",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "90fd065f-fc90-4d45-bb42-12df9d05054d",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error without a stack immediately-rejected",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "14c8ac8d-e404-4b03-bcb8-ef33320a1bba",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error without a stack eventually-rejected",
                        "timedOut": false,
                        "duration": 56,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "74c72ddc-def5-4544-9262-67c49b005ada",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "0914bed4-d57f-469d-b148-e7e9684fcf5e",
                      "c121287b-eb4c-4272-ac20-03fce4c9e381",
                      "b7247dd4-0784-4949-a510-ec1daaeb6a68",
                      "90fd065f-fc90-4d45-bb42-12df9d05054d",
                      "14c8ac8d-e404-4b03-bcb8-ef33320a1bba",
                      "74c72ddc-def5-4544-9262-67c49b005ada"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 132,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "f8c3514c-e50a-49f6-ac03-0a087dd75077",
                    "title": "The reason is a date",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a date already-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7b0bf674-7d95-4a4d-9fba-ec71dd8ee212",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a date immediately-fulfilled",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6c73d6e2-8b93-40a6-8309-0ac1614c431d",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a date eventually-fulfilled",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "92c89dca-b4e8-4023-93a7-2fb5901341c2",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a date already-rejected",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a4b86415-86ed-43e0-98f9-7f4d8906d904",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a date immediately-rejected",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "10842fc9-bc10-4658-9297-fe2bc30d90f0",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a date eventually-rejected",
                        "timedOut": false,
                        "duration": 56,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ca1a02be-eae3-4001-8c74-d98acc4657f4",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "7b0bf674-7d95-4a4d-9fba-ec71dd8ee212",
                      "6c73d6e2-8b93-40a6-8309-0ac1614c431d",
                      "92c89dca-b4e8-4023-93a7-2fb5901341c2",
                      "a4b86415-86ed-43e0-98f9-7f4d8906d904",
                      "10842fc9-bc10-4658-9297-fe2bc30d90f0",
                      "ca1a02be-eae3-4001-8c74-d98acc4657f4"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 140,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "67aa9cfc-32fa-48e3-8d9c-6476606c9d4e",
                    "title": "The reason is an object",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an object already-fulfilled",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "51c2f10f-f327-4475-8ceb-b9282d31443e",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an object immediately-fulfilled",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "607d7295-67a5-4f75-a4b9-abb0d694fe4e",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an object eventually-fulfilled",
                        "timedOut": false,
                        "duration": 58,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c82ace43-fe5f-4cc8-8e49-9413dadedcf4",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an object already-rejected",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f4d596f1-270c-4b5d-8b17-32fc9d281595",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an object immediately-rejected",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0ce8f1f8-1135-415b-a88c-622d1d433a29",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an object eventually-rejected",
                        "timedOut": false,
                        "duration": 58,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "94e7f6ab-6761-4023-a123-0696a8087ef3",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "51c2f10f-f327-4475-8ceb-b9282d31443e",
                      "607d7295-67a5-4f75-a4b9-abb0d694fe4e",
                      "c82ace43-fe5f-4cc8-8e49-9413dadedcf4",
                      "f4d596f1-270c-4b5d-8b17-32fc9d281595",
                      "0ce8f1f8-1135-415b-a88c-622d1d433a29",
                      "94e7f6ab-6761-4023-a123-0696a8087ef3"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 141,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "17c4d47b-b91e-4995-b3a0-29783f778894",
                    "title": "The reason is an always-pending thenable",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an always-pending thenable already-fulfilled",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "60e74124-04c1-47db-9b71-27e65d9d2b22",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an always-pending thenable immediately-fulfilled",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f355a72a-0b14-4ff0-ba02-00a77a9e11d2",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an always-pending thenable eventually-fulfilled",
                        "timedOut": false,
                        "duration": 58,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d4434a08-fc48-4d96-9126-0744365fcab6",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an always-pending thenable already-rejected",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a28b7ebb-7737-4c86-a164-eebadd37813b",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an always-pending thenable immediately-rejected",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b23a9b47-2211-4f26-862e-cee32d9cf7fd",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an always-pending thenable eventually-rejected",
                        "timedOut": false,
                        "duration": 55,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0d67fd23-276a-4e44-b07d-db102ca14086",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "60e74124-04c1-47db-9b71-27e65d9d2b22",
                      "f355a72a-0b14-4ff0-ba02-00a77a9e11d2",
                      "d4434a08-fc48-4d96-9126-0744365fcab6",
                      "a28b7ebb-7737-4c86-a164-eebadd37813b",
                      "b23a9b47-2211-4f26-862e-cee32d9cf7fd",
                      "0d67fd23-276a-4e44-b07d-db102ca14086"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 138,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "540c1c75-9465-4389-b5b8-92ad7851ce42",
                    "title": "The reason is a fulfilled promise",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a fulfilled promise already-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "357f698d-f604-47b4-b9db-021cd7844fb6",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a fulfilled promise immediately-fulfilled",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "40852230-ad1d-40a4-bb2f-c6a7dcde9ad0",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a fulfilled promise eventually-fulfilled",
                        "timedOut": false,
                        "duration": 57,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d3070c10-f158-4228-ba62-136f25abad5e",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a fulfilled promise already-rejected",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "abc7d2a5-ad76-4de6-a253-f434dd689e5b",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a fulfilled promise immediately-rejected",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "147fceb8-8d07-40b4-98a4-8d2ae02db36c",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a fulfilled promise eventually-rejected",
                        "timedOut": false,
                        "duration": 70,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f148c85c-779e-4f3e-b284-1e21e8929eb2",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "357f698d-f604-47b4-b9db-021cd7844fb6",
                      "40852230-ad1d-40a4-bb2f-c6a7dcde9ad0",
                      "d3070c10-f158-4228-ba62-136f25abad5e",
                      "abc7d2a5-ad76-4de6-a253-f434dd689e5b",
                      "147fceb8-8d07-40b4-98a4-8d2ae02db36c",
                      "f148c85c-779e-4f3e-b284-1e21e8929eb2"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 149,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "8790fd2b-09c5-4be9-94d7-2e309d56d9a0",
                    "title": "The reason is a rejected promise",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a rejected promise already-fulfilled",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e462b778-0ca1-4f35-a3a9-eab663aced2b",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a rejected promise immediately-fulfilled",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "24dd6d52-330d-4378-aa20-6b1dfd6078e8",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a rejected promise eventually-fulfilled",
                        "timedOut": false,
                        "duration": 56,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c2bff60e-6c6a-49b9-a3ae-3b579e234437",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a rejected promise already-rejected",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6667206e-8696-4286-9624-893bdc3e30a6",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a rejected promise immediately-rejected",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7e2546c5-a535-4f52-9b4e-e70b1b9e214a",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a rejected promise eventually-rejected",
                        "timedOut": false,
                        "duration": 55,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7e66712c-8c1d-4937-8adb-27434305d1e5",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "e462b778-0ca1-4f35-a3a9-eab663aced2b",
                      "24dd6d52-330d-4378-aa20-6b1dfd6078e8",
                      "c2bff60e-6c6a-49b9-a3ae-3b579e234437",
                      "6667206e-8696-4286-9624-893bdc3e30a6",
                      "7e2546c5-a535-4f52-9b4e-e70b1b9e214a",
                      "7e66712c-8c1d-4937-8adb-27434305d1e5"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 138,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "47a4a935-ba14-4636-8644-acc85fb61a8b",
                "title": "2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "250b8f18-115f-401c-853f-b506d2c12864",
                    "title": "`onFulfilled` is `undefined`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `undefined` already-fulfilled",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "bf7e071b-1032-417f-b73b-eb21c97e48da",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `undefined` immediately-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f0549cde-5f6b-4dcd-91e8-05d35b98bccb",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `undefined` eventually-fulfilled",
                        "timedOut": false,
                        "duration": 58,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a7b61f22-69f8-421c-9535-78734e89ccd4",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "bf7e071b-1032-417f-b73b-eb21c97e48da",
                      "f0549cde-5f6b-4dcd-91e8-05d35b98bccb",
                      "a7b61f22-69f8-421c-9535-78734e89ccd4"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 67,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "ad0d01f1-00d1-4d9a-be20-c0077f8f8cc0",
                    "title": "`onFulfilled` is `null`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `null` already-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8753da2a-77fd-4574-b8b9-141a6448823f",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `null` immediately-fulfilled",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9b006a6d-3a8d-49c9-ad78-c747ea1955e4",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `null` eventually-fulfilled",
                        "timedOut": false,
                        "duration": 58,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6ccbbafd-64ce-4bfa-9ca2-13477cf9950a",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "8753da2a-77fd-4574-b8b9-141a6448823f",
                      "9b006a6d-3a8d-49c9-ad78-c747ea1955e4",
                      "6ccbbafd-64ce-4bfa-9ca2-13477cf9950a"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 71,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "03518d47-90d9-497e-bd7a-45023ad11d15",
                    "title": "`onFulfilled` is `false`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `false` already-fulfilled",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "da93ddec-6533-43f0-aacc-84d795cf65f2",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `false` immediately-fulfilled",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "744d3569-d540-4b0b-8f14-9e0f3b87ccc6",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `false` eventually-fulfilled",
                        "timedOut": false,
                        "duration": 61,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8daa214e-68e6-4844-a9f2-66e85a7e5807",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "da93ddec-6533-43f0-aacc-84d795cf65f2",
                      "744d3569-d540-4b0b-8f14-9e0f3b87ccc6",
                      "8daa214e-68e6-4844-a9f2-66e85a7e5807"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 76,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "20925b66-3448-44ef-a711-7b9533c61016",
                    "title": "`onFulfilled` is `5`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `5` already-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1df9c0ad-2b99-4e1e-83da-9f4fa8a05d11",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `5` immediately-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f7be49a5-e144-4440-b1df-5ca05e6648b0",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `5` eventually-fulfilled",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b4dcff5e-922c-4b8e-b5f5-104a84e1a574",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "1df9c0ad-2b99-4e1e-83da-9f4fa8a05d11",
                      "f7be49a5-e144-4440-b1df-5ca05e6648b0",
                      "b4dcff5e-922c-4b8e-b5f5-104a84e1a574"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 69,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "fdc70cbe-5059-426f-b110-f96c681363f5",
                    "title": "`onFulfilled` is an object",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is an object already-fulfilled",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "98d8eac2-7bd7-49d4-b442-374807dadb10",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is an object immediately-fulfilled",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "12c37f8e-0a76-47b4-a840-6885f5bf5132",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is an object eventually-fulfilled",
                        "timedOut": false,
                        "duration": 58,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2bbdb783-d491-4d9d-8767-d0205324ecfc",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "98d8eac2-7bd7-49d4-b442-374807dadb10",
                      "12c37f8e-0a76-47b4-a840-6885f5bf5132",
                      "2bbdb783-d491-4d9d-8767-d0205324ecfc"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 69,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "ab2fde46-d500-4a2b-93bd-4072a6dd3968",
                    "title": "`onFulfilled` is an array containing a function",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is an array containing a function already-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0c0a3309-7356-4574-8265-45ea29d9d085",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is an array containing a function immediately-fulfilled",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a945673d-a4ef-4a4c-9b63-e97b3ef3d3c4",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is an array containing a function eventually-fulfilled",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "97cac8d0-1d1f-4b1e-a855-29a0866d2cf0",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "0c0a3309-7356-4574-8265-45ea29d9d085",
                      "a945673d-a4ef-4a4c-9b63-e97b3ef3d3c4",
                      "97cac8d0-1d1f-4b1e-a855-29a0866d2cf0"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 71,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "5f8ceb0f-463c-46e6-a15f-70b080e636ee",
                "title": "2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "2c6d3897-bf5e-4794-8b3d-d50a0f66b8e3",
                    "title": "`onRejected` is `undefined`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `undefined` already-rejected",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "654ac104-e64d-4b6b-96a4-660476fc46e1",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `undefined` immediately-rejected",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1ca74c64-3082-4871-8419-3d0926df5404",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `undefined` eventually-rejected",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "dd6e9c9e-bfdf-469f-8e8b-faee0bb47eb8",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "654ac104-e64d-4b6b-96a4-660476fc46e1",
                      "1ca74c64-3082-4871-8419-3d0926df5404",
                      "dd6e9c9e-bfdf-469f-8e8b-faee0bb47eb8"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 68,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "2bdd7ea2-ffc5-41aa-beee-93e74da7ac01",
                    "title": "`onRejected` is `null`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `null` already-rejected",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1c841f92-7047-4b23-9d97-ec88fc6a1f8c",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `null` immediately-rejected",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f528fbaf-836f-48cd-b712-233f73ec2df8",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `null` eventually-rejected",
                        "timedOut": false,
                        "duration": 58,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "50226283-5711-4a69-8641-d24e038f4b70",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "1c841f92-7047-4b23-9d97-ec88fc6a1f8c",
                      "f528fbaf-836f-48cd-b712-233f73ec2df8",
                      "50226283-5711-4a69-8641-d24e038f4b70"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 73,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "93c74238-5ce8-4ebd-b0a0-7189a32e3d9e",
                    "title": "`onRejected` is `false`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `false` already-rejected",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e099912d-8daa-4231-bc64-71242e36d4d6",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `false` immediately-rejected",
                        "timedOut": false,
                        "duration": 9,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "352e8637-6e1d-4167-8f5c-bca684f53d79",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `false` eventually-rejected",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6f0a1fda-eb03-402b-8cff-8d1668fae257",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "e099912d-8daa-4231-bc64-71242e36d4d6",
                      "352e8637-6e1d-4167-8f5c-bca684f53d79",
                      "6f0a1fda-eb03-402b-8cff-8d1668fae257"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 73,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "18763334-8d16-45c4-99a7-4b9efbdffe44",
                    "title": "`onRejected` is `5`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `5` already-rejected",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "079d9264-5260-4166-83ff-24f73b374a01",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `5` immediately-rejected",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b34813a8-114c-4e81-9dbd-2d1a7bd76d90",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `5` eventually-rejected",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c7ab8751-4e70-4c81-bda8-aeeba6cb4eeb",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "079d9264-5260-4166-83ff-24f73b374a01",
                      "b34813a8-114c-4e81-9dbd-2d1a7bd76d90",
                      "c7ab8751-4e70-4c81-bda8-aeeba6cb4eeb"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 71,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "0eb12c23-741f-498f-b2ea-5177ca05c438",
                    "title": "`onRejected` is an object",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is an object already-rejected",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8c57064c-7fd7-4e44-958d-dd3c17faf21a",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is an object immediately-rejected",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "132421f2-9987-4272-b713-3aefe3e742a1",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is an object eventually-rejected",
                        "timedOut": false,
                        "duration": 58,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d9263d98-bd1c-4608-a768-2093fcb057a6",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "8c57064c-7fd7-4e44-958d-dd3c17faf21a",
                      "132421f2-9987-4272-b713-3aefe3e742a1",
                      "d9263d98-bd1c-4608-a768-2093fcb057a6"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 69,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "7fbfcd12-4076-477b-abea-21544c611226",
                    "title": "`onRejected` is an array containing a function",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is an array containing a function already-rejected",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "126ab6e1-5207-4c77-b609-4a52ad6e0450",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is an array containing a function immediately-rejected",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0ce11578-20c6-4ed0-9ba0-d8b883c364ae",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is an array containing a function eventually-rejected",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6fac811d-5f39-44b4-bd55-8310320d52e1",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "126ab6e1-5207-4c77-b609-4a52ad6e0450",
                      "0ce11578-20c6-4ed0-9ba0-d8b883c364ae",
                      "6fac811d-5f39-44b4-bd55-8310320d52e1"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 71,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [
              "0590190e-b7ae-491d-a858-65382876fb62"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "80c0369b-96da-48d1-9fa7-3655a67446b4",
            "title": "2.3.1: If `promise` and `x` refer to the same object, reject `promise` with a `TypeError' as the reason.",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "via return from a fulfilled promise",
                "fullTitle": "Promises/A+ Tests 2.3.1: If `promise` and `x` refer to the same object, reject `promise` with a `TypeError' as the reason. via return from a fulfilled promise",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var promise = resolved(dummy).then(function () {\n    return promise;\n});\npromise.then(null, function (reason) {\n    assert(reason instanceof TypeError);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "bb11cc3e-8aed-4c5f-8239-445af3926724",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "via return from a rejected promise",
                "fullTitle": "Promises/A+ Tests 2.3.1: If `promise` and `x` refer to the same object, reject `promise` with a `TypeError' as the reason. via return from a rejected promise",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var promise = rejected(dummy).then(null, function () {\n    return promise;\n});\npromise.then(null, function (reason) {\n    assert(reason instanceof TypeError);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "bf5887c6-e710-4511-bb57-52428dda76ea",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bb11cc3e-8aed-4c5f-8239-445af3926724",
              "bf5887c6-e710-4511-bb57-52428dda76ea"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "d60d3f75-2ba6-4fba-bbd4-fa246a73f275",
            "title": "2.3.2: If `x` is a promise, adopt its state",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "9b439cc2-2bee-42dc-8f9b-6abf737facc9",
                "title": "2.3.2.1: If `x` is pending, `promise` must remain pending until `x` is fulfilled or rejected.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "via return from a fulfilled promise",
                    "fullTitle": "Promises/A+ Tests 2.3.2: If `x` is a promise, adopt its state 2.3.2.1: If `x` is pending, `promise` must remain pending until `x` is fulfilled or rejected. via return from a fulfilled promise",
                    "timedOut": false,
                    "duration": 101,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "08790f7d-af1d-4489-97d0-b33889a54ff1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "via return from a rejected promise",
                    "fullTitle": "Promises/A+ Tests 2.3.2: If `x` is a promise, adopt its state 2.3.2.1: If `x` is pending, `promise` must remain pending until `x` is fulfilled or rejected. via return from a rejected promise",
                    "timedOut": false,
                    "duration": 102,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8f60f160-2344-4d29-8b61-7863d35100eb",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "08790f7d-af1d-4489-97d0-b33889a54ff1",
                  "8f60f160-2344-4d29-8b61-7863d35100eb"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 203,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "02246f4a-9432-4542-9ba9-5f5e85643fcb",
                "title": "2.3.2.2: If/when `x` is fulfilled, fulfill `promise` with the same value.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "3fac93ca-3921-4b98-9f40-f10164ebf642",
                    "title": "`x` is already-fulfilled",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.2: If `x` is a promise, adopt its state 2.3.2.2: If/when `x` is fulfilled, fulfill `promise` with the same value. `x` is already-fulfilled via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b6e36f41-ac0d-4508-a719-f823ccf3db2f",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.2: If `x` is a promise, adopt its state 2.3.2.2: If/when `x` is fulfilled, fulfill `promise` with the same value. `x` is already-fulfilled via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "626653b7-b505-41c5-b17a-0e785be92da8",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "b6e36f41-ac0d-4508-a719-f823ccf3db2f",
                      "626653b7-b505-41c5-b17a-0e785be92da8"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 13,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "09a524bd-eefd-4fcf-bee4-9da1acce9db2",
                    "title": "`x` is eventually-fulfilled",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.2: If `x` is a promise, adopt its state 2.3.2.2: If/when `x` is fulfilled, fulfill `promise` with the same value. `x` is eventually-fulfilled via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 60,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ce0e3bbe-3ef9-429c-b921-635dfbfc3acb",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.2: If `x` is a promise, adopt its state 2.3.2.2: If/when `x` is fulfilled, fulfill `promise` with the same value. `x` is eventually-fulfilled via return from a rejected promise",
                        "timedOut": false,
                        "duration": 60,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "899014b1-d402-4434-959e-d14e1fb70292",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "ce0e3bbe-3ef9-429c-b921-635dfbfc3acb",
                      "899014b1-d402-4434-959e-d14e1fb70292"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 120,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "11a6db97-4064-4ab6-9ea6-5478cfc14de2",
                "title": "2.3.2.3: If/when `x` is rejected, reject `promise` with the same reason.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "2ca3c3f4-d9d6-4d1d-a363-a17fd88a964a",
                    "title": "`x` is already-rejected",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.2: If `x` is a promise, adopt its state 2.3.2.3: If/when `x` is rejected, reject `promise` with the same reason. `x` is already-rejected via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1dab81d3-db8e-4b1f-8452-eb599ba6ab46",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.2: If `x` is a promise, adopt its state 2.3.2.3: If/when `x` is rejected, reject `promise` with the same reason. `x` is already-rejected via return from a rejected promise",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c8c040c6-1478-4181-9563-60f5d5f84e3c",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "1dab81d3-db8e-4b1f-8452-eb599ba6ab46",
                      "c8c040c6-1478-4181-9563-60f5d5f84e3c"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 15,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "001c88a9-b827-42e0-960f-4173eb81e223",
                    "title": "`x` is eventually-rejected",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.2: If `x` is a promise, adopt its state 2.3.2.3: If/when `x` is rejected, reject `promise` with the same reason. `x` is eventually-rejected via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5455fa69-7c4e-48a2-ae26-a42a95bd280a",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.2: If `x` is a promise, adopt its state 2.3.2.3: If/when `x` is rejected, reject `promise` with the same reason. `x` is eventually-rejected via return from a rejected promise",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7c9b0d11-81ec-4c73-841a-892d9a0e7cb1",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "5455fa69-7c4e-48a2-ae26-a42a95bd280a",
                      "7c9b0d11-81ec-4c73-841a-892d9a0e7cb1"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 118,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "e014d1af-e21a-4134-a7ac-a1dce0c006c7",
            "title": "2.3.3: Otherwise, if `x` is an object or function,",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "979a199c-c4ff-4e91-9875-7d9588a7fdda",
                "title": "2.3.3.1: Let `then` be `x.then`",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "efddc1f1-c5b6-4312-8b48-80141a56d9f5",
                    "title": "`x` is an object with null prototype",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [
                      {
                        "title": "\"before each\" hook",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is an object with null prototype \"before each\" hook",
                        "timedOut": false,
                        "duration": 0,
                        "pass": false,
                        "fail": false,
                        "pending": false,
                        "code": "numberOfTimesThenWasRetrieved = 0;",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f73871c7-ea39-41a2-814d-888c0f7e2b20",
                        "isHook": true,
                        "skipped": false
                      }
                    ],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is an object with null prototype via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "81df5f8c-601a-4dda-a426-8c6c72d6da73",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is an object with null prototype via return from a rejected promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "76529566-9eb8-470a-8d38-715ee9edc338",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "81df5f8c-601a-4dda-a426-8c6c72d6da73",
                      "76529566-9eb8-470a-8d38-715ee9edc338"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 9,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "23351ce9-ad81-457b-8cd2-5df7adf8f877",
                    "title": "`x` is an object with normal Object.prototype",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [
                      {
                        "title": "\"before each\" hook",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is an object with normal Object.prototype \"before each\" hook",
                        "timedOut": false,
                        "duration": 0,
                        "pass": false,
                        "fail": false,
                        "pending": false,
                        "code": "numberOfTimesThenWasRetrieved = 0;",
                        "err": {},
                        "isRoot": false,
                        "uuid": "907a4358-34a6-408e-b8b3-815d62099943",
                        "isHook": true,
                        "skipped": false
                      }
                    ],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is an object with normal Object.prototype via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "03a557e0-1501-4843-9f55-b664990697d8",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is an object with normal Object.prototype via return from a rejected promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a3ded7e8-d3c7-45ea-9761-77a26c601b2c",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "03a557e0-1501-4843-9f55-b664990697d8",
                      "a3ded7e8-d3c7-45ea-9761-77a26c601b2c"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 9,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "39f0fd62-0687-4eca-a0e5-783b04966d6a",
                    "title": "`x` is a function",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [
                      {
                        "title": "\"before each\" hook",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is a function \"before each\" hook",
                        "timedOut": false,
                        "duration": 0,
                        "pass": false,
                        "fail": false,
                        "pending": false,
                        "code": "numberOfTimesThenWasRetrieved = 0;",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2b71bcab-2f6a-4cde-9da6-8d620eaecaca",
                        "isHook": true,
                        "skipped": false
                      }
                    ],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is a function via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9bc6fbff-5a34-4cbd-bcd6-7db3129c97c2",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is a function via return from a rejected promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c0aa1b3f-6c02-4802-ac30-0941a80c2d17",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "9bc6fbff-5a34-4cbd-bcd6-7db3129c97c2",
                      "c0aa1b3f-6c02-4802-ac30-0941a80c2d17"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 10,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "e92af607-600e-46f0-8d28-cfee0c57be8a",
                "title": "2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "3743325c-bbba-4889-92f3-7f08ddd774fc",
                    "title": "`e` is `undefined`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is `undefined` via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b1d051d8-850d-48ae-9e22-368041214195",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is `undefined` via return from a rejected promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6041a4ee-058b-42d8-a7fe-8c37bb43d8e9",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "b1d051d8-850d-48ae-9e22-368041214195",
                      "6041a4ee-058b-42d8-a7fe-8c37bb43d8e9"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 10,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "74fa8743-a851-4125-a64c-b9cddbbdaab2",
                    "title": "`e` is `null`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is `null` via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e021380d-1939-43fa-a197-d39754f1a1ec",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is `null` via return from a rejected promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9390f073-39ea-4862-b96a-770a8932958f",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "e021380d-1939-43fa-a197-d39754f1a1ec",
                      "9390f073-39ea-4862-b96a-770a8932958f"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 10,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "88fddd12-1cd0-4ff2-8b1c-373636e23e77",
                    "title": "`e` is `false`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is `false` via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "bace0731-4f2b-4041-8d62-12f6bf36f1b0",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is `false` via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2560774d-69fd-44ba-8603-00616a412d5c",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "bace0731-4f2b-4041-8d62-12f6bf36f1b0",
                      "2560774d-69fd-44ba-8603-00616a412d5c"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 11,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "021e11bf-812e-4a30-bbb1-386cb9070caf",
                    "title": "`e` is `0`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is `0` via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8983b12b-9c08-4bcb-bb82-6b60f717313d",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is `0` via return from a rejected promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5e15f55d-562b-4e06-94b6-40a345663917",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "8983b12b-9c08-4bcb-bb82-6b60f717313d",
                      "5e15f55d-562b-4e06-94b6-40a345663917"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 10,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "27ef3ded-23ea-45fb-af15-c859ec9d5e49",
                    "title": "`e` is an error",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is an error via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a4f8eb6d-79b4-4e46-96c0-7eeea14b0002",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is an error via return from a rejected promise",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7b7ee191-4f17-4cac-b92b-abb6c68ad82a",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "a4f8eb6d-79b4-4e46-96c0-7eeea14b0002",
                      "7b7ee191-4f17-4cac-b92b-abb6c68ad82a"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 9,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "c4f6a9cc-9c01-42b4-a712-cd49ba80b54b",
                    "title": "`e` is an error without a stack",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is an error without a stack via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3b750dbe-bf47-4c5e-8a76-34f32dd38cef",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is an error without a stack via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "224c9394-f285-4f42-8b05-9387e8635cc2",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "3b750dbe-bf47-4c5e-8a76-34f32dd38cef",
                      "224c9394-f285-4f42-8b05-9387e8635cc2"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 11,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "97074081-a16a-4218-9e3b-f8349c6d1391",
                    "title": "`e` is a date",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is a date via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ce4f42ad-9ed8-4640-89da-8df3ce468816",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is a date via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ce860150-c81b-4d37-9fed-398fe1a7ed0b",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "ce4f42ad-9ed8-4640-89da-8df3ce468816",
                      "ce860150-c81b-4d37-9fed-398fe1a7ed0b"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 12,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "84bc7df5-238a-429a-abc9-60e2ea1d1c70",
                    "title": "`e` is an object",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is an object via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c50e4217-85ca-4924-a424-064e8756fbc5",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is an object via return from a rejected promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "fbf219a5-8ee9-490f-a346-22f307c4cee0",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "c50e4217-85ca-4924-a424-064e8756fbc5",
                      "fbf219a5-8ee9-490f-a346-22f307c4cee0"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 11,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "347afe08-95bf-4f83-ae0e-4cab8fddd346",
                    "title": "`e` is an always-pending thenable",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is an always-pending thenable via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ce1fbc7d-1901-46f5-9312-b19faf693f76",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is an always-pending thenable via return from a rejected promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "cf12e796-00df-4a79-aaa5-d227e186355b",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "ce1fbc7d-1901-46f5-9312-b19faf693f76",
                      "cf12e796-00df-4a79-aaa5-d227e186355b"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 9,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "e3773a4a-2fb1-4371-957c-19af1dba6b44",
                    "title": "`e` is a fulfilled promise",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is a fulfilled promise via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9725256e-762a-42fc-9d23-72f7f1be8624",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is a fulfilled promise via return from a rejected promise",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4ab37f06-292d-409a-acee-9a8357458d94",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "9725256e-762a-42fc-9d23-72f7f1be8624",
                      "4ab37f06-292d-409a-acee-9a8357458d94"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 10,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "64bfc1f8-ab90-46e1-9174-98e467e67473",
                    "title": "`e` is a rejected promise",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is a rejected promise via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f3ad9f80-bf78-4ab0-92f5-b9d75aae802a",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is a rejected promise via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2d6d9096-30ed-460b-93f8-d9e02875b752",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "f3ad9f80-bf78-4ab0-92f5-b9d75aae802a",
                      "2d6d9096-30ed-460b-93f8-d9e02875b752"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 12,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "1e99ea3d-99b5-4b13-8596-2eec183b620e",
                "title": "2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise`",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "c90660d1-4779-466a-89f5-1a426fe26519",
                    "title": "Calls with `x` as `this` and two function arguments",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` Calls with `x` as `this` and two function arguments via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4449c775-41ae-4d1a-a12f-5ad8367ca6a6",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` Calls with `x` as `this` and two function arguments via return from a rejected promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8280ccdb-70d1-405b-b886-872af6a30764",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "4449c775-41ae-4d1a-a12f-5ad8367ca6a6",
                      "8280ccdb-70d1-405b-b886-872af6a30764"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 11,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "86992980-36f8-41e1-a46d-c83c06cdc68f",
                    "title": "Uses the original value of `then`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [
                      {
                        "title": "\"before each\" hook",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` Uses the original value of `then` \"before each\" hook",
                        "timedOut": false,
                        "duration": 0,
                        "pass": false,
                        "fail": false,
                        "pending": false,
                        "code": "numberOfTimesThenWasRetrieved = 0;",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4d974a1b-3e4c-4358-9ea7-97424c7613b2",
                        "isHook": true,
                        "skipped": false
                      }
                    ],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` Uses the original value of `then` via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9ef8f947-02b2-4f2d-93ad-75c18fc5b13f",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` Uses the original value of `then` via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "cf5de857-1784-4270-b87c-750b67804519",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "9ef8f947-02b2-4f2d-93ad-75c18fc5b13f",
                      "cf5de857-1784-4270-b87c-750b67804519"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 12,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "d31f6461-6ea9-44a5-9e65-db19c05d2342",
                    "title": "2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                      {
                        "uuid": "d93fba6d-2721-4103-8fc7-f96f2ce2fd80",
                        "title": "`y` is not a thenable",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "84ed2078-d002-47fe-8bbc-ebaafd69780d",
                            "title": "`y` is `undefined`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "e203880e-33e0-4f8e-ac08-01f483eafa9f",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `undefined` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "94aa5a8f-a78f-4527-b095-9881e8775541",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `undefined` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5b792023-bc51-4058-9aef-193ddeec1bbb",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "94aa5a8f-a78f-4527-b095-9881e8775541",
                                  "5b792023-bc51-4058-9aef-193ddeec1bbb"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "845fc65f-0513-4fb3-9952-cc62d6ebb7fd",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `undefined` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b7db8745-5d10-47e2-92ea-c33b3df28aa2",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `undefined` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b709f045-a23d-40e1-b12a-e84fb664a5c2",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "b7db8745-5d10-47e2-92ea-c33b3df28aa2",
                                  "b709f045-a23d-40e1-b12a-e84fb664a5c2"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "dbb90c2e-b2e4-43b4-80a7-f2e5c4f55954",
                            "title": "`y` is `null`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "5fa53c8b-ddb5-4686-b3c2-48120f51139e",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `null` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "bd6d7852-6d3f-46bb-bc16-8a11e70be5b8",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `null` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5a5b1aa7-51fa-4f0d-a3cb-f3257252e801",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "bd6d7852-6d3f-46bb-bc16-8a11e70be5b8",
                                  "5a5b1aa7-51fa-4f0d-a3cb-f3257252e801"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 9,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "c5e0ef31-ed6d-4dbf-a1ba-17928d5fe9e2",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `null` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e33340ad-3a32-4748-9e3b-e3b8dd813127",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `null` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "607d67fc-790b-4d29-87d8-0a66ce81672e",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "e33340ad-3a32-4748-9e3b-e3b8dd813127",
                                  "607d67fc-790b-4d29-87d8-0a66ce81672e"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "3556ecfa-c81e-4769-bfd9-5f6534d4b667",
                            "title": "`y` is `false`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "f56e4c2f-ec07-4c80-9993-35b13dc3710c",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `false` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0f03c1b5-34ea-42a4-a90e-79139ee9a47d",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `false` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "60c8742c-3f41-40e6-89f2-111fcfa2e5c1",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "0f03c1b5-34ea-42a4-a90e-79139ee9a47d",
                                  "60c8742c-3f41-40e6-89f2-111fcfa2e5c1"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "e182309a-424f-4221-b575-06a3891bd875",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `false` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "bc8bc4f8-a130-4e7a-a028-4583a9e16ec6",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `false` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4fd9d89e-3f76-412f-8c64-0e29ed70e6b7",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "bc8bc4f8-a130-4e7a-a028-4583a9e16ec6",
                                  "4fd9d89e-3f76-412f-8c64-0e29ed70e6b7"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "a4b39b32-ef0c-4dd4-85c1-ebe15d1711b4",
                            "title": "`y` is `5`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "497c9550-0502-4ca4-b0c4-c652784275b6",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `5` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e6943881-5027-4096-b11f-57a473de937d",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `5` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "bb174775-4767-48c6-9c26-0a7f961d038e",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "e6943881-5027-4096-b11f-57a473de937d",
                                  "bb174775-4767-48c6-9c26-0a7f961d038e"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "7777997a-0d13-48e4-91ce-3559c173c0f2",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `5` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a3502c58-1fd9-4dfb-a567-14020a2e88f1",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `5` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "bbd8623a-5f1d-4a7c-9552-ccea0cbad46b",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "a3502c58-1fd9-4dfb-a567-14020a2e88f1",
                                  "bbd8623a-5f1d-4a7c-9552-ccea0cbad46b"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "6d609308-3991-45e6-ac87-116c016929b8",
                            "title": "`y` is an object",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "f60e9c20-3e8a-4971-bd6d-bd08a646c456",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is an object `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c26d92e0-3819-4a73-ad51-2ed6a5329bc6",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is an object `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c51759bc-498a-4a7f-87ac-c3b28ea5a0af",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "c26d92e0-3819-4a73-ad51-2ed6a5329bc6",
                                  "c51759bc-498a-4a7f-87ac-c3b28ea5a0af"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "317796aa-7a93-4566-969d-0e7b10e1426f",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is an object `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f1ecabb3-0393-4d90-92f8-3cc3e7f63a05",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is an object `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8a67da54-7823-4b08-9c16-3ce72edfb766",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "f1ecabb3-0393-4d90-92f8-3cc3e7f63a05",
                                  "8a67da54-7823-4b08-9c16-3ce72edfb766"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "c6c6aeee-8e79-4663-8edc-5ddfc2da000b",
                            "title": "`y` is an array",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "9f421187-a9ca-4a8b-a249-292000be215e",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is an array `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "caa58a47-20cd-47a1-a69e-14626b8cd717",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is an array `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e4899bae-30a0-4f61-81b4-73db39c9db91",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "caa58a47-20cd-47a1-a69e-14626b8cd717",
                                  "e4899bae-30a0-4f61-81b4-73db39c9db91"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "3c8a3323-35ec-4ce4-92bd-567d2930d5c1",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is an array `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3b5b6fd1-1645-49e6-b9f2-b121911881ae",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is an array `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5c6a9d5a-79ad-485d-a23a-2c09309a210d",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "3b5b6fd1-1645-49e6-b9f2-b121911881ae",
                                  "5c6a9d5a-79ad-485d-a23a-2c09309a210d"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "265ba165-8fd1-48ae-887a-571ffa12bc6e",
                        "title": "`y` is a thenable",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "615dba85-1de2-491c-a11d-dc10b023dd03",
                            "title": "`y` is a synchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "6ddbec35-0935-4c8d-8258-924f762b8b48",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3dcadc02-164a-43ca-b7df-e28409247873",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4b9f56f1-e43c-405d-afd0-52cfe1c169dd",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "3dcadc02-164a-43ca-b7df-e28409247873",
                                  "4b9f56f1-e43c-405d-afd0-52cfe1c169dd"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 10,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "4d4c0fbd-41dc-4aa2-99f3-73557aadf710",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4378ea4b-0624-479c-af7b-059649947791",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a2a23f61-f86a-4e35-b8f4-a20012c0f07f",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "4378ea4b-0624-479c-af7b-059649947791",
                                  "a2a23f61-f86a-4e35-b8f4-a20012c0f07f"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "4a23d6d3-2fe0-4583-873b-5b9e44ce1a0c",
                            "title": "`y` is an asynchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "94465235-f60d-48de-be2a-37a03b8dc3ac",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "389de8a2-2a1d-43cb-8949-54cec96e62e8",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "58502058-a022-4eca-891f-801401e3b03b",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "389de8a2-2a1d-43cb-8949-54cec96e62e8",
                                  "58502058-a022-4eca-891f-801401e3b03b"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "3d25b7a3-939d-42e4-a6b5-0a78711972f5",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6ce5e4fc-b769-4ed1-9692-8064854aea58",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "10d714c0-81f4-4211-ac56-f79dc77e32ff",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "6ce5e4fc-b769-4ed1-9692-8064854aea58",
                                  "10d714c0-81f4-4211-ac56-f79dc77e32ff"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "bbb94b36-758d-4877-80c8-ef5f3008276b",
                            "title": "`y` is a synchronously-fulfilled one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "8f76f887-31d6-4d36-8544-aad34755ed58",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "33195013-02a6-4caa-88ce-354c9063c436",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "df625582-757f-41a7-809c-0c25e794ee24",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "33195013-02a6-4caa-88ce-354c9063c436",
                                  "df625582-757f-41a7-809c-0c25e794ee24"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 10,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "7213c197-2bd1-443a-9115-5e0fb305623e",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d3bf8f53-791f-4a31-bfc9-b7fbbb8206e4",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8302869b-f94d-413a-b06b-e57130cab07d",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "d3bf8f53-791f-4a31-bfc9-b7fbbb8206e4",
                                  "8302869b-f94d-413a-b06b-e57130cab07d"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "50f83d8f-a168-4cf4-9231-f1c01eb4f339",
                            "title": "`y` is a thenable that tries to fulfill twice",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "1537fa73-40f2-4be4-84d8-19b7e48edff4",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ddec1224-bd8c-41bf-be87-4509482899c4",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9278870b-32f5-43a7-9ef1-962ae064eb59",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ddec1224-bd8c-41bf-be87-4509482899c4",
                                  "9278870b-32f5-43a7-9ef1-962ae064eb59"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 10,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "d220136e-b280-4592-acb7-cef1db32a256",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5263d302-69c8-46e9-aa5d-dd47938009dc",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "169e8294-7bbc-46c7-84e7-6079478792f2",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "5263d302-69c8-46e9-aa5d-dd47938009dc",
                                  "169e8294-7bbc-46c7-84e7-6079478792f2"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "d3411d9c-5769-4dae-a8c8-d85d8f6a69ea",
                            "title": "`y` is a thenable that fulfills but then throws",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "96e35c5f-8657-42e6-80b4-e6e06b61c28a",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9f6f7375-44a4-4eca-8aad-f420a10624a9",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ec91b691-a209-4a21-b091-e3cfcb1f6156",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "9f6f7375-44a4-4eca-8aad-f420a10624a9",
                                  "ec91b691-a209-4a21-b091-e3cfcb1f6156"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "e62a9cd1-5397-41e5-b16f-44ea76f73d90",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "43418d70-e402-456d-89d0-69ed603bb216",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9646eaf3-aae2-4d91-87e3-a0d9e6c2aa3c",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "43418d70-e402-456d-89d0-69ed603bb216",
                                  "9646eaf3-aae2-4d91-87e3-a0d9e6c2aa3c"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "5ff759af-b702-40b7-9e5c-ef7699fbda8c",
                            "title": "`y` is an already-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "01b0736f-7af8-4b42-a1a5-839af73b87f0",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2a8f7ba4-80eb-4fde-aee0-7adef54c5bc9",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "716ae27d-e814-43ce-ae3e-bb0cb50b7c9f",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "2a8f7ba4-80eb-4fde-aee0-7adef54c5bc9",
                                  "716ae27d-e814-43ce-ae3e-bb0cb50b7c9f"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "bf85aac7-10bb-43b0-8435-e547d1677288",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "feafd75f-476b-41a6-b207-39741bd08d88",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0fa5af88-6bdd-443e-ad90-6a448e4101cd",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "feafd75f-476b-41a6-b207-39741bd08d88",
                                  "0fa5af88-6bdd-443e-ad90-6a448e4101cd"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "9db6f93f-526f-4741-b01f-6721af81c85f",
                            "title": "`y` is an eventually-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "428a507c-ab05-4681-8281-716a53a7f035",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2e8a7217-64cf-4fa6-b64f-2e356f5c2061",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ca60cef4-4531-4286-bb11-eae872c6f0f4",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "2e8a7217-64cf-4fa6-b64f-2e356f5c2061",
                                  "ca60cef4-4531-4286-bb11-eae872c6f0f4"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 119,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "8b283deb-a139-4727-bcb9-58f562551b38",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4fe1bdc1-b715-4f93-937f-c7bd1116a4c2",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 64,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "92030ad4-c211-435d-a410-1d02e22a0536",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "4fe1bdc1-b715-4f93-937f-c7bd1116a4c2",
                                  "92030ad4-c211-435d-a410-1d02e22a0536"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 126,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "3e9c4d2a-0028-43cb-a6a9-1df54d2333bc",
                            "title": "`y` is a synchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "f931c21b-2b1c-49de-b8e1-b2f949f76800",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5d1bebc7-94bf-4af9-9347-cff332c09c27",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "366656ef-d444-4799-95ec-5b4a1896bcf3",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "5d1bebc7-94bf-4af9-9347-cff332c09c27",
                                  "366656ef-d444-4799-95ec-5b4a1896bcf3"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "e7eef20e-1631-4816-a799-06859285601b",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a0648450-9f2f-44ff-8819-dc7d45d2e53c",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c06bb758-83cf-45fa-8e45-83314d6260c4",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "a0648450-9f2f-44ff-8819-dc7d45d2e53c",
                                  "c06bb758-83cf-45fa-8e45-83314d6260c4"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "29252b32-27dd-4221-8871-dfa10bd05306",
                            "title": "`y` is an asynchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "01f73ab3-f392-4a57-99ab-e5273fab73d4",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b9769f0e-d474-4fe8-b430-5c2c4381e4f6",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e0dfcdd9-5c84-4323-9220-57624b0d4708",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "b9769f0e-d474-4fe8-b430-5c2c4381e4f6",
                                  "e0dfcdd9-5c84-4323-9220-57624b0d4708"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "4e9aa6a6-0cdf-4989-8c13-97a9496bed03",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "fcace5ea-b51d-40b3-866b-b26adb5cae0a",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2d90ed8d-1ef3-4feb-8b04-16c441c8c61a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "fcace5ea-b51d-40b3-866b-b26adb5cae0a",
                                  "2d90ed8d-1ef3-4feb-8b04-16c441c8c61a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "81c885e1-c773-4dbc-a073-7f61a68d915e",
                            "title": "`y` is a synchronously-rejected one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "02dec35c-a370-4282-a3ee-79e7290b0230",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "bef0bd16-7879-477c-aed4-5e48fb9c7b56",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b8c4025b-a9a8-48fa-91e0-c5747ad2f99c",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "bef0bd16-7879-477c-aed4-5e48fb9c7b56",
                                  "b8c4025b-a9a8-48fa-91e0-c5747ad2f99c"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 10,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "9c6b68e6-6881-4f49-be54-1f1f0e5a30c8",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c8642578-bd5a-4f48-be06-686693a552c7",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8f31e286-804d-4b87-a859-e9d49aa1ff01",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "c8642578-bd5a-4f48-be06-686693a552c7",
                                  "8f31e286-804d-4b87-a859-e9d49aa1ff01"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "c721363b-7032-414e-9048-91c9d41b5caf",
                            "title": "`y` is a thenable that immediately throws in `then`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "5ee8a90a-9bc5-4794-9b14-746b73e86f2c",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "08a3b508-dcb5-4796-86c9-9c51b576c951",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "436b4a63-25ab-4078-98bb-b613e7f398f1",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "08a3b508-dcb5-4796-86c9-9c51b576c951",
                                  "436b4a63-25ab-4078-98bb-b613e7f398f1"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "20019226-2e27-4211-89e2-75a9948a2e01",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0aaf8953-f74a-428d-bc22-bf247af65ad4",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a4c93699-b07a-4b17-8fb6-45c9bfdfa4c4",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "0aaf8953-f74a-428d-bc22-bf247af65ad4",
                                  "a4c93699-b07a-4b17-8fb6-45c9bfdfa4c4"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "19606db3-9464-43f2-bcd5-d9940c9b230f",
                            "title": "`y` is an object with a throwing `then` accessor",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "73dd0ee9-bfe6-47fd-9598-5ab3c731bec6",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "dc4a62a9-f791-495e-8d33-52c09f56c394",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1a57ecac-9989-423f-9f43-4c99c9049da1",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "dc4a62a9-f791-495e-8d33-52c09f56c394",
                                  "1a57ecac-9989-423f-9f43-4c99c9049da1"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 8,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "aea7ed93-7a11-40cd-aaa1-8c264f955532",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "29ca67fc-9a38-47a6-b5a9-1833f236bb4c",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "607a93a7-92d9-401f-9e34-804ef2214393",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "29ca67fc-9a38-47a6-b5a9-1833f236bb4c",
                                  "607a93a7-92d9-401f-9e34-804ef2214393"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "b6349258-0e69-46a6-8be9-91944de7bee8",
                            "title": "`y` is an already-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "82de2ebf-2564-43dc-8385-b48cb8b24bc6",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an already-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d7868b1b-d3ef-4b98-877e-422533246b7a",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an already-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "49ce6a94-7be2-450d-8ec5-e0df58abff99",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "d7868b1b-d3ef-4b98-877e-422533246b7a",
                                  "49ce6a94-7be2-450d-8ec5-e0df58abff99"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "510c940f-17ba-4377-a1d4-8d6df74c4a7d",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8e6c37de-257d-47e4-9ba4-a68a80296f3d",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e3b2e65a-ec23-4a01-a9bc-f1b3ce69a82e",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "8e6c37de-257d-47e4-9ba4-a68a80296f3d",
                                  "e3b2e65a-ec23-4a01-a9bc-f1b3ce69a82e"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "4f9e181a-e574-4fcf-b3f9-fee74b45d848",
                            "title": "`y` is an eventually-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "2b825fe0-d116-4e8f-82b3-853b77449611",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 58,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "680e4728-4be1-4f01-8d53-aeaf881f7668",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e6ffdee0-6321-4094-a9bc-54b073ab169b",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "680e4728-4be1-4f01-8d53-aeaf881f7668",
                                  "e6ffdee0-6321-4094-a9bc-54b073ab169b"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 118,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "164f1407-7710-493b-ab4e-97dceccf80a1",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ea6bbc97-1d40-4de2-82fe-768f673b54e1",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "53d4004c-a16f-465f-add6-07900c700f8c",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ea6bbc97-1d40-4de2-82fe-768f673b54e1",
                                  "53d4004c-a16f-465f-add6-07900c700f8c"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 124,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "d9e027dc-029c-476c-8345-44c9c44459ee",
                        "title": "`y` is a thenable for a thenable",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "c711e9ab-0039-4d14-8b0c-e22cf75bdc23",
                            "title": "`y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "4d7e4951-69a7-4b66-9675-41833692ebcf",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "bdb19bf9-53eb-4c6e-9f32-8eff6c5a26a0",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f4cf5e7a-b7dd-416d-8999-2091b275b498",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "bdb19bf9-53eb-4c6e-9f32-8eff6c5a26a0",
                                  "f4cf5e7a-b7dd-416d-8999-2091b275b498"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 9,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "478a1b55-aacf-40a4-9ce2-d12de0bf82af",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4c8a417b-59c0-4893-983c-8068bc4361df",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "aff6a1e0-c77f-48fa-aa17-350f54db5772",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "4c8a417b-59c0-4893-983c-8068bc4361df",
                                  "aff6a1e0-c77f-48fa-aa17-350f54db5772"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "37be5d50-0b2c-4722-885b-e0e75eea4bfb",
                            "title": "`y` is a synchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "caf292f9-8754-4759-8d73-889a6226fd46",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f878a669-4897-4015-9c06-1caee60b4c55",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f101964f-a7c6-48ad-bb1a-9b8e770f2524",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "f878a669-4897-4015-9c06-1caee60b4c55",
                                  "f101964f-a7c6-48ad-bb1a-9b8e770f2524"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "eb481b41-1ffd-4416-ad09-92a7b1af0997",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a4ffc210-39df-4e66-aa15-7377adb4d894",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "56a6ba03-00de-4680-8122-877d773bfadd",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "a4ffc210-39df-4e66-aa15-7377adb4d894",
                                  "56a6ba03-00de-4680-8122-877d773bfadd"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "5760735e-b70e-47bc-be0d-695ba6952ba6",
                            "title": "`y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "852edc5d-b53c-4f22-bbe3-85e2f6c64667",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "fea5310a-ab1c-4af4-8f65-501f8304342f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0dfd5151-88d6-4434-8808-59a3c2638693",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "fea5310a-ab1c-4af4-8f65-501f8304342f",
                                  "0dfd5151-88d6-4434-8808-59a3c2638693"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 9,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "dcf76e94-47a3-47a4-93f0-405fd2174840",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f9d3b5b0-b77e-4be1-8307-c043a6baa134",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8b122d2b-594b-4688-9b20-16d574cbfbc8",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "f9d3b5b0-b77e-4be1-8307-c043a6baa134",
                                  "8b122d2b-594b-4688-9b20-16d574cbfbc8"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "1e887a2e-9d0a-4af9-833d-ec3ed90bb3f6",
                            "title": "`y` is a synchronously-fulfilled custom thenable for a thenable that tries to fulfill twice",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "e9d8cdf3-c320-4df5-82e9-6681854cb110",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ac90e577-563d-41ff-9456-5a77794d5ee7",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b845d2ab-e8be-4d98-8234-ccfd8c3f27fd",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ac90e577-563d-41ff-9456-5a77794d5ee7",
                                  "b845d2ab-e8be-4d98-8234-ccfd8c3f27fd"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "d5509336-5039-4964-aace-0c32b7dfc159",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "59b491f8-c87c-4213-a37b-8ebb54540a59",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "88d6c23a-be3c-45f2-81f1-4fdeff5d98af",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "59b491f8-c87c-4213-a37b-8ebb54540a59",
                                  "88d6c23a-be3c-45f2-81f1-4fdeff5d98af"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "89e8b277-581c-4778-907a-7aaecf2cba70",
                            "title": "`y` is a synchronously-fulfilled custom thenable for a thenable that fulfills but then throws",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "a2d71ffc-0764-4537-bc34-801c3bc4e19f",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "67f7901a-e89f-4844-8635-557f06056c15",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9ec2aad7-1958-479b-8214-a1f661e2fa87",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "67f7901a-e89f-4844-8635-557f06056c15",
                                  "9ec2aad7-1958-479b-8214-a1f661e2fa87"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "5dadee60-0dd4-47d8-97ce-33adb3b37ec6",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3586c940-5297-4b32-8be8-2cc52b3e85c4",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "27aa6589-6878-4aaa-8d5e-ffa7a32052fd",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "3586c940-5297-4b32-8be8-2cc52b3e85c4",
                                  "27aa6589-6878-4aaa-8d5e-ffa7a32052fd"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "308619de-0aea-40c0-9edf-454c3c96aa6a",
                            "title": "`y` is a synchronously-fulfilled custom thenable for an already-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "a6c0c677-9e42-447b-b6a2-70a0637500e4",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "bd65e58f-14de-4de1-86a2-e5820639758a",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "bd2be1fa-daf8-4e58-8d20-804befe95dce",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "bd65e58f-14de-4de1-86a2-e5820639758a",
                                  "bd2be1fa-daf8-4e58-8d20-804befe95dce"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "2942e1b7-7d6b-4c75-a4c2-2738f2350a2d",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1f7554b6-6949-40db-9e88-5834894d3fd9",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "af461b66-9a59-44c8-b5a9-62c9c8e0edef",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "1f7554b6-6949-40db-9e88-5834894d3fd9",
                                  "af461b66-9a59-44c8-b5a9-62c9c8e0edef"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "9ad65045-aa12-4f0c-8251-c74a02c5520c",
                            "title": "`y` is a synchronously-fulfilled custom thenable for an eventually-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "a1140c2b-a1ca-48da-876e-9277358f84f4",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e3f6b78f-47a2-4fa2-a208-b53062d325fc",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "50beec8d-0bea-48dc-b241-e120c184c120",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "e3f6b78f-47a2-4fa2-a208-b53062d325fc",
                                  "50beec8d-0bea-48dc-b241-e120c184c120"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 119,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "a52aa887-7cb6-4e10-9e6d-5bca379d4be0",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "fbf16b20-3ddf-4d0f-8622-7d14e637f11f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "75344c21-bcf1-4aaf-8b98-abb19ff33bd4",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "fbf16b20-3ddf-4d0f-8622-7d14e637f11f",
                                  "75344c21-bcf1-4aaf-8b98-abb19ff33bd4"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 120,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "e5c5ea22-5356-44ca-a637-8b32de847261",
                            "title": "`y` is a synchronously-fulfilled custom thenable for a synchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "7d6783d2-df4c-4510-8dfa-0dc1b9dec9c7",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "252342ab-2c00-4c66-a93d-f57835d16889",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "862338a7-66c5-4f9d-a888-cda8a44d26e3",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "252342ab-2c00-4c66-a93d-f57835d16889",
                                  "862338a7-66c5-4f9d-a888-cda8a44d26e3"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 10,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "1fdfd253-f8df-44b7-bb1b-8d30c042b4a2",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "fa0c226d-5e86-4144-b9a4-f0bf5ddbaaf5",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f6b09c03-3398-46af-a9b2-453f06987c9f",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "fa0c226d-5e86-4144-b9a4-f0bf5ddbaaf5",
                                  "f6b09c03-3398-46af-a9b2-453f06987c9f"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "af664e62-692f-40a6-8722-744f7df4610c",
                            "title": "`y` is a synchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "774d06a8-7da6-4c33-901d-68a62115e83a",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8db16420-962b-441e-b748-95ff1c2686d8",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b72a612e-0507-46b7-b62a-e1021d458531",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "8db16420-962b-441e-b748-95ff1c2686d8",
                                  "b72a612e-0507-46b7-b62a-e1021d458531"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "6e9af479-eb04-4cd2-ac8a-ae2a2e581d04",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "934abb4e-0416-4904-b591-93e748372be5",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0706f253-cf6b-4ab5-9c43-4e67ad776f4b",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "934abb4e-0416-4904-b591-93e748372be5",
                                  "0706f253-cf6b-4ab5-9c43-4e67ad776f4b"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "5ef68e2c-3cca-43a9-bb6f-20dae7242abb",
                            "title": "`y` is a synchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "2f751f50-e5b0-4ec7-8a59-c5443ced115f",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f7118d94-c8c8-4455-abf2-21e549737f7e",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f8299121-3d4d-4de4-af01-7046773c8baa",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "f7118d94-c8c8-4455-abf2-21e549737f7e",
                                  "f8299121-3d4d-4de4-af01-7046773c8baa"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "32496c71-c201-4777-b9ff-325d57347d94",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2c0756c7-9509-45cf-9bfc-15c3368ad410",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "505b8acd-db6e-41f9-9d19-0d2217dab575",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "2c0756c7-9509-45cf-9bfc-15c3368ad410",
                                  "505b8acd-db6e-41f9-9d19-0d2217dab575"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "67ae109f-bd35-4fb7-a35f-3e50a0de6d90",
                            "title": "`y` is a synchronously-fulfilled custom thenable for a thenable that immediately throws in `then`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "a1ded2d2-e26d-432d-84e5-ce984d60446f",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ca2869e1-209c-4def-bbdd-33aabe9c6c74",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "07eb786b-c4b0-4fae-817b-24e9896fb803",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ca2869e1-209c-4def-bbdd-33aabe9c6c74",
                                  "07eb786b-c4b0-4fae-817b-24e9896fb803"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "3bbdd809-4e6c-461d-9fe6-2de58813ac5b",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "84678cd5-83dc-4279-9a08-9623be15e0a6",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "cda28f8d-3f51-452f-bc45-88a04f9436d3",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "84678cd5-83dc-4279-9a08-9623be15e0a6",
                                  "cda28f8d-3f51-452f-bc45-88a04f9436d3"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "32cd1116-944b-4a0e-8fdb-08b1bbba2eab",
                            "title": "`y` is a synchronously-fulfilled custom thenable for an object with a throwing `then` accessor",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "11880873-12cc-42ed-a44b-8d330c499015",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7a53100a-8f20-40b4-a01b-4a0524da6b4b",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d53dab69-dc6f-46d3-9ce6-f52ee1642136",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "7a53100a-8f20-40b4-a01b-4a0524da6b4b",
                                  "d53dab69-dc6f-46d3-9ce6-f52ee1642136"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "6468e559-fe45-42d6-9612-6de7a2c6eb82",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "86e976de-1f1d-407f-9c3f-153a6c4f5b3c",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d744d7cd-4eaa-4e21-ac8c-2a4ae3ee99de",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "86e976de-1f1d-407f-9c3f-153a6c4f5b3c",
                                  "d744d7cd-4eaa-4e21-ac8c-2a4ae3ee99de"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "87f2d079-bbf4-40d5-bbbf-8a63d3c4f97a",
                            "title": "`y` is a synchronously-fulfilled custom thenable for an already-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "3f458e26-05d7-46e7-9762-30da4960e461",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c56b1622-5b87-4c70-8f29-5543a485fe0c",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "bd6deca0-bc32-40be-9a31-14acede231bd",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "c56b1622-5b87-4c70-8f29-5543a485fe0c",
                                  "bd6deca0-bc32-40be-9a31-14acede231bd"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "dbf27829-799a-4789-9a2e-0b118db525ff",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "fcaa196d-4665-427f-93c8-28c28a079ff8",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "23f50eb3-c2fb-4276-ad87-68f7687a6247",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "fcaa196d-4665-427f-93c8-28c28a079ff8",
                                  "23f50eb3-c2fb-4276-ad87-68f7687a6247"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 19,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "60000788-3db0-4b2a-a9be-6588f9c71604",
                            "title": "`y` is a synchronously-fulfilled custom thenable for an eventually-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "5eac7ef0-9a16-4cba-916a-a261e87492a7",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7c6241e8-5d91-4f1e-be7c-f128b2294830",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e89692a2-e2c8-4641-a2c6-a372baed31ec",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "7c6241e8-5d91-4f1e-be7c-f128b2294830",
                                  "e89692a2-e2c8-4641-a2c6-a372baed31ec"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 123,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "4bc9671c-a111-4054-a834-4e13c413c71e",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7b39d183-a46c-4abd-be06-c37474e098ac",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7f096b0f-fe15-4663-b644-862bf722f274",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "7b39d183-a46c-4abd-be06-c37474e098ac",
                                  "7f096b0f-fe15-4663-b644-862bf722f274"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 118,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "4ff28f1f-3c10-4d5c-95f2-8705042f3870",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "af12f70c-4900-4659-b794-c36de9f9f06e",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "887b2c9a-5a5c-4937-917e-8eab5fc01599",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "72751927-ef26-47e9-beb5-4a87810da2c4",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "887b2c9a-5a5c-4937-917e-8eab5fc01599",
                                  "72751927-ef26-47e9-beb5-4a87810da2c4"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "6c4326a7-7702-41ef-b641-99e62d6da714",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "cd37bb97-6447-49cb-9408-cb08f38f3266",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a3a26a85-260e-4137-91cc-dcc825a33f30",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "cd37bb97-6447-49cb-9408-cb08f38f3266",
                                  "a3a26a85-260e-4137-91cc-dcc825a33f30"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 19,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "2a2da98c-f6c8-4858-9c68-9c9f28321924",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "5d44283b-8863-4418-a49d-425a39afd194",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0ded1d13-35ff-4b25-a359-7059196683e0",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "fc16f30a-a8aa-46d4-b032-ca63de3a7c08",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "0ded1d13-35ff-4b25-a359-7059196683e0",
                                  "fc16f30a-a8aa-46d4-b032-ca63de3a7c08"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 19,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "04997d6a-d841-472f-82cc-444c9e71d4e7",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c830a321-45cd-4db6-bb95-251840a3a103",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "980a406b-8d2e-42bb-a514-89003b2d9121",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "c830a321-45cd-4db6-bb95-251840a3a103",
                                  "980a406b-8d2e-42bb-a514-89003b2d9121"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 22,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "6e9cdc1f-52e9-4e20-988e-6bd3b759cacc",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "45f74675-143f-4875-ad63-d408ee76fbc7",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "10212781-8593-427a-9594-419383134d21",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "185018a5-2d71-486e-a5ba-5d8f19742a40",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "10212781-8593-427a-9594-419383134d21",
                                  "185018a5-2d71-486e-a5ba-5d8f19742a40"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "f0f0994f-72c1-4f4a-9de8-087258a3ec18",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "abc55145-1ef7-4601-b1b7-009d46799771",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9cf91dde-895e-4cfb-9185-71f8d4cf5e1e",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "abc55145-1ef7-4601-b1b7-009d46799771",
                                  "9cf91dde-895e-4cfb-9185-71f8d4cf5e1e"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 19,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "a71863e5-357f-4de8-836c-a3c5d1160efe",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for a thenable that tries to fulfill twice",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "aa4aefba-cd18-402d-8631-2146fe161e1f",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "fe758be3-afe6-454f-9994-464688879c2e",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b990457f-63aa-4057-a289-fc2e4fea9af4",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "fe758be3-afe6-454f-9994-464688879c2e",
                                  "b990457f-63aa-4057-a289-fc2e4fea9af4"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "37030029-c1f9-45a8-805f-04c76446b2db",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "fc58490d-156f-43a5-b51f-bb60d010e86b",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6d01ced1-df36-421f-b3dd-b29605d7d099",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "fc58490d-156f-43a5-b51f-bb60d010e86b",
                                  "6d01ced1-df36-421f-b3dd-b29605d7d099"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "c4cf6e5d-d337-4534-8280-500416311f61",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for a thenable that fulfills but then throws",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "0b112bc0-3a17-46f2-bd18-0e1601ee8517",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8aee8180-06b7-4d8b-8553-9b530d637ded",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "207f9d3f-ee05-4334-ac03-0fc87fc29bea",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "8aee8180-06b7-4d8b-8553-9b530d637ded",
                                  "207f9d3f-ee05-4334-ac03-0fc87fc29bea"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "0da9ad9e-f708-48bb-94d5-2406b82271be",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "71af7715-80b0-4ada-a892-a6e3b5b9bafe",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "41d1284c-bd04-4598-b289-a53806130f39",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "71af7715-80b0-4ada-a892-a6e3b5b9bafe",
                                  "41d1284c-bd04-4598-b289-a53806130f39"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "aebc1d95-f877-42c4-88bf-72735fe57792",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for an already-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "d048fd61-ae49-49c5-a391-d59f33731e5a",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ac8dd0d6-5f5a-4b43-b81a-3c73bd8cf213",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "81bb9b12-f41b-4938-8bf6-c9f787228119",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ac8dd0d6-5f5a-4b43-b81a-3c73bd8cf213",
                                  "81bb9b12-f41b-4938-8bf6-c9f787228119"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 19,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "645038c8-cc07-43d0-826a-9b3566122178",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "11861603-f264-4f6b-8529-c48c18d71848",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d26aca13-71a1-49bb-b0fe-301c6eb27933",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "11861603-f264-4f6b-8529-c48c18d71848",
                                  "d26aca13-71a1-49bb-b0fe-301c6eb27933"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 22,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "0a970ca1-4b12-4660-8f75-d0dfa2eb3a2b",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for an eventually-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "fad4599b-f178-4524-bd5e-e6147b2b4ae5",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b645adc2-939c-47d4-acbd-a207c933d7e8",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b4362b05-4a1a-4eaf-bb3e-06616d435e4d",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "b645adc2-939c-47d4-acbd-a207c933d7e8",
                                  "b4362b05-4a1a-4eaf-bb3e-06616d435e4d"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 122,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "cd6d6022-0a50-4f9f-ae0f-63ce77d56467",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 58,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "874ddc38-bd96-4b79-adc4-bdd4d36b13d4",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 58,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a0eab9d6-53a3-4375-bb14-21ee8db13d39",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "874ddc38-bd96-4b79-adc4-bdd4d36b13d4",
                                  "a0eab9d6-53a3-4375-bb14-21ee8db13d39"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 116,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "104663e1-0a66-4db5-b165-dc0ac3e103ab",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "35c0014f-87d4-45e9-854f-25cc1e35b06b",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "939f3709-94bd-4056-8cb5-0c8223141a73",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "26a4e708-a491-4b07-b9d3-588c63753986",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "939f3709-94bd-4056-8cb5-0c8223141a73",
                                  "26a4e708-a491-4b07-b9d3-588c63753986"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "93936c15-8e8f-4076-9f27-769af4d3aa79",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "49993d0e-b78d-4626-bdc5-593d2d3cce8e",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7dff411d-27aa-4afe-b143-d34472eb033a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "49993d0e-b78d-4626-bdc5-593d2d3cce8e",
                                  "7dff411d-27aa-4afe-b143-d34472eb033a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "42e3de8d-4f0d-4f20-a70c-e549d6a51502",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "c0735a3d-3c46-41c8-b571-8842a4ab3939",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3dfed5aa-e55f-4c15-852a-b318f26c332f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8e72a5d9-3e84-4947-8163-d96ce9adc524",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "3dfed5aa-e55f-4c15-852a-b318f26c332f",
                                  "8e72a5d9-3e84-4947-8163-d96ce9adc524"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "5850b882-f1cf-4c0a-892f-c0d9e22ea90f",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "bef2aa5b-9458-4a75-bada-50d79d19baca",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c9060d3c-ab51-4f48-bc3f-7a0991ae2186",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "bef2aa5b-9458-4a75-bada-50d79d19baca",
                                  "c9060d3c-ab51-4f48-bc3f-7a0991ae2186"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 22,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "01cec98d-8b0f-4922-9741-e31c1fcd7e57",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "226256fc-ec40-49a6-9610-e2fa9cd05420",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "db0eeea3-4765-4c3a-b901-a527457d7527",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c1c30620-df59-4b81-8d56-da0b97e2dd6e",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "db0eeea3-4765-4c3a-b901-a527457d7527",
                                  "c1c30620-df59-4b81-8d56-da0b97e2dd6e"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "6621baee-8788-4cb8-a095-a070c643d58c",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "af53daeb-6820-4703-979f-5598a021f451",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d7d034a3-a564-4577-a6ca-e3558700272d",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "af53daeb-6820-4703-979f-5598a021f451",
                                  "d7d034a3-a564-4577-a6ca-e3558700272d"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "55d9dfb8-e7f6-4fbf-a670-1c57d188306e",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for a thenable that immediately throws in `then`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "d70b7f69-78d4-4876-a3db-4fb1880c2f49",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "23bad965-d461-4c9c-8fd4-57d442dd8f0a",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4d7cf964-9428-4978-bac4-9330e7200a59",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "23bad965-d461-4c9c-8fd4-57d442dd8f0a",
                                  "4d7cf964-9428-4978-bac4-9330e7200a59"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "91080541-75a7-48d8-a136-24f5b155464d",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1aeb6028-5361-4403-8a08-8253faacf802",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b2676cc4-de3e-461a-a04b-589384b43049",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "1aeb6028-5361-4403-8a08-8253faacf802",
                                  "b2676cc4-de3e-461a-a04b-589384b43049"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "01eefe65-7999-48c8-845a-d6ea9cd99c4c",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for an object with a throwing `then` accessor",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "1b35ad20-d7ef-4f57-938e-0f967d38402f",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "33bedc39-ab46-4285-a1c3-818a38fd9740",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "182dbd6e-8703-4af9-a476-93705194f343",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "33bedc39-ab46-4285-a1c3-818a38fd9740",
                                  "182dbd6e-8703-4af9-a476-93705194f343"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "05abb276-9318-42db-88a5-2872144c3941",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "03e68edd-088f-46b6-9028-328ef72b82a5",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "21c9f9c6-94ba-43b7-82eb-1bc8c344bba2",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "03e68edd-088f-46b6-9028-328ef72b82a5",
                                  "21c9f9c6-94ba-43b7-82eb-1bc8c344bba2"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 21,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "d42b9b14-5564-4ce4-bc85-2c0ce530a636",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for an already-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "9a5f5070-e661-428a-950a-5e7b6d24f2b5",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "df74b956-00b3-48e0-8998-db3a69e6ec78",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3abcb663-b316-4c9e-8910-98f176abc6aa",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "df74b956-00b3-48e0-8998-db3a69e6ec78",
                                  "3abcb663-b316-4c9e-8910-98f176abc6aa"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 19,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "7c282cd2-20e2-47cb-9773-c3733ed3939c",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "df5103e0-1a3e-4a39-ab31-4c5a269173b0",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e6ea5747-bb77-44ae-ad71-0f96d17e4f2d",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "df5103e0-1a3e-4a39-ab31-4c5a269173b0",
                                  "e6ea5747-bb77-44ae-ad71-0f96d17e4f2d"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 21,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "5a7bce33-8fca-497a-baaa-ca1c62c6e63e",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for an eventually-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "1a4f0251-8725-4cd4-b902-ac7165e14dbe",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "46959e1c-c663-488c-861a-9f32620b6ced",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "81763175-2182-493c-93ba-5314da8da46b",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "46959e1c-c663-488c-861a-9f32620b6ced",
                                  "81763175-2182-493c-93ba-5314da8da46b"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 121,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "09fb4f49-62f2-4739-a936-2b78c50964c9",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a8c2f63e-eab7-4dd5-9cfc-2886c22337e0",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a73aa162-d480-4411-95ce-b1db1492dd46",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "a8c2f63e-eab7-4dd5-9cfc-2886c22337e0",
                                  "a73aa162-d480-4411-95ce-b1db1492dd46"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 123,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "1fc717ac-5680-42d3-8543-66ec08e64e05",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "e31d7ebe-f139-47de-912f-c80cbc2943a7",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ef8ac25f-afa6-4162-99b5-ed1c90a8813c",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c0ef0584-fc96-4665-899b-314d005f9932",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ef8ac25f-afa6-4162-99b5-ed1c90a8813c",
                                  "c0ef0584-fc96-4665-899b-314d005f9932"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "3bcab16f-1c41-48a6-b5ae-62c74805a32e",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "569f4d1b-336f-44d4-a535-6a817baca5d0",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d0220114-bcc4-47ee-8aa7-ef9d3c4b8af0",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "569f4d1b-336f-44d4-a535-6a817baca5d0",
                                  "d0220114-bcc4-47ee-8aa7-ef9d3c4b8af0"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "b7ee9093-2f29-4e11-8e92-992e4e40d992",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for an asynchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "7cff908f-4436-42c2-83a8-78c42b980e36",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2f4bf431-1ec1-4aa7-9d44-401de7f5b73f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "bd04cd47-38ee-40d7-b990-e65e55b40815",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "2f4bf431-1ec1-4aa7-9d44-401de7f5b73f",
                                  "bd04cd47-38ee-40d7-b990-e65e55b40815"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "681ed0f2-9038-4660-b770-f284fde36847",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1396c7cc-fa4d-413f-b324-09a8172c2778",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "54142c42-7b0c-4b25-b565-be64556a69ac",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "1396c7cc-fa4d-413f-b324-09a8172c2778",
                                  "54142c42-7b0c-4b25-b565-be64556a69ac"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 19,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "ccb7975e-7991-4755-978a-b6718832b285",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "53d30f0b-75f3-478b-81af-6b602a240f7f",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "17631505-7a1a-4cfa-b3c8-e22432aa904b",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "40541b3a-e5ff-4861-987c-eae921d3bc4d",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "17631505-7a1a-4cfa-b3c8-e22432aa904b",
                                  "40541b3a-e5ff-4861-987c-eae921d3bc4d"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 10,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "fa59f7e8-44d7-47b4-b81c-7276907afe89",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "aafde76c-357d-4a45-b204-47c5f67fc59a",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "592190e6-2bda-4f2d-8c22-95c7e7158a13",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "aafde76c-357d-4a45-b204-47c5f67fc59a",
                                  "592190e6-2bda-4f2d-8c22-95c7e7158a13"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "a5d2ef42-d78d-4cb2-a9a8-1737182b8892",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for a thenable that tries to fulfill twice",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "0517d79a-6e7f-47c0-81f8-33103d5bb1dd",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "fd7d62ae-d560-4eb5-8102-595394d36382",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "aa4273e3-3f4d-45dd-801f-d05c013f9a0d",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "fd7d62ae-d560-4eb5-8102-595394d36382",
                                  "aa4273e3-3f4d-45dd-801f-d05c013f9a0d"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 9,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "3fa81dc2-857f-4bc1-9f5b-fbda5efd1b3c",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b00e976d-0e01-4256-9491-9df12ffd1ef6",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "714a0ad7-f9c8-4a49-bab3-3c5c0d516de5",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "b00e976d-0e01-4256-9491-9df12ffd1ef6",
                                  "714a0ad7-f9c8-4a49-bab3-3c5c0d516de5"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "8bac8580-34e8-412f-b1d4-d97789077419",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for a thenable that fulfills but then throws",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "75f6d555-95d0-407e-9316-7fc9f808c91d",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b6ea838a-a9a6-451a-a428-739f65049356",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ba62addf-8ade-40c7-924b-5f96980cec07",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "b6ea838a-a9a6-451a-a428-739f65049356",
                                  "ba62addf-8ade-40c7-924b-5f96980cec07"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 10,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "65e2c54d-ee70-43b3-80a0-12345b18d377",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "717c7962-f1fc-4a38-9bcd-34354e7c040e",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "27f81872-00cf-4506-ac46-10802741a449",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "717c7962-f1fc-4a38-9bcd-34354e7c040e",
                                  "27f81872-00cf-4506-ac46-10802741a449"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "d48d78f7-3511-4933-9842-cf53dc32da18",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for an already-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "1a20ef4b-ef7e-4aa3-9198-582eeb44cd3c",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3d6afe7a-e894-49ab-b867-737b40de66e0",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "737838fb-7945-4cd6-b20f-bd4250bad0b4",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "3d6afe7a-e894-49ab-b867-737b40de66e0",
                                  "737838fb-7945-4cd6-b20f-bd4250bad0b4"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "50541a96-8bc6-43c5-a2c6-036eb5029650",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d2581471-2589-49c9-9717-c4b31bafe628",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "89277b47-9b02-4b42-a751-e462e1dd82b9",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "d2581471-2589-49c9-9717-c4b31bafe628",
                                  "89277b47-9b02-4b42-a751-e462e1dd82b9"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "20d250c2-64d4-4f2a-9b21-892b77f0f4ed",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for an eventually-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "cebf1b75-6936-4f99-9951-b64f94c111cd",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9dae39c0-53ea-4430-979a-2654211f6606",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c1923cb1-2947-49ac-9e48-ee544adfcfe0",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "9dae39c0-53ea-4430-979a-2654211f6606",
                                  "c1923cb1-2947-49ac-9e48-ee544adfcfe0"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 123,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "02e03404-ca42-4ca4-bd8a-98181d928967",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ca0704ef-d7b9-49ef-ac97-21f5680665f4",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "55c3affd-daa5-4b84-b45c-dfddbdf8eb9a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ca0704ef-d7b9-49ef-ac97-21f5680665f4",
                                  "55c3affd-daa5-4b84-b45c-dfddbdf8eb9a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 122,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "e77d8ee0-b665-47b4-8d1c-7b1ba1198285",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "23d9cd7a-3776-4b47-811d-7ed21b337a14",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a833de80-ab9f-4d54-b2b2-40f6332db394",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4d368f76-c320-4ccd-af34-c815812adc6b",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "a833de80-ab9f-4d54-b2b2-40f6332db394",
                                  "4d368f76-c320-4ccd-af34-c815812adc6b"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "dfb48760-d49e-43e8-9738-e5cce3fc9e46",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "fa09803b-0197-431d-8038-0c6f15854394",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2174c8ce-e58b-48fd-8d9a-5b13ee3e4324",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "fa09803b-0197-431d-8038-0c6f15854394",
                                  "2174c8ce-e58b-48fd-8d9a-5b13ee3e4324"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "83ec76df-b750-44ad-bacf-46c50f2b7f30",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for an asynchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "e55edeb3-49a0-40f3-8f1e-66022c012d4d",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3f29e015-625a-4c37-8e2d-31623b19acb3",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "69bf7c81-3c69-4583-88eb-973ab3d2a327",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "3f29e015-625a-4c37-8e2d-31623b19acb3",
                                  "69bf7c81-3c69-4583-88eb-973ab3d2a327"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "3c35336d-b4df-4d18-9378-2fe9dc230bc3",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3ca26780-f1b4-41eb-b3f6-2cc293740374",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ed724b2e-7f22-4f71-842e-b2b9b8253eb8",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "3ca26780-f1b4-41eb-b3f6-2cc293740374",
                                  "ed724b2e-7f22-4f71-842e-b2b9b8253eb8"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 20,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "531cbdb1-6c92-459e-94b9-6f8dbe4bc301",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "4f0a29e7-f9c5-4c2c-9199-f3939de98ef3",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "65a4637d-5059-42ca-a2ca-4e0d26a56c84",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "96f37af6-6119-4999-99f6-419389c59b88",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "65a4637d-5059-42ca-a2ca-4e0d26a56c84",
                                  "96f37af6-6119-4999-99f6-419389c59b88"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "4fcc195a-6c58-4816-8d23-13b3294ed234",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ecf5659a-1d45-4b53-b9ec-91da330fb5c2",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2f6d86c6-a865-404f-afba-3f3ad1bb0ddd",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ecf5659a-1d45-4b53-b9ec-91da330fb5c2",
                                  "2f6d86c6-a865-404f-afba-3f3ad1bb0ddd"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "12b5d4b3-40e5-4502-9065-dd1e11cbfeba",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for a thenable that immediately throws in `then`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "25a7dc9f-5fdc-49c5-9049-55d04dacb2f0",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5db18a07-e665-48f8-b695-49145b582883",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2b61f858-1768-4145-a442-4746e97be1ff",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "5db18a07-e665-48f8-b695-49145b582883",
                                  "2b61f858-1768-4145-a442-4746e97be1ff"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "38c4e362-51ad-404e-96d1-fde1b941a8c2",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "abc0b949-47dc-4242-a60c-5db7ff5ffea7",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "73a29b65-66cd-4382-aefc-1e5fbc6a4c8a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "abc0b949-47dc-4242-a60c-5db7ff5ffea7",
                                  "73a29b65-66cd-4382-aefc-1e5fbc6a4c8a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "511885fd-8efd-4b43-8fe2-19490fe1342b",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for an object with a throwing `then` accessor",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "f30f8de3-0141-4c34-bc18-555ace021e27",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8e420edb-b53a-485e-86d5-97855c9b5821",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c6117b78-53aa-4d6d-aa35-0f3cd4ff822e",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "8e420edb-b53a-485e-86d5-97855c9b5821",
                                  "c6117b78-53aa-4d6d-aa35-0f3cd4ff822e"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "59eb006c-c9b6-4ee5-bdf8-27705ec83777",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a20dc488-48eb-4e32-b7f9-7038128aff1c",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ba27af03-e74b-4107-b368-0a13d106ccbc",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "a20dc488-48eb-4e32-b7f9-7038128aff1c",
                                  "ba27af03-e74b-4107-b368-0a13d106ccbc"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "efb63f3d-50fa-484c-a650-d90dcf8ef50b",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for an already-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "eefc2849-d557-4c4a-a436-c432dfb53ff3",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "70d866e7-c443-4998-8f27-981ecc83cf4f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "913784e9-5532-4710-8f81-163d7eb9bafc",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "70d866e7-c443-4998-8f27-981ecc83cf4f",
                                  "913784e9-5532-4710-8f81-163d7eb9bafc"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "c28a8d78-a66a-44ed-a6e9-cb4117ac3578",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6d4d75b8-ec38-48f0-9946-e5caab862a25",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "31b23470-9026-43e6-a96e-2aa9da700171",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "6d4d75b8-ec38-48f0-9946-e5caab862a25",
                                  "31b23470-9026-43e6-a96e-2aa9da700171"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 20,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "9fa02f67-ac4a-4f06-9c61-9f758df76ed6",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for an eventually-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "897acdce-c04d-4902-8161-072476cfb954",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "161d39d1-e6ae-43d0-9d34-7ad213aab49c",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "990dedbc-0e8e-406d-8152-d5702f2cc42d",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "161d39d1-e6ae-43d0-9d34-7ad213aab49c",
                                  "990dedbc-0e8e-406d-8152-d5702f2cc42d"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 121,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "031b9d49-7ff1-4145-8fa7-55200d6d26c4",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2178d3a4-b19c-49a1-be3d-46d40791f4e8",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0c61539d-6e28-4d35-a1fc-0abd346c0cf3",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "2178d3a4-b19c-49a1-be3d-46d40791f4e8",
                                  "0c61539d-6e28-4d35-a1fc-0abd346c0cf3"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 121,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "b7923d29-d91c-4a52-98fa-f20e7756d0fe",
                            "title": "`y` is a thenable that tries to fulfill twice for a synchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "0726b98a-0e7f-4d89-9a2d-cc46129d5388",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "96cd76ba-aff8-4358-adf5-3aef2a5f7f42",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d789c65d-fb3c-4da2-89d3-08926917ace3",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "96cd76ba-aff8-4358-adf5-3aef2a5f7f42",
                                  "d789c65d-fb3c-4da2-89d3-08926917ace3"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 9,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "d923c2af-2484-46a9-a166-f905b7d490df",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2c803f42-497f-4ff4-bf69-77ccc941e069",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c0bec1c7-99f4-4976-87b7-dd32c7fb4bcf",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "2c803f42-497f-4ff4-bf69-77ccc941e069",
                                  "c0bec1c7-99f4-4976-87b7-dd32c7fb4bcf"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "c6ae9d5f-1228-4353-a327-5ddf78218e03",
                            "title": "`y` is a thenable that tries to fulfill twice for an asynchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "741cfc26-e7e5-45db-9ec7-af8c2ff26f5b",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "159f5799-514f-44d9-8092-51d8d8c89799",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8202c325-db4e-4d5a-8afb-9a8639905488",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "159f5799-514f-44d9-8092-51d8d8c89799",
                                  "8202c325-db4e-4d5a-8afb-9a8639905488"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "76f167a4-ae70-4888-bffd-f03620577e25",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6240c892-6c56-4f14-8883-fe4382171f0b",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e7b0e01f-eadc-4169-a7ed-49ca2889488b",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "6240c892-6c56-4f14-8883-fe4382171f0b",
                                  "e7b0e01f-eadc-4169-a7ed-49ca2889488b"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "d984e377-d384-4b25-ad9c-5cf586f75d38",
                            "title": "`y` is a thenable that tries to fulfill twice for a synchronously-fulfilled one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "c7ca89bd-36e3-4328-ab15-cb234c2b60e3",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b458f886-37d3-4af6-93d3-503e4da2429b",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3b40e8cb-1622-4873-b8a3-edd1fc6eae84",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "b458f886-37d3-4af6-93d3-503e4da2429b",
                                  "3b40e8cb-1622-4873-b8a3-edd1fc6eae84"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 10,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "24db5aee-ac98-4817-8224-60402be5686d",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "57b6f551-4e45-42bf-ac79-9cf296d8dee2",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e860c834-bc68-453f-a4a4-68123df99c17",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "57b6f551-4e45-42bf-ac79-9cf296d8dee2",
                                  "e860c834-bc68-453f-a4a4-68123df99c17"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "bc0d5f89-2233-4591-90bf-7093f4c9c21e",
                            "title": "`y` is a thenable that tries to fulfill twice for a thenable that tries to fulfill twice",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "324ab6c9-173c-4329-b4ea-27ed03de2745",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0eac5159-7aff-455e-931b-7e7abf769d1b",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7d3358d8-26c1-460e-94c4-2b23df190704",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "0eac5159-7aff-455e-931b-7e7abf769d1b",
                                  "7d3358d8-26c1-460e-94c4-2b23df190704"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "47dd1553-5765-487d-a61f-97ddca4d4105",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "14c2137a-04b2-47f0-8630-594846ac8a89",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "37b3b622-7d27-461f-a848-7db56c17c5f6",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "14c2137a-04b2-47f0-8630-594846ac8a89",
                                  "37b3b622-7d27-461f-a848-7db56c17c5f6"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "e20aa246-e6e0-4c08-b4a4-a1293b5cfc0b",
                            "title": "`y` is a thenable that tries to fulfill twice for a thenable that fulfills but then throws",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "714e52c4-5476-4603-af9f-708bd0140f44",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "73a452c4-8709-4f35-9cc1-e086592243c5",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a357c18b-42bb-4d6a-b610-93ca2a305281",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "73a452c4-8709-4f35-9cc1-e086592243c5",
                                  "a357c18b-42bb-4d6a-b610-93ca2a305281"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 10,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "5eb26623-710c-4c85-937f-9d159b2641dc",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2df927a5-0a02-4d08-b68b-54da2c975cea",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a728e976-ba14-4027-8649-e78a0e6bdf7e",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "2df927a5-0a02-4d08-b68b-54da2c975cea",
                                  "a728e976-ba14-4027-8649-e78a0e6bdf7e"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "57db8bac-c5e0-4bd0-a6cf-45654212be0c",
                            "title": "`y` is a thenable that tries to fulfill twice for an already-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "37ac34cd-1fde-43c8-8ddc-3853d7df1d14",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "dcbee1c8-cfe2-49e1-9a62-90136baf125f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "34c2c761-2b83-4097-96de-9c42b06f9af8",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "dcbee1c8-cfe2-49e1-9a62-90136baf125f",
                                  "34c2c761-2b83-4097-96de-9c42b06f9af8"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "d7bacdc4-31ff-48c0-878e-85fc89b10807",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f704be7e-d1d4-49c4-8046-d207c51b700e",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5c0af9dc-2903-42ec-b0f9-4418b5be03ed",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "f704be7e-d1d4-49c4-8046-d207c51b700e",
                                  "5c0af9dc-2903-42ec-b0f9-4418b5be03ed"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 20,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "5fe110ee-c6c3-4575-b491-d45838dd38bc",
                            "title": "`y` is a thenable that tries to fulfill twice for an eventually-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "0be55157-4b33-4fc7-8f77-238b4d423cb6",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "04b2c297-746d-42f7-966c-21dbb58b9bbf",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "156961d0-152a-4c26-a8ad-4b6237b75bae",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "04b2c297-746d-42f7-966c-21dbb58b9bbf",
                                  "156961d0-152a-4c26-a8ad-4b6237b75bae"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 121,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "4da48cda-d608-481b-8cf6-b5f82e1ff87b",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "fd859714-cd97-4cc5-b711-1af75879109e",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "96ee2b4b-df82-49f9-aff3-4cbb1b804067",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "fd859714-cd97-4cc5-b711-1af75879109e",
                                  "96ee2b4b-df82-49f9-aff3-4cbb1b804067"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 124,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "ef82f32a-e1d4-49eb-b065-128b6d566a89",
                            "title": "`y` is a thenable that tries to fulfill twice for a synchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "9769db71-8345-46c4-ba6a-fe8bc6175fb0",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f9bcc530-f27d-4177-bacf-f4fc6b00887e",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0043832d-48f1-4eec-81ae-b2331bf3c51a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "f9bcc530-f27d-4177-bacf-f4fc6b00887e",
                                  "0043832d-48f1-4eec-81ae-b2331bf3c51a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "6013caa7-28db-4bf0-8ef7-180c2032a81b",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9aa6ae01-0f19-4402-8bfc-f91e9c05300a",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "232881f0-741e-4612-99f5-563d226f0a01",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "9aa6ae01-0f19-4402-8bfc-f91e9c05300a",
                                  "232881f0-741e-4612-99f5-563d226f0a01"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "eb556160-255b-439b-828f-2027f349b642",
                            "title": "`y` is a thenable that tries to fulfill twice for an asynchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "2878007d-4779-422c-a65e-93f9ac229ace",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "229e29fe-e028-49d7-9a62-b1a0a58e1318",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9ba57804-afd8-4ae0-9349-83887de4c915",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "229e29fe-e028-49d7-9a62-b1a0a58e1318",
                                  "9ba57804-afd8-4ae0-9349-83887de4c915"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "ef421fbc-3e79-429b-8463-e8c531333ade",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0ca8dab1-a2eb-414c-8f5a-3d5e59dc7656",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "981bca15-82bb-4e04-aad8-c3cba429b6df",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "0ca8dab1-a2eb-414c-8f5a-3d5e59dc7656",
                                  "981bca15-82bb-4e04-aad8-c3cba429b6df"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 19,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "b29719fa-f867-4684-a1b6-c61e2fd99479",
                            "title": "`y` is a thenable that tries to fulfill twice for a synchronously-rejected one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "023b515b-0bdb-4844-a090-14ed3ed47497",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "887d5881-92ed-45bb-8ec0-d8d279a6ff30",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0821f330-2c19-4c82-b4c9-318700e5ae59",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "887d5881-92ed-45bb-8ec0-d8d279a6ff30",
                                  "0821f330-2c19-4c82-b4c9-318700e5ae59"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "0f199129-1014-436f-bb5c-6199e7bf631f",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a97ca89d-1290-4471-8caf-f0f1c43ad0f7",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d4cf9dba-e3b1-41f2-b456-a81e4d5a9637",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "a97ca89d-1290-4471-8caf-f0f1c43ad0f7",
                                  "d4cf9dba-e3b1-41f2-b456-a81e4d5a9637"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "f49937e2-c8d0-4da9-a556-3b1da780f81d",
                            "title": "`y` is a thenable that tries to fulfill twice for a thenable that immediately throws in `then`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "479e0199-06cc-4eec-86c3-01eae6b4ba35",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "217390c7-4d7a-49de-b102-6b46b5ed8988",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2516d73d-5432-498e-835a-ca6e9a73d2e8",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "217390c7-4d7a-49de-b102-6b46b5ed8988",
                                  "2516d73d-5432-498e-835a-ca6e9a73d2e8"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "58294d68-139c-4860-8b4b-d2858cc39272",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "76afb89b-0c16-466e-85c2-bccc52deab69",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b650185e-a2a4-462f-b9d1-1b25a2b94da6",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "76afb89b-0c16-466e-85c2-bccc52deab69",
                                  "b650185e-a2a4-462f-b9d1-1b25a2b94da6"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "5ad060dd-0f0b-43e0-9dc6-1ca206913337",
                            "title": "`y` is a thenable that tries to fulfill twice for an object with a throwing `then` accessor",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "15f10e97-c71b-4d52-bf88-ca75466a7064",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "23ee00a4-94bc-4ca4-aa2d-d90322014493",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3fe1ec06-cf7c-465d-8e53-8b18e6105da7",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "23ee00a4-94bc-4ca4-aa2d-d90322014493",
                                  "3fe1ec06-cf7c-465d-8e53-8b18e6105da7"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "82a1fd2a-3ce1-4527-942d-170f73981117",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f5ccd549-b2ca-4bb4-8ebd-43844918e99e",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7154f515-4f61-4527-999e-08324d450309",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "f5ccd549-b2ca-4bb4-8ebd-43844918e99e",
                                  "7154f515-4f61-4527-999e-08324d450309"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "26e91bdf-6c52-4c5c-91c2-1c1111e1646c",
                            "title": "`y` is a thenable that tries to fulfill twice for an already-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "b5499556-e8e9-419c-a890-ec2a9ad3d7a3",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3fe3b419-5436-4b1e-9fdc-7a6f746e773d",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "abcb6522-40ca-489b-8f37-6f88a4de3f06",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "3fe3b419-5436-4b1e-9fdc-7a6f746e773d",
                                  "abcb6522-40ca-489b-8f37-6f88a4de3f06"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "819fff8e-7efe-4fe7-8aba-fc16a4bd7305",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "23aaaf83-80ea-4772-b04e-eaa717086461",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "67d38102-eef4-4cb3-b008-45c937d91154",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "23aaaf83-80ea-4772-b04e-eaa717086461",
                                  "67d38102-eef4-4cb3-b008-45c937d91154"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "8a69ab29-db44-487b-918d-a3a33cd3e91b",
                            "title": "`y` is a thenable that tries to fulfill twice for an eventually-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "c431a164-b7c7-4b58-b2b0-452aa4175480",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d9cd89cb-9106-4191-912a-6adcffd62d50",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1f39d9cd-376d-446f-9471-8dc754a85a75",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "d9cd89cb-9106-4191-912a-6adcffd62d50",
                                  "1f39d9cd-376d-446f-9471-8dc754a85a75"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 121,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "66e717ed-e67a-4b77-a004-851128a6a827",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1fd2592c-513a-423c-9fb1-9206b19adcb8",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0aefdbd3-d78f-4c17-bd27-100705a77263",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "1fd2592c-513a-423c-9fb1-9206b19adcb8",
                                  "0aefdbd3-d78f-4c17-bd27-100705a77263"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 122,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "7283984d-8a24-4180-bcc8-b1839a70bac0",
                            "title": "`y` is a thenable that fulfills but then throws for a synchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "6b933d1a-fd6d-4664-91fe-4f8c50132817",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7724f8f1-4625-49b2-91d8-811cef4cefb1",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c57823a7-abee-42d1-b96e-0c8a725815ec",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "7724f8f1-4625-49b2-91d8-811cef4cefb1",
                                  "c57823a7-abee-42d1-b96e-0c8a725815ec"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "3ecb41a4-9293-4553-a188-8afb4ae100bf",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ca6b58a2-71cf-4b71-87d9-dc60467bdc96",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e685de6c-cc3c-4c7a-9dea-18fa60652de0",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ca6b58a2-71cf-4b71-87d9-dc60467bdc96",
                                  "e685de6c-cc3c-4c7a-9dea-18fa60652de0"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "f2ec89c7-6759-44b3-8fde-6648fef1781d",
                            "title": "`y` is a thenable that fulfills but then throws for an asynchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "6b4ac2c8-5e02-4a94-8b77-df9bf5384337",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a77d3dc2-850e-46ad-b74a-988c16270db6",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "80010e78-8e90-40c3-bdb8-d01de7b3595c",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "a77d3dc2-850e-46ad-b74a-988c16270db6",
                                  "80010e78-8e90-40c3-bdb8-d01de7b3595c"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "a391220e-99dd-41f7-8e07-9b12814ccb8f",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ef1b1930-263f-4eb4-9607-38c680f2caf6",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "65e7de70-bd31-4719-b6f2-8d68844dc6ba",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ef1b1930-263f-4eb4-9607-38c680f2caf6",
                                  "65e7de70-bd31-4719-b6f2-8d68844dc6ba"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "b342a4f8-c009-488e-813b-a772db051018",
                            "title": "`y` is a thenable that fulfills but then throws for a synchronously-fulfilled one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "673e8c4b-a7af-4591-9325-caa03446640e",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6f6d865b-418d-4d08-a871-fa09e03b62c9",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d1a3f6be-f5f4-469f-9d9c-c23a3ef0336d",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "6f6d865b-418d-4d08-a871-fa09e03b62c9",
                                  "d1a3f6be-f5f4-469f-9d9c-c23a3ef0336d"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "ae46c987-b4d0-4594-80ca-4e2fef49f932",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7db9a86b-fb3b-4598-8039-14f04129f917",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "013cd0de-a018-435f-89c9-58290d086b60",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "7db9a86b-fb3b-4598-8039-14f04129f917",
                                  "013cd0de-a018-435f-89c9-58290d086b60"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "6056eec2-a66b-47b4-a3c4-3e442dbc6f61",
                            "title": "`y` is a thenable that fulfills but then throws for a thenable that tries to fulfill twice",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "1f1adb84-0813-42b8-ad61-416f7990b60c",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5dd757f3-f15d-482d-9f99-faf7f4e97eae",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "acf6ed6b-aaf9-4ca4-ba2a-2361fc3ffeb1",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "5dd757f3-f15d-482d-9f99-faf7f4e97eae",
                                  "acf6ed6b-aaf9-4ca4-ba2a-2361fc3ffeb1"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "b4484fd5-0475-4562-92d4-3c983aa2c557",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8a592c2d-3c0c-4299-ba55-179ea02a57ba",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5b23766b-5e27-4c6f-b387-36b80007b542",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "8a592c2d-3c0c-4299-ba55-179ea02a57ba",
                                  "5b23766b-5e27-4c6f-b387-36b80007b542"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "42f02e8c-8b92-4d0b-9220-60dc6bbd6de5",
                            "title": "`y` is a thenable that fulfills but then throws for a thenable that fulfills but then throws",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "242a5a1e-30be-46c8-8a0e-558a3db1ec39",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c1818a9c-150c-49ea-bdbd-0a944a4b9f96",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "636c80ae-f6f5-4350-b0fd-5f41e4380f7c",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "c1818a9c-150c-49ea-bdbd-0a944a4b9f96",
                                  "636c80ae-f6f5-4350-b0fd-5f41e4380f7c"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "be7f7eee-d66a-417c-b166-b7bab4a1ee84",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9573ae7e-746d-40bf-87e4-d2e9fde19b64",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5b12e5d7-dd23-4c3e-a927-57c36567ceff",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "9573ae7e-746d-40bf-87e4-d2e9fde19b64",
                                  "5b12e5d7-dd23-4c3e-a927-57c36567ceff"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "a34a90c6-a0bf-4988-87c3-30222f548aa1",
                            "title": "`y` is a thenable that fulfills but then throws for an already-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "c0fdf717-db8d-4f07-be88-234d79622b01",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e8931031-61b3-4296-bd77-7fd82d67ae14",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a67638f8-6e98-4691-aae1-cc35d00e6d42",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "e8931031-61b3-4296-bd77-7fd82d67ae14",
                                  "a67638f8-6e98-4691-aae1-cc35d00e6d42"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "2d9a066f-3485-4b8c-b4e6-022faf4dc7df",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ef95ff92-6456-469b-b064-e001ae7816c2",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "760c3c0c-e447-4b32-b630-256b18a5c32a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ef95ff92-6456-469b-b064-e001ae7816c2",
                                  "760c3c0c-e447-4b32-b630-256b18a5c32a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "e588b210-22f2-43c5-b91e-d236767fd83f",
                            "title": "`y` is a thenable that fulfills but then throws for an eventually-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "8d704889-6909-45e1-ba21-a953029b1d9d",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 57,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "285dae02-423a-42f2-af3b-8981fdb40440",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 57,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8cf34c3c-9caa-4516-b690-ef7cc4ffe131",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "285dae02-423a-42f2-af3b-8981fdb40440",
                                  "8cf34c3c-9caa-4516-b690-ef7cc4ffe131"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 114,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "14be42e0-8c03-4bdc-8449-6e7f4996fcb7",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "783019cb-beef-477c-bb35-48deb34d5eb1",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "40e80fce-8c81-4775-bd7b-7bd1f2d03cab",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "783019cb-beef-477c-bb35-48deb34d5eb1",
                                  "40e80fce-8c81-4775-bd7b-7bd1f2d03cab"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 120,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "55775648-d378-4150-822e-8804d4b051d9",
                            "title": "`y` is a thenable that fulfills but then throws for a synchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "1257238a-c307-42ba-b16f-5c0c4e4cce57",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "396cadfb-179e-4a87-8a30-422b27b70012",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "92768ce5-a1aa-44b9-a231-f6b8cc06486c",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "396cadfb-179e-4a87-8a30-422b27b70012",
                                  "92768ce5-a1aa-44b9-a231-f6b8cc06486c"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 9,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "1ea57ace-a0d8-4d16-b401-3cfcdcd873b8",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "391f532d-6ae6-4351-a3d9-01638edc3b4c",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ac42e5be-9b75-4c3f-a6e7-babaaa1cd7ec",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "391f532d-6ae6-4351-a3d9-01638edc3b4c",
                                  "ac42e5be-9b75-4c3f-a6e7-babaaa1cd7ec"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "4b2792a2-f691-4ea4-9984-428bcc03042b",
                            "title": "`y` is a thenable that fulfills but then throws for an asynchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "6a82bc31-c004-4ee7-b3ca-b71d3276777b",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "866dd4d7-4587-4cae-a1cd-1e2ecfe05778",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e4f18b3c-10f7-4f82-825a-623aea9bad3f",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "866dd4d7-4587-4cae-a1cd-1e2ecfe05778",
                                  "e4f18b3c-10f7-4f82-825a-623aea9bad3f"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "36cff6b7-ce90-443a-b56b-c9b37126de90",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "aa8dc478-b11d-4daf-bbd0-253486298bae",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9c592807-d1ad-465c-ae0c-d9337e0c2580",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "aa8dc478-b11d-4daf-bbd0-253486298bae",
                                  "9c592807-d1ad-465c-ae0c-d9337e0c2580"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 20,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "36a020d5-31fa-401d-af4b-f175c3670fb5",
                            "title": "`y` is a thenable that fulfills but then throws for a synchronously-rejected one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "31981edf-4a35-4fae-97a3-bb8dfdc90e8a",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a4c3f0c6-650f-41d8-a40a-2c9181f03c39",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "cc7afce4-eabe-447a-ac6e-cbd4bda54a1b",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "a4c3f0c6-650f-41d8-a40a-2c9181f03c39",
                                  "cc7afce4-eabe-447a-ac6e-cbd4bda54a1b"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "414dd6fd-849a-44d8-a72d-16f759c17df1",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "dee359c2-b8b5-4a0c-a2ad-303e19ebc78c",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "37100180-6212-4dd7-b27c-c8b108095816",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "dee359c2-b8b5-4a0c-a2ad-303e19ebc78c",
                                  "37100180-6212-4dd7-b27c-c8b108095816"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "968a27c0-8f72-41e8-8c55-9f89383a2bb9",
                            "title": "`y` is a thenable that fulfills but then throws for a thenable that immediately throws in `then`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "56c22d61-daa5-4a0a-8eec-d3ef1d2aec6b",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "db68344f-5474-4305-81c1-5b8f9ef51dde",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7392a91c-75db-46f0-83ad-d00fc67a65ec",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "db68344f-5474-4305-81c1-5b8f9ef51dde",
                                  "7392a91c-75db-46f0-83ad-d00fc67a65ec"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 9,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "d29fffb1-adb1-4c0f-b919-486e9b88c9dc",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6102f639-d3bc-4859-ba55-e8abb0086a5f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "199a86d0-e804-4fc5-8b00-13779d8b853a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "6102f639-d3bc-4859-ba55-e8abb0086a5f",
                                  "199a86d0-e804-4fc5-8b00-13779d8b853a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "f0f66248-9ca3-423d-8975-646f0fd9bcca",
                            "title": "`y` is a thenable that fulfills but then throws for an object with a throwing `then` accessor",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "c4b00981-e2c5-4b20-a204-5134570f7bbf",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "803b59f9-eef3-4d2d-a2ab-81fce976279a",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "82d9f102-60a7-4315-9d43-83402d17ee4e",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "803b59f9-eef3-4d2d-a2ab-81fce976279a",
                                  "82d9f102-60a7-4315-9d43-83402d17ee4e"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 10,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "1310e25f-4da5-4b8f-b01a-bed5141685c8",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "51882c2b-d4fa-490b-a5c7-59593d6be980",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "03d6c765-9ce7-45b6-9e3e-9512f3e0f36c",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "51882c2b-d4fa-490b-a5c7-59593d6be980",
                                  "03d6c765-9ce7-45b6-9e3e-9512f3e0f36c"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "abbefc43-9908-49fe-8614-8d34b03e4a3d",
                            "title": "`y` is a thenable that fulfills but then throws for an already-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "fb5a7cc1-73bb-4c3f-ab52-ba2173ff76f7",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "41798b8f-253f-4df5-b1f3-982229cd8839",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "97105999-3e59-4483-8244-3fada7b81b86",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "41798b8f-253f-4df5-b1f3-982229cd8839",
                                  "97105999-3e59-4483-8244-3fada7b81b86"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "83a3ae4b-a67a-4120-84c4-3dab4db3844e",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f8264091-9441-4242-b6a2-6fe47107f023",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0ed1d962-970c-465e-ac68-2fcb09a2f71e",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "f8264091-9441-4242-b6a2-6fe47107f023",
                                  "0ed1d962-970c-465e-ac68-2fcb09a2f71e"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "d496fe3c-2954-4084-8e00-890280f5f2c9",
                            "title": "`y` is a thenable that fulfills but then throws for an eventually-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "cdbf835b-0c15-40bb-9216-d080eb33c1ff",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b17beee1-567d-494d-8c8f-9525b13c72e4",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "297e21e0-422e-4776-9312-4764c1db7d6d",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "b17beee1-567d-494d-8c8f-9525b13c72e4",
                                  "297e21e0-422e-4776-9312-4764c1db7d6d"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 119,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "6c1d35e9-2843-441d-9286-f5f9eef59adb",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7897e399-9fc4-44e3-9586-bbb7395c9050",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a9b54659-d150-470b-9018-c6c3b7873100",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "7897e399-9fc4-44e3-9586-bbb7395c9050",
                                  "a9b54659-d150-470b-9018-c6c3b7873100"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 123,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "d296ba8d-82aa-4381-88ae-f3ca1bd2e87d",
                            "title": "`y` is an already-fulfilled promise for a synchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "5d32db1e-5cac-418b-9aa3-bb5af8b5b2e0",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6a195cdf-4cee-4868-9ace-ea2435c6fcfc",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4300a67d-ddc9-47d6-8b9d-8d98f4e55a5f",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "6a195cdf-4cee-4868-9ace-ea2435c6fcfc",
                                  "4300a67d-ddc9-47d6-8b9d-8d98f4e55a5f"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "aee2a134-3c0f-4eaa-8c8b-c66a9d66c797",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4a663c9e-beb6-4b77-838f-748986d0b0ba",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ae283624-c48c-4f13-9d88-6d8c51b168bf",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "4a663c9e-beb6-4b77-838f-748986d0b0ba",
                                  "ae283624-c48c-4f13-9d88-6d8c51b168bf"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "397f2003-8c12-4195-85bd-99f9aaf14be8",
                            "title": "`y` is an already-fulfilled promise for an asynchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "5191975e-e07c-43bc-b383-34a51ffc6e61",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "42099503-a01a-4dce-8994-aafee1d612e6",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f1b884c3-f06a-429d-9bbc-cf93fa7e31c7",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "42099503-a01a-4dce-8994-aafee1d612e6",
                                  "f1b884c3-f06a-429d-9bbc-cf93fa7e31c7"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 20,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "8533e94c-bbc0-4f08-80eb-e66ef6bd9925",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7cfd4d5e-7be6-4f55-8225-9c9959d56495",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9e526a28-1b0c-4fbc-8609-1762be56c0dd",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "7cfd4d5e-7be6-4f55-8225-9c9959d56495",
                                  "9e526a28-1b0c-4fbc-8609-1762be56c0dd"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 26,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "b44b414d-a61e-46ff-9309-d216d7725513",
                            "title": "`y` is an already-fulfilled promise for a synchronously-fulfilled one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "710dd0d7-3960-43ec-a2c3-675d4f310496",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "cf9b8429-1cb3-4cb5-a7b5-e1aa719e7556",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c321fcc1-870b-4fc4-920c-6605cfb3a826",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "cf9b8429-1cb3-4cb5-a7b5-e1aa719e7556",
                                  "c321fcc1-870b-4fc4-920c-6605cfb3a826"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "8ca43b40-0eaa-444f-bffa-8a49cb8d2087",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "171f0b38-b426-426b-a117-fb2c074ea15e",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "907bd8b8-b729-4876-902b-5004fbff2800",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "171f0b38-b426-426b-a117-fb2c074ea15e",
                                  "907bd8b8-b729-4876-902b-5004fbff2800"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "54c2bc86-d056-4167-b971-53ae7563df6c",
                            "title": "`y` is an already-fulfilled promise for a thenable that tries to fulfill twice",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "e3dceb77-970b-45ca-86bb-f3f32d04cf36",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4cdd9968-6862-487e-bb8b-14fe6fd1e6dc",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f40a1356-24a2-43a9-b6a2-fd40411cebe1",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "4cdd9968-6862-487e-bb8b-14fe6fd1e6dc",
                                  "f40a1356-24a2-43a9-b6a2-fd40411cebe1"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "318324ea-3d10-420c-804b-da9b820b4e08",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "bf8a97e0-3864-4952-b2fe-a33c3410eddb",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2ed4be80-513a-4d98-8b0a-c4ca44e34978",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "bf8a97e0-3864-4952-b2fe-a33c3410eddb",
                                  "2ed4be80-513a-4d98-8b0a-c4ca44e34978"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "d72b21b6-460d-4b4b-ace1-5ded0615fc3f",
                            "title": "`y` is an already-fulfilled promise for a thenable that fulfills but then throws",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "9bd08697-b738-477b-a8c8-57bc374fd9b8",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6abc27f3-668b-48cc-bf00-2ea97ccfe525",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "09955016-dad6-48d8-bd2b-261a0dbcb673",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "6abc27f3-668b-48cc-bf00-2ea97ccfe525",
                                  "09955016-dad6-48d8-bd2b-261a0dbcb673"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "f0642508-aaa8-41b1-9455-c3ac3c4d5764",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "868f553e-7c70-44a0-b94c-14e6059166c2",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9d8ef1ff-0854-4407-920d-c86a2e489e3d",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "868f553e-7c70-44a0-b94c-14e6059166c2",
                                  "9d8ef1ff-0854-4407-920d-c86a2e489e3d"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "d37de427-8324-40b5-90c1-183b27bbf1ae",
                            "title": "`y` is an already-fulfilled promise for an already-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "ee03eb80-3231-4ac9-bc59-8067392abae1",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "80fdf728-1232-4403-b3e7-0f8f425cd754",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2258309f-e43e-430c-a89b-761cd1c2ac4e",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "80fdf728-1232-4403-b3e7-0f8f425cd754",
                                  "2258309f-e43e-430c-a89b-761cd1c2ac4e"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "efbabcd4-da26-460c-8792-b00b70334520",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "64edcdff-1199-462b-87fc-7af8b7ead3bb",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "552bdd1c-bc5a-4173-a315-c663b46317da",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "64edcdff-1199-462b-87fc-7af8b7ead3bb",
                                  "552bdd1c-bc5a-4173-a315-c663b46317da"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 19,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "a6f73330-2694-4cbe-9629-44bf840448d4",
                            "title": "`y` is an already-fulfilled promise for an eventually-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "fd500804-a641-4fb7-82e8-5cc47f18ef43",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "bc93f2aa-59dc-42e5-b454-d1db62188c1f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "75749505-3070-4558-9bb9-afca063b5767",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "bc93f2aa-59dc-42e5-b454-d1db62188c1f",
                                  "75749505-3070-4558-9bb9-afca063b5767"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 119,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "20ad7c27-f548-45a1-8266-b671801acc35",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ea0a744e-866a-40de-ad14-effbe2de20af",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5413b44f-5c0a-4bbb-af5e-42a54d2d5371",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ea0a744e-866a-40de-ad14-effbe2de20af",
                                  "5413b44f-5c0a-4bbb-af5e-42a54d2d5371"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 120,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "c594e7c2-a5ca-4acb-bbb6-3089ba43707f",
                            "title": "`y` is an already-fulfilled promise for a synchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "d971c6fa-0ed7-489a-a95c-33bee7125506",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "358d5fa6-932d-45aa-9d5d-d988bd820b5f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "db0faab1-a374-4eb2-8179-b0b55435a8a8",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "358d5fa6-932d-45aa-9d5d-d988bd820b5f",
                                  "db0faab1-a374-4eb2-8179-b0b55435a8a8"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "b5c3b703-7562-47bc-9546-45bdc58ff101",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ad78b1e0-3187-41ea-a7e5-bebe0f881e40",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e1f686fa-ae50-4e77-ab10-780a3878cbdc",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ad78b1e0-3187-41ea-a7e5-bebe0f881e40",
                                  "e1f686fa-ae50-4e77-ab10-780a3878cbdc"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 19,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "874229a7-b100-4a93-836b-39601f216ca5",
                            "title": "`y` is an already-fulfilled promise for an asynchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "30145a0a-64e5-4144-8ae9-33caa7203bcf",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "85d4466b-5636-4a85-8684-430ddb297edc",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "aa0a0531-bf77-4c29-8c18-0048d97b797c",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "85d4466b-5636-4a85-8684-430ddb297edc",
                                  "aa0a0531-bf77-4c29-8c18-0048d97b797c"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 21,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "b0dd597a-7860-48fc-8f1d-6446eff30492",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0ac3c9e9-7984-48a1-b6f3-24e26888f1b2",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "01bfd5a3-e7ab-4aaa-b26c-c09a131f2b12",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "0ac3c9e9-7984-48a1-b6f3-24e26888f1b2",
                                  "01bfd5a3-e7ab-4aaa-b26c-c09a131f2b12"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 28,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "88f83109-d776-4793-b40f-9b18e2fd396c",
                            "title": "`y` is an already-fulfilled promise for a synchronously-rejected one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "ce448a05-4468-4e1d-9af3-dc1d4f2b2111",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "801cfa6d-fd22-4e05-9ae7-7ef9e6ea9b7b",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2b0cc296-bd8e-44cf-9295-5ae65860e62e",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "801cfa6d-fd22-4e05-9ae7-7ef9e6ea9b7b",
                                  "2b0cc296-bd8e-44cf-9295-5ae65860e62e"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "a742796d-b1db-442d-8d31-df8f33a3807a",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1c429eba-f9d5-4c8d-b0b6-e1b72a41cfad",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "df8b2acf-75f5-4fd6-b8c7-0d40d2423a9b",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "1c429eba-f9d5-4c8d-b0b6-e1b72a41cfad",
                                  "df8b2acf-75f5-4fd6-b8c7-0d40d2423a9b"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "50e71527-c469-4938-bf2e-74f042e742e9",
                            "title": "`y` is an already-fulfilled promise for a thenable that immediately throws in `then`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "922081b2-e441-4531-aa1a-fb40f1cecf4b",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "92353dcc-c88b-446d-acb9-093574179bd8",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "06a0a06a-a53c-4137-a138-00f36487e229",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "92353dcc-c88b-446d-acb9-093574179bd8",
                                  "06a0a06a-a53c-4137-a138-00f36487e229"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "3e712970-65ad-4694-9c0f-88ea3134b713",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6988b432-44df-4471-8561-beceffd03a0c",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "bebc61d5-2b3f-4836-8297-1e29fc98ea1d",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "6988b432-44df-4471-8561-beceffd03a0c",
                                  "bebc61d5-2b3f-4836-8297-1e29fc98ea1d"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "2978c976-8778-40a6-80c4-98457e50fa2e",
                            "title": "`y` is an already-fulfilled promise for an object with a throwing `then` accessor",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "7a95fcc0-3558-4886-9b8f-6bb1369c2a90",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "99a23b40-a89f-4c4e-8d8f-ad9dd45f3110",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a261c9a9-9eeb-468f-b526-f4435c613f59",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "99a23b40-a89f-4c4e-8d8f-ad9dd45f3110",
                                  "a261c9a9-9eeb-468f-b526-f4435c613f59"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "a790dc87-a05d-46eb-934e-36f232d188fa",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1d0fb538-4291-4491-b99c-cd79144ed4a1",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "21dfdb70-b1f9-48a3-bbda-c6195093b401",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "1d0fb538-4291-4491-b99c-cd79144ed4a1",
                                  "21dfdb70-b1f9-48a3-bbda-c6195093b401"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "74801906-50ed-404f-b6bd-d91b2c26f25d",
                            "title": "`y` is an already-fulfilled promise for an already-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "6905ee88-0a62-4302-91f8-3f46342e3c0c",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8e2aa69b-cc1d-4f0b-aa1e-c76a907b9aa2",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4f1eec91-f905-427d-a359-9d4a1a5e9df5",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "8e2aa69b-cc1d-4f0b-aa1e-c76a907b9aa2",
                                  "4f1eec91-f905-427d-a359-9d4a1a5e9df5"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "4af9290c-cc75-482f-a18e-48479729e033",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9c6ffe73-68b5-42bb-b997-f25f3b57896d",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "cf5efd5c-e0a0-4f22-9fa2-2c1ada8a132f",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "9c6ffe73-68b5-42bb-b997-f25f3b57896d",
                                  "cf5efd5c-e0a0-4f22-9fa2-2c1ada8a132f"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "812b39a8-c552-4842-b8e5-170f12046622",
                            "title": "`y` is an already-fulfilled promise for an eventually-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "97a6999f-cd7b-4399-a74c-f1897f68c0a3",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "cfb082b5-3f8c-460d-a34f-55c4828934af",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "eca4361c-f4a6-4483-bd91-048e22541d2b",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "cfb082b5-3f8c-460d-a34f-55c4828934af",
                                  "eca4361c-f4a6-4483-bd91-048e22541d2b"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 121,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "464a893f-e4b4-4410-b40b-b767d26dd347",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f01bba21-e947-4fea-bf93-137f7f5f362c",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 57,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "091c8a58-8151-40dc-85d6-d0e780cc2cb1",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "f01bba21-e947-4fea-bf93-137f7f5f362c",
                                  "091c8a58-8151-40dc-85d6-d0e780cc2cb1"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 117,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "4f533c78-2cff-4885-80c8-a697937cdd97",
                            "title": "`y` is an eventually-fulfilled promise for a synchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "dfd87de6-df45-4091-bd26-7cad5cd42b94",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 58,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "73659139-9f11-4f2c-acf2-2bb392af9623",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "52c9ce20-14c0-4e4d-812b-3850aca69df5",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "73659139-9f11-4f2c-acf2-2bb392af9623",
                                  "52c9ce20-14c0-4e4d-812b-3850aca69df5"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 117,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "3039bce5-49cc-4301-b7a4-d452f0a56ddd",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "fc03aa07-bd36-4d0a-a6f9-5e5a61592c7e",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7fc2de80-dbb8-408b-b33a-98b1ebd9cfb2",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "fc03aa07-bd36-4d0a-a6f9-5e5a61592c7e",
                                  "7fc2de80-dbb8-408b-b33a-98b1ebd9cfb2"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 124,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "b0538535-89e4-4275-b5a3-6b554362633d",
                            "title": "`y` is an eventually-fulfilled promise for an asynchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "919dd6c1-608e-4b3a-926b-511fd86daa7e",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "717b487f-c589-4fee-9b53-7228b26d00f7",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0500ab9c-e43d-4bf6-87b8-c462936c4e83",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "717b487f-c589-4fee-9b53-7228b26d00f7",
                                  "0500ab9c-e43d-4bf6-87b8-c462936c4e83"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 120,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "e7a5a69a-3517-4015-92f2-33110c5cbb64",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a22984e6-0b76-4413-9bc3-021c15621c53",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "dc2f8492-a266-443d-a822-a6648d32a0b1",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "a22984e6-0b76-4413-9bc3-021c15621c53",
                                  "dc2f8492-a266-443d-a822-a6648d32a0b1"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 125,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "8681ce0b-f236-42d3-a917-1fa57809956e",
                            "title": "`y` is an eventually-fulfilled promise for a synchronously-fulfilled one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "5a5f8ea3-4c58-41d1-9976-84924ec42594",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5e2ad972-b14e-44b5-897d-9840cd2e018e",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e0c291f7-06d0-4491-931f-1e5b11ff2d1a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "5e2ad972-b14e-44b5-897d-9840cd2e018e",
                                  "e0c291f7-06d0-4491-931f-1e5b11ff2d1a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 120,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "3ed4ca42-0ac2-4d6c-8694-97832807af5a",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2ee417ca-28a5-496f-beac-778e978f27e7",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6a7c98e3-0df8-4bac-8251-f1512d1a0afe",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "2ee417ca-28a5-496f-beac-778e978f27e7",
                                  "6a7c98e3-0df8-4bac-8251-f1512d1a0afe"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 124,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "21dcefba-e766-4486-8d98-dd5a8ff25be4",
                            "title": "`y` is an eventually-fulfilled promise for a thenable that tries to fulfill twice",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "a11e1dac-df9e-4869-b6a9-0eb3e1555573",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "39686f27-d8b9-4ac4-834b-140031fc4692",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "425bdc8f-b35d-444b-93ba-888d31ee79af",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "39686f27-d8b9-4ac4-834b-140031fc4692",
                                  "425bdc8f-b35d-444b-93ba-888d31ee79af"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 122,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "7292be36-a892-4e3c-a6bb-a6a66421bd05",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ec023d5b-e31a-47dd-b036-6f01fa5bbe41",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 64,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c2f9d9b2-4993-4b02-ba39-218c9bb547a8",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ec023d5b-e31a-47dd-b036-6f01fa5bbe41",
                                  "c2f9d9b2-4993-4b02-ba39-218c9bb547a8"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 125,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "f057b21c-65a6-46f9-9e0b-fe6d86833ed0",
                            "title": "`y` is an eventually-fulfilled promise for a thenable that fulfills but then throws",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "d00b0372-ecdd-4a22-a4dd-6606cbd803cc",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c1ebfc91-92a5-4099-a921-d45d9f943db5",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 58,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5f2769ca-b93c-4101-ae65-611e2a1ace62",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "c1ebfc91-92a5-4099-a921-d45d9f943db5",
                                  "5f2769ca-b93c-4101-ae65-611e2a1ace62"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 118,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "3d7cdd59-e7a2-4be6-8bd0-8717e105bbde",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "73593e53-4e59-42a7-a3bd-adc2262fb8a3",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "15bf0928-6368-4926-8481-63fec34934ec",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "73593e53-4e59-42a7-a3bd-adc2262fb8a3",
                                  "15bf0928-6368-4926-8481-63fec34934ec"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 122,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "8f601b6d-290c-488c-85d1-0df72e40df7f",
                            "title": "`y` is an eventually-fulfilled promise for an already-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "d219fe36-a5fd-4a63-8393-3a8b440f7a44",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e2a7f6f8-f35a-4c91-b435-a169d4d615cf",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9ee0839d-417c-4fc8-ba05-5c4ab4899fb4",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "e2a7f6f8-f35a-4c91-b435-a169d4d615cf",
                                  "9ee0839d-417c-4fc8-ba05-5c4ab4899fb4"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 125,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "c329004d-797f-4773-b436-4941273575fe",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4287d408-38bc-43b3-add0-2a804988cfbb",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 65,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "72f3f43f-9df1-4a70-8bcf-fb404c7cc4f2",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "4287d408-38bc-43b3-add0-2a804988cfbb",
                                  "72f3f43f-9df1-4a70-8bcf-fb404c7cc4f2"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 127,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "de63ecdd-c4b6-4478-91ef-5d58faedf121",
                            "title": "`y` is an eventually-fulfilled promise for an eventually-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "909005b7-8767-4d87-9654-9df8f7006159",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9bdf8d4a-af1d-44ba-8e28-b813af9095ed",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "18c60239-95f1-4288-ac35-73b60dfca47e",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "9bdf8d4a-af1d-44ba-8e28-b813af9095ed",
                                  "18c60239-95f1-4288-ac35-73b60dfca47e"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 122,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "bd2483fe-533a-4851-a154-ac2dbd28233e",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8da8599b-cca0-496c-b871-0586053c4b1b",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7563524b-73f8-44e3-a719-8f2f61dcb067",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "8da8599b-cca0-496c-b871-0586053c4b1b",
                                  "7563524b-73f8-44e3-a719-8f2f61dcb067"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 124,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "42af8753-7a37-4665-8777-0204b85f56e7",
                            "title": "`y` is an eventually-fulfilled promise for a synchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "2342ebf7-6980-49ba-9156-b17e62a0e80e",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "eb06bb15-5451-4348-a4f8-3a89a17a2032",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "bcd2570e-3d66-464b-a63f-e6a1297c20ac",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "eb06bb15-5451-4348-a4f8-3a89a17a2032",
                                  "bcd2570e-3d66-464b-a63f-e6a1297c20ac"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 119,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "126ef2d5-160f-41df-9c37-d89e13176cb7",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3c646799-75d3-4877-b570-5dfa98752cf9",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0598f78a-04ef-43b1-a751-772891d869c4",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "3c646799-75d3-4877-b570-5dfa98752cf9",
                                  "0598f78a-04ef-43b1-a751-772891d869c4"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 122,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "b028a89e-78d4-49b8-81e8-1e4cd14f5fce",
                            "title": "`y` is an eventually-fulfilled promise for an asynchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "16274501-5312-463c-a7ad-acfa4185b1c1",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4f9e0249-0cc6-42f8-81af-6df5b50bc599",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "cfbf07c2-1011-4a43-aad9-2aecc8f99116",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "4f9e0249-0cc6-42f8-81af-6df5b50bc599",
                                  "cfbf07c2-1011-4a43-aad9-2aecc8f99116"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 123,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "df65e898-1b0d-4f9d-bc9e-90e4f9b83312",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "07eda60f-9e09-4cf1-b87c-b22010d2a164",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 65,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "12f2d966-cd19-46cb-ad32-b4a9f03b6e8c",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "07eda60f-9e09-4cf1-b87c-b22010d2a164",
                                  "12f2d966-cd19-46cb-ad32-b4a9f03b6e8c"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 128,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "57d3b10e-a6c9-45a6-ab36-516d3629f2ff",
                            "title": "`y` is an eventually-fulfilled promise for a synchronously-rejected one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "d7e1ba0f-5e52-4022-9b9a-674b847bb940",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e945de94-84d5-442b-a5a1-e15d8104a744",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 58,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5d23ecc9-3a0c-4935-904b-1f92c6f15978",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "e945de94-84d5-442b-a5a1-e15d8104a744",
                                  "5d23ecc9-3a0c-4935-904b-1f92c6f15978"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 118,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "ab32e7e9-c8ff-49db-a951-6cd8bed9d470",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "12d0ae96-c7e1-407b-baa7-c4832d2a9668",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e3f6f6ce-68fa-40f6-aaf0-5cf6ea3b70a4",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "12d0ae96-c7e1-407b-baa7-c4832d2a9668",
                                  "e3f6f6ce-68fa-40f6-aaf0-5cf6ea3b70a4"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 121,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "bbf4ddf9-c06c-4d8a-a62f-15c037c86757",
                            "title": "`y` is an eventually-fulfilled promise for a thenable that immediately throws in `then`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "fcd7d798-c0f6-4776-9cb2-83454c09f9f0",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3e2715ff-72c6-4600-b14c-88c2d73df21a",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "41179c29-dc74-4977-b523-7a8cee6e33b6",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "3e2715ff-72c6-4600-b14c-88c2d73df21a",
                                  "41179c29-dc74-4977-b523-7a8cee6e33b6"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 122,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "e578eeb0-8e18-4c6b-bf33-f8b06616b1c6",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "bd08d0f9-99e0-41b7-b402-64d60b5cfb74",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8b93bea9-94a4-4cbb-8633-c19955b4227a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "bd08d0f9-99e0-41b7-b402-64d60b5cfb74",
                                  "8b93bea9-94a4-4cbb-8633-c19955b4227a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 126,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "5d1a4419-9496-4cc6-a520-8a35a1792a1a",
                            "title": "`y` is an eventually-fulfilled promise for an object with a throwing `then` accessor",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "d945d68c-d16e-4804-b8cb-7c1a0df9c9d8",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3d43e612-6949-4eea-b0b5-16829b172d06",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ededf574-dd33-4388-b639-71f6213b6c2b",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "3d43e612-6949-4eea-b0b5-16829b172d06",
                                  "ededf574-dd33-4388-b639-71f6213b6c2b"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 121,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "eb95bc06-e545-463c-8d4f-980647a7753b",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c8a5c04c-6814-4f2f-af73-43be55b4407f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7b075b1c-e90b-4d9e-8747-3844beb4c763",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "c8a5c04c-6814-4f2f-af73-43be55b4407f",
                                  "7b075b1c-e90b-4d9e-8747-3844beb4c763"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 122,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "92a404c7-81e0-43c9-b189-c48d0c72e2f1",
                            "title": "`y` is an eventually-fulfilled promise for an already-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "0c9cc8fc-0c28-49a7-beba-8fef32e81602",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "fc2bb2ae-2e78-432d-9d79-9cbc6f9d575c",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a573d316-e1b2-4077-b7a3-1163f8ca7abb",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "fc2bb2ae-2e78-432d-9d79-9cbc6f9d575c",
                                  "a573d316-e1b2-4077-b7a3-1163f8ca7abb"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 122,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "18c2afb2-7092-4215-b2b7-ebd8dabb753a",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 64,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "61cde2c9-93be-46c2-9f55-bf6c8901c67e",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 66,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "10004080-0360-46df-8e26-4407dc508513",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "61cde2c9-93be-46c2-9f55-bf6c8901c67e",
                                  "10004080-0360-46df-8e26-4407dc508513"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 130,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "a386e29a-84ed-41ed-9c5e-f0fd02b70655",
                            "title": "`y` is an eventually-fulfilled promise for an eventually-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "ca33d6c4-ecaa-45f1-abc8-1b46ba0d0f12",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 76,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "94ee18bf-a39d-4117-860a-044209771617",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "86fe5f67-cde5-4699-9dea-d7a4c90cee80",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "94ee18bf-a39d-4117-860a-044209771617",
                                  "86fe5f67-cde5-4699-9dea-d7a4c90cee80"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 139,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "e8b9c206-6f54-453f-ba4a-948e255ad374",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 64,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "bfde0904-2667-41ca-ad22-2141b2de69b9",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 64,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a15cf6dd-0a52-47a2-9928-b034d48039b6",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "bfde0904-2667-41ca-ad22-2141b2de69b9",
                                  "a15cf6dd-0a52-47a2-9928-b034d48039b6"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 128,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "c3c94cf6-d66e-40d6-a821-342aca806cf9",
                    "title": "2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                      {
                        "uuid": "0e4a0a65-537a-439c-9ed3-5d17c500e51d",
                        "title": "`r` is `undefined`",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "9a619042-9ae4-4348-823f-36dc4001c313",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `undefined` `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "cb7ff1ef-d11c-4c4a-a409-015983a58401",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `undefined` `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "29fbf719-7419-43e0-a1bd-180153720710",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "cb7ff1ef-d11c-4c4a-a409-015983a58401",
                              "29fbf719-7419-43e0-a1bd-180153720710"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "6df14e7a-4675-4d4e-8632-a6491f6829d6",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `undefined` `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "974cdd58-fbd0-40e2-a170-2450e59a72da",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `undefined` `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "a2a60c69-05e9-4091-b0d8-985483b38e94",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "974cdd58-fbd0-40e2-a170-2450e59a72da",
                              "a2a60c69-05e9-4091-b0d8-985483b38e94"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "a135551d-6a04-44b5-ab4c-52226696d1da",
                        "title": "`r` is `null`",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "01a192e1-338b-409c-9bd7-a09640089b6b",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `null` `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "164c47c0-b35e-4fcd-999d-9472c4e13c97",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `null` `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "add00028-b451-4310-9b0d-3966f3e7c98d",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "164c47c0-b35e-4fcd-999d-9472c4e13c97",
                              "add00028-b451-4310-9b0d-3966f3e7c98d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "3dd98aa2-f4a3-4d38-93bb-c917aeba8fbd",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `null` `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 9,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "a81c986f-fda5-4d1b-8e78-adae5c9af6f2",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `null` `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "ae5bb2d9-001f-49d8-b41a-8cc23ab57b63",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "a81c986f-fda5-4d1b-8e78-adae5c9af6f2",
                              "ae5bb2d9-001f-49d8-b41a-8cc23ab57b63"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 16,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "ba9f909d-ef6e-42e1-bd3d-bbe7bf5b1e64",
                        "title": "`r` is `false`",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "6dab13de-4ee6-44f6-a093-a1183109dd6b",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `false` `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "be3b0122-a783-45a7-aa1f-d776a07597d7",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `false` `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "f6b59a2d-87f4-4c21-8479-4b97f290a42d",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "be3b0122-a783-45a7-aa1f-d776a07597d7",
                              "f6b59a2d-87f4-4c21-8479-4b97f290a42d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "19c6f5f4-7036-4633-bb88-b85b01cba0d4",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `false` `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "6bb3da28-b002-4232-92c6-1ad2b86dea19",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `false` `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "0e591857-1370-4540-bdf3-9a4027c9cec5",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "6bb3da28-b002-4232-92c6-1ad2b86dea19",
                              "0e591857-1370-4540-bdf3-9a4027c9cec5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 16,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "27b61b5a-88c4-449b-8a59-625baba5c9f1",
                        "title": "`r` is `0`",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "35b41cb5-d8cb-4ed2-b7d4-177fa2275c74",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `0` `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "10db25c8-c0ae-48fc-bc99-f683f77ba8d6",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `0` `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "70549c93-b167-4c8a-b0c7-8ea282cbe89d",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "10db25c8-c0ae-48fc-bc99-f683f77ba8d6",
                              "70549c93-b167-4c8a-b0c7-8ea282cbe89d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "b28174b8-ff09-49ad-9ac3-649534696c07",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `0` `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 9,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "376dea7a-7c32-4b26-99f1-1dc77277d18e",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `0` `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "25ee65d1-115f-4ca8-b81e-e9e24a165e5d",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "376dea7a-7c32-4b26-99f1-1dc77277d18e",
                              "25ee65d1-115f-4ca8-b81e-e9e24a165e5d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 17,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "bf116048-ceb1-4f7a-86a1-02d8ac163086",
                        "title": "`r` is an error",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "91586d76-3ec4-43fc-bdfc-30fd3de65cc0",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an error `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "480a408d-cced-4327-93c4-92697b6133ad",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an error `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "f3e6dea0-62fc-42b6-850d-610707985d7a",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "480a408d-cced-4327-93c4-92697b6133ad",
                              "f3e6dea0-62fc-42b6-850d-610707985d7a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "ff9a6753-37d0-478a-9d0b-09c07bdfa6b1",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an error `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "3c7a8f4a-41ad-49ea-88b9-407032c2ab81",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an error `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "8a77ab98-6ae5-45fa-9207-113a48283fe8",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "3c7a8f4a-41ad-49ea-88b9-407032c2ab81",
                              "8a77ab98-6ae5-45fa-9207-113a48283fe8"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "d0ca8d5c-cc76-4ae0-88aa-dab6e8a8cd3d",
                        "title": "`r` is an error without a stack",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "46cdbede-04b8-4246-97e9-b10a06a36cbf",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an error without a stack `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "c385adc6-0ca0-4366-90f9-802f15f23c08",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an error without a stack `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "a3f468d6-1781-49f0-9a51-a55fdbc020e8",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "c385adc6-0ca0-4366-90f9-802f15f23c08",
                              "a3f468d6-1781-49f0-9a51-a55fdbc020e8"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "6e08a562-ede0-4bf4-b25e-c323fd80ec8a",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an error without a stack `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "4ccdd83c-c1e3-4747-a737-de37264871eb",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an error without a stack `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "fc931665-29ca-495c-8871-346b2cb9417f",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "4ccdd83c-c1e3-4747-a737-de37264871eb",
                              "fc931665-29ca-495c-8871-346b2cb9417f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 16,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "52d2be67-4420-4488-8253-059a5267cc64",
                        "title": "`r` is a date",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "1cf947eb-e86b-4d4a-b6c6-291c7cdef87d",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a date `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "83966265-1e47-41c4-9c46-f0c33ed7e617",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a date `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "36f7dea2-65fb-4ab1-af11-1ea183ad41b9",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "83966265-1e47-41c4-9c46-f0c33ed7e617",
                              "36f7dea2-65fb-4ab1-af11-1ea183ad41b9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "cc798785-a225-4f13-a811-8486949882d8",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a date `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "3f32ee95-e92d-4a10-ab5d-063798f9210b",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a date `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "153021a9-1c21-4402-84ec-3ad90ee08639",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "3f32ee95-e92d-4a10-ab5d-063798f9210b",
                              "153021a9-1c21-4402-84ec-3ad90ee08639"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "937db394-74b7-4f27-916c-e9a208107a2f",
                        "title": "`r` is an object",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "0c4c9be8-73f8-4102-a5cc-2a56d6ad95fe",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an object `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "c87d8873-871b-4fb5-aab5-24152d4cf090",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an object `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "3b952405-937a-4443-b98a-b82bb763cf40",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "c87d8873-871b-4fb5-aab5-24152d4cf090",
                              "3b952405-937a-4443-b98a-b82bb763cf40"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "38475d36-6189-4db9-aad0-ef347795ff41",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an object `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "e8aa2e16-a6eb-4e4f-8fe3-a9081bf17cfd",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an object `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "84492f50-cc36-4ad7-a773-6a4f60f5e1d2",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "e8aa2e16-a6eb-4e4f-8fe3-a9081bf17cfd",
                              "84492f50-cc36-4ad7-a773-6a4f60f5e1d2"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "34c423df-e077-430c-8af3-8e9685421c28",
                        "title": "`r` is an always-pending thenable",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "becbc21d-a295-4016-ac25-02ef94b7de30",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an always-pending thenable `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "cf00dfe7-d414-49ed-8687-3a7652342536",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an always-pending thenable `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "b787d97b-a1d5-46c4-9a5f-08cc38671669",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "cf00dfe7-d414-49ed-8687-3a7652342536",
                              "b787d97b-a1d5-46c4-9a5f-08cc38671669"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "4cbd9e1f-943e-4583-a43e-2e85507ddc8b",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an always-pending thenable `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "d83c5659-9585-4a73-872e-001ec3b92030",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an always-pending thenable `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "f4fcc0f5-f017-42bc-8ed9-2ae8f6f4a9fe",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "d83c5659-9585-4a73-872e-001ec3b92030",
                              "f4fcc0f5-f017-42bc-8ed9-2ae8f6f4a9fe"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "4aa2e00e-60c8-47d4-b90d-88e4f4218f05",
                        "title": "`r` is a fulfilled promise",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "70ea8639-22b6-413d-9c14-94a38f7cd508",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a fulfilled promise `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "061a4537-09db-46b8-a3fa-bd4357945a12",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a fulfilled promise `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "532e7415-acfa-4efc-a7a4-8564fff35453",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "061a4537-09db-46b8-a3fa-bd4357945a12",
                              "532e7415-acfa-4efc-a7a4-8564fff35453"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "a669b06b-6998-4022-8015-80ca22f1a429",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a fulfilled promise `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "8879c127-dbe0-441f-87c3-1b67bf5a702c",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a fulfilled promise `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "3437e867-a628-4dac-855f-8372b9515c7a",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "8879c127-dbe0-441f-87c3-1b67bf5a702c",
                              "3437e867-a628-4dac-855f-8372b9515c7a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "92bde31f-29b9-4a06-9b0c-7484e9f606d2",
                        "title": "`r` is a rejected promise",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "d72db00c-8e24-49f4-bcce-0b7c64b3d34e",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a rejected promise `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "d4219b82-3709-4a41-874c-ef9febb62227",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a rejected promise `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "8f1f4109-b179-4e6d-b8c7-404ef05b92cb",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "d4219b82-3709-4a41-874c-ef9febb62227",
                              "8f1f4109-b179-4e6d-b8c7-404ef05b92cb"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "318e2ff2-96ff-4461-963e-db28b0977d57",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a rejected promise `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "e84c3a93-e306-42c4-a055-d1dcbbcb1221",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a rejected promise `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "0aa19127-232f-465b-9490-61da26776ac5",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "e84c3a93-e306-42c4-a055-d1dcbbcb1221",
                              "0aa19127-232f-465b-9490-61da26776ac5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "ae59f584-f920-4297-9699-c829eb543c78",
                    "title": "2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored.",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                      {
                        "uuid": "7a45eccb-5c28-4551-8b1d-5867ff38ebe5",
                        "title": "calling `resolvePromise` then `rejectPromise`, both synchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` then `rejectPromise`, both synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "c31a3b5d-d2de-4d95-8291-df7b2ea02836",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` then `rejectPromise`, both synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "32d08243-ac48-4091-8f2a-0a618e40655b",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "c31a3b5d-d2de-4d95-8291-df7b2ea02836",
                          "32d08243-ac48-4091-8f2a-0a618e40655b"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 10,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "16ce397e-021f-4889-a888-901a3667881d",
                        "title": "calling `resolvePromise` synchronously then `rejectPromise` asynchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` synchronously then `rejectPromise` asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "701cc9ab-17d6-4762-95ff-9825962b7c4b",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` synchronously then `rejectPromise` asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "4e34d7c8-5640-4f0d-bf84-55a25479665d",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "701cc9ab-17d6-4762-95ff-9825962b7c4b",
                          "4e34d7c8-5640-4f0d-bf84-55a25479665d"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 10,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "b51c5297-50d1-4945-ada8-643444bcead2",
                        "title": "calling `resolvePromise` then `rejectPromise`, both asynchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` then `rejectPromise`, both asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 7,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "44c09ac6-bdc6-45de-8c84-90daffb41c88",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` then `rejectPromise`, both asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 7,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "81225686-63aa-43d0-9862-4184654bb845",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "44c09ac6-bdc6-45de-8c84-90daffb41c88",
                          "81225686-63aa-43d0-9862-4184654bb845"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 14,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "a2806a4d-ac2d-4903-b386-22525655627c",
                        "title": "calling `resolvePromise` with an asynchronously-fulfilled promise, then calling `rejectPromise`, both synchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` with an asynchronously-fulfilled promise, then calling `rejectPromise`, both synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 62,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "0aed8d2d-cf6a-4d6f-b3af-e361a95fa7c9",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` with an asynchronously-fulfilled promise, then calling `rejectPromise`, both synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 60,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "36a805aa-fc41-41d5-856c-6ab9c0a2eee1",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "0aed8d2d-cf6a-4d6f-b3af-e361a95fa7c9",
                          "36a805aa-fc41-41d5-856c-6ab9c0a2eee1"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 122,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "dda1e9d3-75f4-4884-a7d6-2a4d43e51a1d",
                        "title": "calling `resolvePromise` with an asynchronously-rejected promise, then calling `rejectPromise`, both synchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` with an asynchronously-rejected promise, then calling `rejectPromise`, both synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 60,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "daf3ad85-a4ea-4fa3-835a-d34131c97acc",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` with an asynchronously-rejected promise, then calling `rejectPromise`, both synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 58,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "bc82ba06-379c-4e17-9471-44c18844b027",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "daf3ad85-a4ea-4fa3-835a-d34131c97acc",
                          "bc82ba06-379c-4e17-9471-44c18844b027"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 118,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "81768826-d75b-493c-906b-1c6e3972abf6",
                        "title": "calling `rejectPromise` then `resolvePromise`, both synchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` then `resolvePromise`, both synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 7,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "aaf3246f-0e6e-46a6-bab2-ce0be2185bb2",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` then `resolvePromise`, both synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "b10ab611-8687-42a7-aced-5d4c88df2309",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "aaf3246f-0e6e-46a6-bab2-ce0be2185bb2",
                          "b10ab611-8687-42a7-aced-5d4c88df2309"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 12,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "42c06edc-2d32-4fb0-934b-2c7a46cd98c4",
                        "title": "calling `rejectPromise` synchronously then `resolvePromise` asynchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` synchronously then `resolvePromise` asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "38eebf5d-5473-4492-b45c-05bb6f53bb55",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` synchronously then `resolvePromise` asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "afaa7ed2-a40a-4129-8335-edde9e022bbd",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "38eebf5d-5473-4492-b45c-05bb6f53bb55",
                          "afaa7ed2-a40a-4129-8335-edde9e022bbd"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 11,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "d28f29df-29b6-49aa-bd65-05831633932f",
                        "title": "calling `rejectPromise` then `resolvePromise`, both asynchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` then `resolvePromise`, both asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "50bd48fe-cd2d-4c27-bd6a-8469fc45ca6d",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` then `resolvePromise`, both asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "7d65b395-3b7c-4b13-88a6-0d974108b571",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "50bd48fe-cd2d-4c27-bd6a-8469fc45ca6d",
                          "7d65b395-3b7c-4b13-88a6-0d974108b571"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 12,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "31d6b172-4974-467a-be1a-82de0cdf8611",
                        "title": "calling `resolvePromise` twice synchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` twice synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "f8725d40-e7d6-4108-be99-91ae74bdde98",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` twice synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "7c6b1b73-6b4c-47c3-bda6-bbb2ce906247",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "f8725d40-e7d6-4108-be99-91ae74bdde98",
                          "7c6b1b73-6b4c-47c3-bda6-bbb2ce906247"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 11,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "5bd633c2-b52c-4d0e-a4f9-a3a21f3b246d",
                        "title": "calling `resolvePromise` twice, first synchronously then asynchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` twice, first synchronously then asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "6ba9e272-4b64-4fb1-9c8b-232379743c53",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` twice, first synchronously then asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "0e58e954-975d-4363-a4a8-c086132e78ff",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "6ba9e272-4b64-4fb1-9c8b-232379743c53",
                          "0e58e954-975d-4363-a4a8-c086132e78ff"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 10,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "a09eb5d5-91ec-4500-b9e8-d84e89f4e0a7",
                        "title": "calling `resolvePromise` twice, both times asynchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` twice, both times asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 7,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "e87001e2-1cff-4241-9d51-510e8c4b2611",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` twice, both times asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "16afe664-773f-40ad-8559-64b958e5239d",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "e87001e2-1cff-4241-9d51-510e8c4b2611",
                          "16afe664-773f-40ad-8559-64b958e5239d"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 12,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "a1361d90-25e3-4f68-966e-8dfd4521295f",
                        "title": "calling `resolvePromise` with an asynchronously-fulfilled promise, then calling it again, both times synchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` with an asynchronously-fulfilled promise, then calling it again, both times synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 59,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "90f47632-4fc9-4619-9146-f5434086790c",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` with an asynchronously-fulfilled promise, then calling it again, both times synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 59,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "fa42e347-b26b-460e-b842-38d15c004ed2",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "90f47632-4fc9-4619-9146-f5434086790c",
                          "fa42e347-b26b-460e-b842-38d15c004ed2"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 118,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "28b24883-0aee-4349-ac93-7a652e2541b1",
                        "title": "calling `resolvePromise` with an asynchronously-rejected promise, then calling it again, both times synchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` with an asynchronously-rejected promise, then calling it again, both times synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 60,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "88eb9980-e72a-4e53-93ea-03576df11c95",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` with an asynchronously-rejected promise, then calling it again, both times synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 60,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "32441f37-dd07-4db4-9fa8-835b0b3431d7",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "88eb9980-e72a-4e53-93ea-03576df11c95",
                          "32441f37-dd07-4db4-9fa8-835b0b3431d7"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 120,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "0f82b9e3-6603-4e1c-bf2e-341f6da95489",
                        "title": "calling `rejectPromise` twice synchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` twice synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "f8a20c1f-6246-414f-9efa-d13d621b8148",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` twice synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "bae2242c-8871-4db6-834d-c2f6ec728f2d",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "f8a20c1f-6246-414f-9efa-d13d621b8148",
                          "bae2242c-8871-4db6-834d-c2f6ec728f2d"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 9,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "fba4d9f3-0551-4160-9933-a5c2c500ab21",
                        "title": "calling `rejectPromise` twice, first synchronously then asynchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` twice, first synchronously then asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "03307f42-1151-4a48-874b-d87c71aee114",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` twice, first synchronously then asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "5c9195ac-76c3-479e-8a48-30ac40098130",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "03307f42-1151-4a48-874b-d87c71aee114",
                          "5c9195ac-76c3-479e-8a48-30ac40098130"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 11,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "de0219b4-aaae-4fcb-8e04-774651f7dcd5",
                        "title": "calling `rejectPromise` twice, both times asynchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` twice, both times asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 7,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "e6c63f60-3d56-43b8-b907-bd925936e21e",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` twice, both times asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 7,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "bf54af0a-ccd4-4cbf-9e2b-0bb060e95736",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "e6c63f60-3d56-43b8-b907-bd925936e21e",
                          "bf54af0a-ccd4-4cbf-9e2b-0bb060e95736"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 14,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "a5d56cc6-59e8-444d-bfd7-f06911394df9",
                        "title": "saving and abusing `resolvePromise` and `rejectPromise`",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [
                          {
                            "title": "\"before each\" hook",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. saving and abusing `resolvePromise` and `rejectPromise` \"before each\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "code": "savedResolvePromise = null;\nsavedRejectPromise = null;",
                            "err": {},
                            "isRoot": false,
                            "uuid": "29ba8964-d520-4a37-8edd-35cbfe29ec6a",
                            "isHook": true,
                            "skipped": false
                          }
                        ],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. saving and abusing `resolvePromise` and `rejectPromise` via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 101,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "12aac462-eefb-47be-92e7-216625ed5fac",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. saving and abusing `resolvePromise` and `rejectPromise` via return from a rejected promise",
                            "timedOut": false,
                            "duration": 102,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "c0494d63-8f79-4308-9c3e-7df34e111430",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "12aac462-eefb-47be-92e7-216625ed5fac",
                          "c0494d63-8f79-4308-9c3e-7df34e111430"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 203,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "64a56cb1-7204-4573-b815-66f0b712b704",
                    "title": "2.3.3.3.4: If calling `then` throws an exception `e`,",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                      {
                        "uuid": "ae5a3191-c1d2-436c-8905-4c1b7dfb5821",
                        "title": "2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it.",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "f1d123c6-2679-4b88-ade4-a0caf7be4bd8",
                            "title": "`resolvePromise` was called with a non-thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `resolvePromise` was called with a non-thenable via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "37752f89-a063-4b15-901f-809792cab140",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `resolvePromise` was called with a non-thenable via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "3e3caf33-b4c5-40f6-8587-ef0ef78791c7",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "37752f89-a063-4b15-901f-809792cab140",
                              "3e3caf33-b4c5-40f6-8587-ef0ef78791c7"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "97c33e16-beb7-4c36-ae07-65e30d0d166c",
                            "title": "`resolvePromise` was called with an asynchronously-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `resolvePromise` was called with an asynchronously-fulfilled promise via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 61,
                                "state": "passed",
                                "speed": "medium",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "39365e0a-a972-4de0-b272-d1e4828859f8",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `resolvePromise` was called with an asynchronously-fulfilled promise via return from a rejected promise",
                                "timedOut": false,
                                "duration": 59,
                                "state": "passed",
                                "speed": "medium",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "e0f29fb8-ead8-4b7d-93a4-09caf86f79a4",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "39365e0a-a972-4de0-b272-d1e4828859f8",
                              "e0f29fb8-ead8-4b7d-93a4-09caf86f79a4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 120,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "db68c848-5d33-4f2f-9efb-1be8771022a7",
                            "title": "`resolvePromise` was called with an asynchronously-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `resolvePromise` was called with an asynchronously-rejected promise via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 59,
                                "state": "passed",
                                "speed": "medium",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "98360c39-2f06-49d6-a38e-f52adf1c6238",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `resolvePromise` was called with an asynchronously-rejected promise via return from a rejected promise",
                                "timedOut": false,
                                "duration": 62,
                                "state": "passed",
                                "speed": "medium",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "99a05733-a84a-4527-87d4-a957f7d08b76",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "98360c39-2f06-49d6-a38e-f52adf1c6238",
                              "99a05733-a84a-4527-87d4-a957f7d08b76"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 121,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "223ae810-da1b-421a-a1a5-7a079ac6c2e6",
                            "title": "`rejectPromise` was called",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `rejectPromise` was called via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "0f35c1b0-16c1-45fe-bf52-deca1adf3fad",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `rejectPromise` was called via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "24b7bf03-a339-4658-93a8-de0542dd56c4",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "0f35c1b0-16c1-45fe-bf52-deca1adf3fad",
                              "24b7bf03-a339-4658-93a8-de0542dd56c4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "bc9251e5-2b70-463d-909e-f14aebdb26c8",
                            "title": "`resolvePromise` then `rejectPromise` were called",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `resolvePromise` then `rejectPromise` were called via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "53150c61-2271-47f3-9eb8-3af7f49ccf52",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `resolvePromise` then `rejectPromise` were called via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "1ad33a7a-3f4b-493b-abbf-d515eb3c3e4d",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "53150c61-2271-47f3-9eb8-3af7f49ccf52",
                              "1ad33a7a-3f4b-493b-abbf-d515eb3c3e4d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "b136b52c-0cd2-4138-b6a6-42cc477fdd2f",
                            "title": "`rejectPromise` then `resolvePromise` were called",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `rejectPromise` then `resolvePromise` were called via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "9cae69fa-d6bf-40f5-ba80-d7883ee58d38",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `rejectPromise` then `resolvePromise` were called via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "1ffa6a2d-4493-4700-a856-69087c8c187c",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "9cae69fa-d6bf-40f5-ba80-d7883ee58d38",
                              "1ffa6a2d-4493-4700-a856-69087c8c187c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "729f2a81-3402-4289-95e6-47c1b0bf7328",
                        "title": "2.3.3.3.4.2: Otherwise, reject `promise` with `e` as the reason.",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "cb6ffdbd-68d6-4f61-8b71-62cdcd6b2090",
                            "title": "straightforward case",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.2: Otherwise, reject `promise` with `e` as the reason. straightforward case via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "701bcca3-6ea2-4d72-bc7b-d72f78641fcd",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.2: Otherwise, reject `promise` with `e` as the reason. straightforward case via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "8555714f-795e-4347-9077-9235cb466496",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "701bcca3-6ea2-4d72-bc7b-d72f78641fcd",
                              "8555714f-795e-4347-9077-9235cb466496"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "b66336c0-da9e-459e-ad96-85711497d37f",
                            "title": "`resolvePromise` is called asynchronously before the `throw`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.2: Otherwise, reject `promise` with `e` as the reason. `resolvePromise` is called asynchronously before the `throw` via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "976a7f90-58aa-45be-b3a0-8eb4f68717ca",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.2: Otherwise, reject `promise` with `e` as the reason. `resolvePromise` is called asynchronously before the `throw` via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "d7748e41-8bb6-4572-bed2-273887a0e649",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "976a7f90-58aa-45be-b3a0-8eb4f68717ca",
                              "d7748e41-8bb6-4572-bed2-273887a0e649"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "a76a8946-75ec-4baa-a04b-3f84012281d1",
                            "title": "`rejectPromise` is called asynchronously before the `throw`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.2: Otherwise, reject `promise` with `e` as the reason. `rejectPromise` is called asynchronously before the `throw` via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "0d8d0c6c-7795-47c1-9d98-8cb1990a72db",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.2: Otherwise, reject `promise` with `e` as the reason. `rejectPromise` is called asynchronously before the `throw` via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "008e164e-132f-40a8-9d61-6ad2e3238069",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "0d8d0c6c-7795-47c1-9d98-8cb1990a72db",
                              "008e164e-132f-40a8-9d61-6ad2e3238069"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "81e91e53-f697-4b40-abaf-feafc378d1fa",
                "title": "2.3.3.4: If `then` is not a function, fulfill promise with `x`",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` \"before each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "x = { then: then };",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0e01ec78-d943-46db-82e7-9478616972ea",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` \"before each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "x = { then: then };",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c705e3c5-c505-4310-a0c9-14a11adfeab9",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` \"before each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "x = { then: then };",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c5acd551-79c5-4af8-9c18-259a315a8a4f",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` \"before each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "x = { then: then };",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0fca10e4-af9d-446b-99be-6cefd90f2114",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` \"before each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "x = { then: then };",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3586d3d5-8472-47bd-b2be-1131c774a563",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "8993d526-de0b-47b8-bddf-dfc0ba7114fb",
                    "title": "`then` is `5`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is `5` via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f5e999bc-77df-461b-b492-246ce0cb8ea2",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is `5` via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "142773d1-b690-427d-9cb3-cfcb1a950201",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "f5e999bc-77df-461b-b492-246ce0cb8ea2",
                      "142773d1-b690-427d-9cb3-cfcb1a950201"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 12,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "229909df-4d87-4c76-bf49-16efec5c0eb8",
                    "title": "`then` is an object",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is an object via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f43ee82f-b88a-452a-9dd7-aef0ee363115",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is an object via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b50c44c9-6281-430a-aab9-20987b6fd3aa",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "f43ee82f-b88a-452a-9dd7-aef0ee363115",
                      "b50c44c9-6281-430a-aab9-20987b6fd3aa"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 12,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "f08ef494-25c5-4ed0-8b3a-8b477922a024",
                    "title": "`then` is an array containing a function",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is an array containing a function via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "738a32b5-b9a3-45b4-9b1b-1d8712bfb8fa",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is an array containing a function via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b73d162c-4c0d-46fa-afcd-c08b8b2ef14e",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "738a32b5-b9a3-45b4-9b1b-1d8712bfb8fa",
                      "b73d162c-4c0d-46fa-afcd-c08b8b2ef14e"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 11,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "b4c5d862-9ada-41a0-8562-ad16a57d4190",
                    "title": "`then` is a regular expression",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is a regular expression via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "bd894e23-a081-40aa-8296-7a82e4e81dad",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is a regular expression via return from a rejected promise",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2a495409-690f-4d56-aa8c-3b614ebfc71e",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "bd894e23-a081-40aa-8296-7a82e4e81dad",
                      "2a495409-690f-4d56-aa8c-3b614ebfc71e"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 10,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "b9b06450-8233-45b6-b403-3574f23ee7bf",
                    "title": "`then` is an object inheriting from `Function.prototype`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is an object inheriting from `Function.prototype` via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b184576c-8f6a-455c-b0ae-179bbe563f71",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is an object inheriting from `Function.prototype` via return from a rejected promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1dc47a03-3761-4682-9e0c-de75af73088c",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "b184576c-8f6a-455c-b0ae-179bbe563f71",
                      "1dc47a03-3761-4682-9e0c-de75af73088c"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 12,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "aa0e00ab-63a2-4add-89f3-508012e27b51",
            "title": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x`",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "b4b85f5c-e907-4729-9a80-33512bb6fe7e",
                "title": "The value is `undefined`",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `undefined` already-fulfilled",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c2356129-ad1d-4720-b37d-e8b775a7c610",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `undefined` immediately-fulfilled",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "21342762-8b48-4e2d-97c9-b1d6145a77de",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `undefined` eventually-fulfilled",
                    "timedOut": false,
                    "duration": 57,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0939e860-29ba-4ec7-8669-f9fea4fd9669",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `undefined` already-rejected",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f46f6f8c-9806-4524-8cc7-dcc99d9ca14f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `undefined` immediately-rejected",
                    "timedOut": false,
                    "duration": 9,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "87e90e5b-c5e4-427f-8954-caf90de84aac",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `undefined` eventually-rejected",
                    "timedOut": false,
                    "duration": 58,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3bdc7806-5a3b-4b0d-b092-94a5ae71ee83",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "c2356129-ad1d-4720-b37d-e8b775a7c610",
                  "21342762-8b48-4e2d-97c9-b1d6145a77de",
                  "0939e860-29ba-4ec7-8669-f9fea4fd9669",
                  "f46f6f8c-9806-4524-8cc7-dcc99d9ca14f",
                  "87e90e5b-c5e4-427f-8954-caf90de84aac",
                  "3bdc7806-5a3b-4b0d-b092-94a5ae71ee83"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 142,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "76656664-5437-4978-9808-e60a5b8bed6a",
                "title": "The value is `null`",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `null` already-fulfilled",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9abc1ee1-8a3b-49f2-9dbc-d7abadac561d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `null` immediately-fulfilled",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bb6484e9-4101-4a4e-97d2-79f012c35b02",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `null` eventually-fulfilled",
                    "timedOut": false,
                    "duration": 58,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "87c588a5-323c-444f-9fac-35c39c46b1df",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `null` already-rejected",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "04f2f666-ac16-4125-a6e9-cb5e444d88fa",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `null` immediately-rejected",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "56895b1c-6cb3-43c0-844d-4164d071e856",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `null` eventually-rejected",
                    "timedOut": false,
                    "duration": 57,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5e951cef-b459-4ce7-9cc1-a5ae9487ce63",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "9abc1ee1-8a3b-49f2-9dbc-d7abadac561d",
                  "bb6484e9-4101-4a4e-97d2-79f012c35b02",
                  "87c588a5-323c-444f-9fac-35c39c46b1df",
                  "04f2f666-ac16-4125-a6e9-cb5e444d88fa",
                  "56895b1c-6cb3-43c0-844d-4164d071e856",
                  "5e951cef-b459-4ce7-9cc1-a5ae9487ce63"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 137,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "ad37be14-76a1-48b9-b73f-2f9f458dd2cb",
                "title": "The value is `false`",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `false` already-fulfilled",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aa3f3cdd-d0c2-4f4a-b708-131566347599",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `false` immediately-fulfilled",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8ae89f8f-240c-4726-88cd-d97812062447",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `false` eventually-fulfilled",
                    "timedOut": false,
                    "duration": 57,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "966bc2a7-f5ca-437f-bccc-f45d43c17012",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `false` already-rejected",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7f587ea4-7648-49a9-911e-1fbd1c9b960f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `false` immediately-rejected",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "415de7c5-4fc7-4e22-8b3e-0b35226d307d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `false` eventually-rejected",
                    "timedOut": false,
                    "duration": 60,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a3f47353-c2e4-4c8d-8e83-1f8392554c07",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "aa3f3cdd-d0c2-4f4a-b708-131566347599",
                  "8ae89f8f-240c-4726-88cd-d97812062447",
                  "966bc2a7-f5ca-437f-bccc-f45d43c17012",
                  "7f587ea4-7648-49a9-911e-1fbd1c9b960f",
                  "415de7c5-4fc7-4e22-8b3e-0b35226d307d",
                  "a3f47353-c2e4-4c8d-8e83-1f8392554c07"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 145,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "e64be066-1a95-4376-9e55-bdbb3d161bf9",
                "title": "The value is `true`",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` already-fulfilled",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2e0e2008-9e8f-4f17-8e72-653e0a06a7fa",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` immediately-fulfilled",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cafa333b-5c6c-4ae1-992a-01403906146c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` eventually-fulfilled",
                    "timedOut": false,
                    "duration": 57,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fbe3a689-06db-40a3-beac-5f453c2e5be5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` already-rejected",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "60b1679b-b63d-4652-bab5-b6740751d2b6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` immediately-rejected",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "30270fad-c67e-4548-813a-647c3a9ca717",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` eventually-rejected",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d8ae5242-a185-4c2f-866d-b43327cd345f",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "2e0e2008-9e8f-4f17-8e72-653e0a06a7fa",
                  "cafa333b-5c6c-4ae1-992a-01403906146c",
                  "fbe3a689-06db-40a3-beac-5f453c2e5be5",
                  "60b1679b-b63d-4652-bab5-b6740751d2b6",
                  "30270fad-c67e-4548-813a-647c3a9ca717",
                  "d8ae5242-a185-4c2f-866d-b43327cd345f"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 138,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "f6e9fd98-b61d-4c13-b823-696ce8d9568f",
                "title": "The value is `0`",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `0` already-fulfilled",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f0fd7889-84a8-48d9-a0ab-26a794b3d9d3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `0` immediately-fulfilled",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f65c67c7-07f2-4865-8896-282d5b3cce4b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `0` eventually-fulfilled",
                    "timedOut": false,
                    "duration": 58,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4fb16164-60fb-4545-a04b-7ead14bd676e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `0` already-rejected",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "77aa3053-d480-4e99-8433-29d4d97dcd19",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `0` immediately-rejected",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a479985d-957b-4d43-acc1-19470d09dd82",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `0` eventually-rejected",
                    "timedOut": false,
                    "duration": 59,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4c60e9da-dbeb-4de9-ab99-6075282dc043",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "f0fd7889-84a8-48d9-a0ab-26a794b3d9d3",
                  "f65c67c7-07f2-4865-8896-282d5b3cce4b",
                  "4fb16164-60fb-4545-a04b-7ead14bd676e",
                  "77aa3053-d480-4e99-8433-29d4d97dcd19",
                  "a479985d-957b-4d43-acc1-19470d09dd82",
                  "4c60e9da-dbeb-4de9-ab99-6075282dc043"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 141,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "aef87e07-2d17-4fd5-8250-9a3b35866ea9",
                "title": "The value is `true` with `Boolean.prototype` modified to have a `then` method",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` with `Boolean.prototype` modified to have a `then` method \"before each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "Boolean.prototype.then = function () {};",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1471a42e-2ebd-4aea-8d02-426b9454bfd7",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` with `Boolean.prototype` modified to have a `then` method \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "delete Boolean.prototype.then;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d317ce47-28f9-4f32-a28b-1ea8abee8105",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` with `Boolean.prototype` modified to have a `then` method already-fulfilled",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9f65e31f-50f1-4c94-a0cc-d3deb3c51f97",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` with `Boolean.prototype` modified to have a `then` method immediately-fulfilled",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5b51bad5-4832-41b4-b2e6-bb9e7b1ac548",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` with `Boolean.prototype` modified to have a `then` method eventually-fulfilled",
                    "timedOut": false,
                    "duration": 58,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b4b547dd-b7ac-4a30-b59f-db8b7fd9edce",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` with `Boolean.prototype` modified to have a `then` method already-rejected",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "88103083-3fce-4ecf-b49a-cfc4723acf8b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` with `Boolean.prototype` modified to have a `then` method immediately-rejected",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7dd94382-139a-466a-8386-cb4c5a5af18a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` with `Boolean.prototype` modified to have a `then` method eventually-rejected",
                    "timedOut": false,
                    "duration": 58,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "631e307b-6b03-4e95-9a86-1e74676837c1",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "9f65e31f-50f1-4c94-a0cc-d3deb3c51f97",
                  "5b51bad5-4832-41b4-b2e6-bb9e7b1ac548",
                  "b4b547dd-b7ac-4a30-b59f-db8b7fd9edce",
                  "88103083-3fce-4ecf-b49a-cfc4723acf8b",
                  "7dd94382-139a-466a-8386-cb4c5a5af18a",
                  "631e307b-6b03-4e95-9a86-1e74676837c1"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 142,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "166e2e1f-fc96-42f2-880c-5240dcefe150",
                "title": "The value is `1` with `Number.prototype` modified to have a `then` method",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `1` with `Number.prototype` modified to have a `then` method \"before each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "Number.prototype.then = function () {};",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7f5f4328-c4e0-4651-b4f4-593cf225f511",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `1` with `Number.prototype` modified to have a `then` method \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "delete Number.prototype.then;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "149a9142-fdfe-44c2-9879-c9d5b8d18d39",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `1` with `Number.prototype` modified to have a `then` method already-fulfilled",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4bd97d85-ca11-416d-8076-75ec37799aa5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `1` with `Number.prototype` modified to have a `then` method immediately-fulfilled",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "efade1d5-8762-49d8-841c-11beea5b9ff3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `1` with `Number.prototype` modified to have a `then` method eventually-fulfilled",
                    "timedOut": false,
                    "duration": 58,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1d184fce-7129-48af-b656-02c73a9fa6c2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `1` with `Number.prototype` modified to have a `then` method already-rejected",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0fc3f1d4-1e0e-4b78-b3b6-741cba439b64",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `1` with `Number.prototype` modified to have a `then` method immediately-rejected",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7351716f-23a8-45e4-81ff-2e8b1f6a4ccf",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `1` with `Number.prototype` modified to have a `then` method eventually-rejected",
                    "timedOut": false,
                    "duration": 59,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "01a3b25f-9904-4e0d-98b1-83076c62f27c",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "4bd97d85-ca11-416d-8076-75ec37799aa5",
                  "efade1d5-8762-49d8-841c-11beea5b9ff3",
                  "1d184fce-7129-48af-b656-02c73a9fa6c2",
                  "0fc3f1d4-1e0e-4b78-b3b6-741cba439b64",
                  "7351716f-23a8-45e4-81ff-2e8b1f6a4ccf",
                  "01a3b25f-9904-4e0d-98b1-83076c62f27c"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 143,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}