{
  "stats": {
    "suites": 531,
    "tests": 872,
    "passes": 872,
    "pending": 0,
    "failures": 0,
    "start": "2019-02-20T08:00:04.907Z",
    "end": "2019-02-20T08:00:23.550Z",
    "duration": 18643,
    "testsRegistered": 872,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "e8cd7249-7c3f-4096-9159-f708a3cc38e8",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "e23cea19-cae5-449f-be0d-9b80939989d0",
        "title": "Promises/A+ Tests",
        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
        "file": "\\test\\index.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "199e6443-0ba6-43da-83eb-068ff7b85fd8",
            "title": "2.1.2.1: When fulfilled, a promise: must not transition to any other state.",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "already-fulfilled",
                "fullTitle": "Promises/A+ Tests 2.1.2.1: When fulfilled, a promise: must not transition to any other state. already-fulfilled",
                "timedOut": false,
                "duration": 102,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "test(resolved(value), done);",
                "err": {},
                "isRoot": false,
                "uuid": "8f7c75aa-e6ca-4aef-bf40-be4580825914",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "immediately-fulfilled",
                "fullTitle": "Promises/A+ Tests 2.1.2.1: When fulfilled, a promise: must not transition to any other state. immediately-fulfilled",
                "timedOut": false,
                "duration": 102,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                "err": {},
                "isRoot": false,
                "uuid": "e5dd7315-4fc1-41bc-af0e-c808c76f952d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "eventually-fulfilled",
                "fullTitle": "Promises/A+ Tests 2.1.2.1: When fulfilled, a promise: must not transition to any other state. eventually-fulfilled",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                "err": {},
                "isRoot": false,
                "uuid": "83d67917-3283-451d-b34f-aa8e4ac379df",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "trying to fulfill then immediately reject",
                "fullTitle": "Promises/A+ Tests 2.1.2.1: When fulfilled, a promise: must not transition to any other state. trying to fulfill then immediately reject",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar onFulfilledCalled = false;\nd.promise.then(function onFulfilled() {\n    onFulfilledCalled = true;\n}, function onRejected() {\n    assert.strictEqual(onFulfilledCalled, false);\n    done();\n});\nd.resolve(dummy);\nd.reject(dummy);\nsetTimeout(done, 100);",
                "err": {},
                "isRoot": false,
                "uuid": "ce2362ba-0432-4be8-8611-08af98354226",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "trying to fulfill then reject, delayed",
                "fullTitle": "Promises/A+ Tests 2.1.2.1: When fulfilled, a promise: must not transition to any other state. trying to fulfill then reject, delayed",
                "timedOut": false,
                "duration": 102,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar onFulfilledCalled = false;\nd.promise.then(function onFulfilled() {\n    onFulfilledCalled = true;\n}, function onRejected() {\n    assert.strictEqual(onFulfilledCalled, false);\n    done();\n});\nsetTimeout(function () {\n    d.resolve(dummy);\n    d.reject(dummy);\n}, 50);\nsetTimeout(done, 100);",
                "err": {},
                "isRoot": false,
                "uuid": "e2198710-291c-4a17-b769-1def73e88b98",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "trying to fulfill immediately then reject delayed",
                "fullTitle": "Promises/A+ Tests 2.1.2.1: When fulfilled, a promise: must not transition to any other state. trying to fulfill immediately then reject delayed",
                "timedOut": false,
                "duration": 102,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar onFulfilledCalled = false;\nd.promise.then(function onFulfilled() {\n    onFulfilledCalled = true;\n}, function onRejected() {\n    assert.strictEqual(onFulfilledCalled, false);\n    done();\n});\nd.resolve(dummy);\nsetTimeout(function () {\n    d.reject(dummy);\n}, 50);\nsetTimeout(done, 100);",
                "err": {},
                "isRoot": false,
                "uuid": "110e2c09-afe6-4ea1-a33c-7359a10b7c0f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8f7c75aa-e6ca-4aef-bf40-be4580825914",
              "e5dd7315-4fc1-41bc-af0e-c808c76f952d",
              "83d67917-3283-451d-b34f-aa8e4ac379df",
              "ce2362ba-0432-4be8-8611-08af98354226",
              "e2198710-291c-4a17-b769-1def73e88b98",
              "110e2c09-afe6-4ea1-a33c-7359a10b7c0f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 610,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "3ac1c6a8-123b-4b3c-9aec-a361ef52deb4",
            "title": "2.1.3.1: When rejected, a promise: must not transition to any other state.",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "already-rejected",
                "fullTitle": "Promises/A+ Tests 2.1.3.1: When rejected, a promise: must not transition to any other state. already-rejected",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "test(rejected(reason), done);",
                "err": {},
                "isRoot": false,
                "uuid": "2c61d471-2cb0-44fc-8a3a-2487b5bbce48",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "immediately-rejected",
                "fullTitle": "Promises/A+ Tests 2.1.3.1: When rejected, a promise: must not transition to any other state. immediately-rejected",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                "err": {},
                "isRoot": false,
                "uuid": "5da0fb82-06cb-4775-880a-f153976aa462",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "eventually-rejected",
                "fullTitle": "Promises/A+ Tests 2.1.3.1: When rejected, a promise: must not transition to any other state. eventually-rejected",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                "err": {},
                "isRoot": false,
                "uuid": "7623d53c-ac55-43d1-aed2-6009cd1af516",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "trying to reject then immediately fulfill",
                "fullTitle": "Promises/A+ Tests 2.1.3.1: When rejected, a promise: must not transition to any other state. trying to reject then immediately fulfill",
                "timedOut": false,
                "duration": 102,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar onRejectedCalled = false;\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(onRejectedCalled, false);\n    done();\n}, function onRejected() {\n    onRejectedCalled = true;\n});\nd.reject(dummy);\nd.resolve(dummy);\nsetTimeout(done, 100);",
                "err": {},
                "isRoot": false,
                "uuid": "5d8a79d1-5366-4606-aeae-6deaccfc86e2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "trying to reject then fulfill, delayed",
                "fullTitle": "Promises/A+ Tests 2.1.3.1: When rejected, a promise: must not transition to any other state. trying to reject then fulfill, delayed",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar onRejectedCalled = false;\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(onRejectedCalled, false);\n    done();\n}, function onRejected() {\n    onRejectedCalled = true;\n});\nsetTimeout(function () {\n    d.reject(dummy);\n    d.resolve(dummy);\n}, 50);\nsetTimeout(done, 100);",
                "err": {},
                "isRoot": false,
                "uuid": "bba0f2ad-03cc-4f57-9bf8-57f42df91253",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "trying to reject immediately then fulfill delayed",
                "fullTitle": "Promises/A+ Tests 2.1.3.1: When rejected, a promise: must not transition to any other state. trying to reject immediately then fulfill delayed",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar onRejectedCalled = false;\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(onRejectedCalled, false);\n    done();\n}, function onRejected() {\n    onRejectedCalled = true;\n});\nd.reject(dummy);\nsetTimeout(function () {\n    d.resolve(dummy);\n}, 50);\nsetTimeout(done, 100);",
                "err": {},
                "isRoot": false,
                "uuid": "5608e121-0ffe-4be7-8a85-06b25cebcc89",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2c61d471-2cb0-44fc-8a3a-2487b5bbce48",
              "5da0fb82-06cb-4775-880a-f153976aa462",
              "7623d53c-ac55-43d1-aed2-6009cd1af516",
              "5d8a79d1-5366-4606-aeae-6deaccfc86e2",
              "bba0f2ad-03cc-4f57-9bf8-57f42df91253",
              "5608e121-0ffe-4be7-8a85-06b25cebcc89"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 607,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "b4af2f31-89cf-4f32-9930-d25d481e2a8e",
            "title": "2.2.1: Both `onFulfilled` and `onRejected` are optional arguments.",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "f304cdf8-f94d-430b-ac76-c8e945959571",
                "title": "2.2.1.1: If `onFulfilled` is not a function, it must be ignored.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "87f7d1a8-f7da-4526-8ee5-e98ca7d416df",
                    "title": "applied to a directly-rejected promise",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "`onFulfilled` is `undefined`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a directly-rejected promise `onFulfilled` is `undefined`",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rejected(dummy).then(nonFunction, function () {\n    done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c84e2e49-2068-4eb3-af65-e334f064bf92",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is `null`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a directly-rejected promise `onFulfilled` is `null`",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rejected(dummy).then(nonFunction, function () {\n    done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "96504685-1bad-4c40-9137-b6bbd565c1af",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is `false`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a directly-rejected promise `onFulfilled` is `false`",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rejected(dummy).then(nonFunction, function () {\n    done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b4261808-94b7-4178-a5fc-c5ae656cda4b",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is `5`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a directly-rejected promise `onFulfilled` is `5`",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rejected(dummy).then(nonFunction, function () {\n    done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "fd52ba47-e16c-49ee-94e8-d3097e53ec7e",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is an object",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a directly-rejected promise `onFulfilled` is an object",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rejected(dummy).then(nonFunction, function () {\n    done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b294e8c5-05a3-4401-bb52-ebd730b6f649",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "c84e2e49-2068-4eb3-af65-e334f064bf92",
                      "96504685-1bad-4c40-9137-b6bbd565c1af",
                      "b4261808-94b7-4178-a5fc-c5ae656cda4b",
                      "fd52ba47-e16c-49ee-94e8-d3097e53ec7e",
                      "b294e8c5-05a3-4401-bb52-ebd730b6f649"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 10,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "4af91410-73cb-49dc-8668-135b949bdaeb",
                    "title": "applied to a promise rejected and then chained off of",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "`onFulfilled` is `undefined`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a promise rejected and then chained off of `onFulfilled` is `undefined`",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rejected(dummy).then(function () { }, undefined).then(nonFunction, function () {\n    done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8e6716b3-c5ce-4b90-ab8a-0f6913eb426e",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is `null`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a promise rejected and then chained off of `onFulfilled` is `null`",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rejected(dummy).then(function () { }, undefined).then(nonFunction, function () {\n    done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6da28cd5-7843-43f4-a945-1d484de8df89",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is `false`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a promise rejected and then chained off of `onFulfilled` is `false`",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rejected(dummy).then(function () { }, undefined).then(nonFunction, function () {\n    done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d4caf250-1fca-4f72-b4ab-e4c7178e1a2f",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is `5`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a promise rejected and then chained off of `onFulfilled` is `5`",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rejected(dummy).then(function () { }, undefined).then(nonFunction, function () {\n    done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "dc51488d-c0ac-4678-b065-077a90c31efe",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is an object",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a promise rejected and then chained off of `onFulfilled` is an object",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rejected(dummy).then(function () { }, undefined).then(nonFunction, function () {\n    done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "49ed434e-585b-4b13-92fd-4412a6dcf172",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "8e6716b3-c5ce-4b90-ab8a-0f6913eb426e",
                      "6da28cd5-7843-43f4-a945-1d484de8df89",
                      "d4caf250-1fca-4f72-b4ab-e4c7178e1a2f",
                      "dc51488d-c0ac-4678-b065-077a90c31efe",
                      "49ed434e-585b-4b13-92fd-4412a6dcf172"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 24,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "d0089816-b4be-4686-8f05-a1b396c54706",
                "title": "2.2.1.2: If `onRejected` is not a function, it must be ignored.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "83895815-d474-4a0f-966d-7aea5a0c5686",
                    "title": "applied to a directly-fulfilled promise",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "`onRejected` is `undefined`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a directly-fulfilled promise `onRejected` is `undefined`",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "resolved(dummy).then(function () {\n    done();\n}, nonFunction);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "06860aa5-17e1-48cd-a22f-eec81a87e0f6",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onRejected` is `null`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a directly-fulfilled promise `onRejected` is `null`",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "resolved(dummy).then(function () {\n    done();\n}, nonFunction);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "20892969-cc13-4938-a32d-bf5d8fb0ad35",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onRejected` is `false`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a directly-fulfilled promise `onRejected` is `false`",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "resolved(dummy).then(function () {\n    done();\n}, nonFunction);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4ffe8163-40b1-49f5-8886-bf18c9e8c692",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onRejected` is `5`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a directly-fulfilled promise `onRejected` is `5`",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "resolved(dummy).then(function () {\n    done();\n}, nonFunction);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6cfcc8d9-48a5-4b52-b1fe-145467ed9717",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onRejected` is an object",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a directly-fulfilled promise `onRejected` is an object",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "resolved(dummy).then(function () {\n    done();\n}, nonFunction);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c9f7aa0f-db2c-4912-9421-46d4d07723f3",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "06860aa5-17e1-48cd-a22f-eec81a87e0f6",
                      "20892969-cc13-4938-a32d-bf5d8fb0ad35",
                      "4ffe8163-40b1-49f5-8886-bf18c9e8c692",
                      "6cfcc8d9-48a5-4b52-b1fe-145467ed9717",
                      "c9f7aa0f-db2c-4912-9421-46d4d07723f3"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 9,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "8ae9f777-b8a5-415f-a06f-d2ec487ba6e5",
                    "title": "applied to a promise fulfilled and then chained off of",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "`onFulfilled` is `undefined`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a promise fulfilled and then chained off of `onFulfilled` is `undefined`",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "resolved(dummy).then(undefined, function () { }).then(function () {\n    done();\n}, nonFunction);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "609527d5-e491-45e4-93bc-a35cf795ebbc",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is `null`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a promise fulfilled and then chained off of `onFulfilled` is `null`",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "resolved(dummy).then(undefined, function () { }).then(function () {\n    done();\n}, nonFunction);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3848b9e3-8990-419a-a42a-94678a5a0215",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is `false`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a promise fulfilled and then chained off of `onFulfilled` is `false`",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "resolved(dummy).then(undefined, function () { }).then(function () {\n    done();\n}, nonFunction);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2ab7ca5c-8916-460f-bf20-f2c0438acf0f",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is `5`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a promise fulfilled and then chained off of `onFulfilled` is `5`",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "resolved(dummy).then(undefined, function () { }).then(function () {\n    done();\n}, nonFunction);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "199b5496-f06f-427b-ac71-d5c255e88c1d",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is an object",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a promise fulfilled and then chained off of `onFulfilled` is an object",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "resolved(dummy).then(undefined, function () { }).then(function () {\n    done();\n}, nonFunction);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2a202932-720e-495b-bff8-fe21f680c145",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "609527d5-e491-45e4-93bc-a35cf795ebbc",
                      "3848b9e3-8990-419a-a42a-94678a5a0215",
                      "2ab7ca5c-8916-460f-bf20-f2c0438acf0f",
                      "199b5496-f06f-427b-ac71-d5c255e88c1d",
                      "2a202932-720e-495b-bff8-fe21f680c145"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 26,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "82e3044c-6175-474b-9938-538ed8869f6c",
            "title": "2.2.2: If `onFulfilled` is a function,",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "af50c363-5a43-4068-901b-ab148f85a01c",
                "title": "2.2.2.1: it must be called after `promise` is fulfilled, with `promise`’s fulfillment value as its first argument.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.1: it must be called after `promise` is fulfilled, with `promise`’s fulfillment value as its first argument. already-fulfilled",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dd6c46ee-60cd-4ec6-a2a1-3bde2b6ffd53",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.1: it must be called after `promise` is fulfilled, with `promise`’s fulfillment value as its first argument. immediately-fulfilled",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "69323fbc-73c6-4297-8da7-38dd376f1ca6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.1: it must be called after `promise` is fulfilled, with `promise`’s fulfillment value as its first argument. eventually-fulfilled",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "57359cd7-2853-431d-b587-98c7f666d6e8",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "dd6c46ee-60cd-4ec6-a2a1-3bde2b6ffd53",
                  "69323fbc-73c6-4297-8da7-38dd376f1ca6",
                  "57359cd7-2853-431d-b587-98c7f666d6e8"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 60,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "8eb4afe0-1269-4d25-aab0-1462fc2bcba5",
                "title": "2.2.2.2: it must not be called before `promise` is fulfilled",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "fulfilled after a delay",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.2: it must not be called before `promise` is fulfilled fulfilled after a delay",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar isFulfilled = false;\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(isFulfilled, true);\n    done();\n});\nsetTimeout(function () {\n    d.resolve(dummy);\n    isFulfilled = true;\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "073f4b47-c773-4396-8828-fb9ffb0ab2fa",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "never fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.2: it must not be called before `promise` is fulfilled never fulfilled",
                    "timedOut": false,
                    "duration": 151,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar onFulfilledCalled = false;\nd.promise.then(function onFulfilled() {\n    onFulfilledCalled = true;\n    done();\n});\nsetTimeout(function () {\n    assert.strictEqual(onFulfilledCalled, false);\n    done();\n}, 150);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7b0e4bd7-eb47-4bdf-8a7b-b69b010980d9",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "073f4b47-c773-4396-8828-fb9ffb0ab2fa",
                  "7b0e4bd7-eb47-4bdf-8a7b-b69b010980d9"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 205,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "fd65b719-a23b-4655-88e7-4dde7d06f8d6",
                "title": "2.2.2.3: it must not be called more than once.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.3: it must not be called more than once. already-fulfilled",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var timesCalled = 0;\nresolved(dummy).then(function onFulfilled() {\n    assert.strictEqual(++timesCalled, 1);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a0a224c8-5496-47ff-bd22-5eb6a8f2c9aa",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "trying to fulfill a pending promise more than once, immediately",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.3: it must not be called more than once. trying to fulfill a pending promise more than once, immediately",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar timesCalled = 0;\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(++timesCalled, 1);\n    done();\n});\nd.resolve(dummy);\nd.resolve(dummy);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4083fad6-41fa-4daf-ab55-f33946c0ada8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "trying to fulfill a pending promise more than once, delayed",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.3: it must not be called more than once. trying to fulfill a pending promise more than once, delayed",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar timesCalled = 0;\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(++timesCalled, 1);\n    done();\n});\nsetTimeout(function () {\n    d.resolve(dummy);\n    d.resolve(dummy);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a7a1e1de-b195-44e3-b78d-11865ecfbbea",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "trying to fulfill a pending promise more than once, immediately then delayed",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.3: it must not be called more than once. trying to fulfill a pending promise more than once, immediately then delayed",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar timesCalled = 0;\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(++timesCalled, 1);\n    done();\n});\nd.resolve(dummy);\nsetTimeout(function () {\n    d.resolve(dummy);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f62a835d-1dc1-4954-9dcc-3ea22fb5db1a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when multiple `then` calls are made, spaced apart in time",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.3: it must not be called more than once. when multiple `then` calls are made, spaced apart in time",
                    "timedOut": false,
                    "duration": 156,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar timesCalled = [0, 0, 0];\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(++timesCalled[0], 1);\n});\nsetTimeout(function () {\n    d.promise.then(function onFulfilled() {\n        assert.strictEqual(++timesCalled[1], 1);\n    });\n}, 50);\nsetTimeout(function () {\n    d.promise.then(function onFulfilled() {\n        assert.strictEqual(++timesCalled[2], 1);\n        done();\n    });\n}, 100);\nsetTimeout(function () {\n    d.resolve(dummy);\n}, 150);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bc6bcaca-7bdc-486b-898e-558615c860f5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when `then` is interleaved with fulfillment",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.3: it must not be called more than once. when `then` is interleaved with fulfillment",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar timesCalled = [0, 0];\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(++timesCalled[0], 1);\n});\nd.resolve(dummy);\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(++timesCalled[1], 1);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7ed18221-ba32-460f-85ab-fbe4b90f6fee",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "a0a224c8-5496-47ff-bd22-5eb6a8f2c9aa",
                  "4083fad6-41fa-4daf-ab55-f33946c0ada8",
                  "a7a1e1de-b195-44e3-b78d-11865ecfbbea",
                  "f62a835d-1dc1-4954-9dcc-3ea22fb5db1a",
                  "bc6bcaca-7bdc-486b-898e-558615c860f5",
                  "7ed18221-ba32-460f-85ab-fbe4b90f6fee"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 224,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "51d0da59-838a-40f0-96a1-43e9d26202a5",
            "title": "2.2.3: If `onRejected` is a function,",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "b646a0d5-11ed-4297-8832-66d38d994655",
                "title": "2.2.3.1: it must be called after `promise` is rejected, with `promise`’s rejection reason as its first argument.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.1: it must be called after `promise` is rejected, with `promise`’s rejection reason as its first argument. already-rejected",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e7daff4f-d884-49f4-b31b-6d67ac6b2ef1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.1: it must be called after `promise` is rejected, with `promise`’s rejection reason as its first argument. immediately-rejected",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "620877a4-0006-4926-874f-00d7eba3c89e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.1: it must be called after `promise` is rejected, with `promise`’s rejection reason as its first argument. eventually-rejected",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4aaa0616-3d4c-4ff5-999b-ebf718ca93d1",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "e7daff4f-d884-49f4-b31b-6d67ac6b2ef1",
                  "620877a4-0006-4926-874f-00d7eba3c89e",
                  "4aaa0616-3d4c-4ff5-999b-ebf718ca93d1"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 62,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "0106fb0c-6a59-4326-8cfb-0f5af8a33ef4",
                "title": "2.2.3.2: it must not be called before `promise` is rejected",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "rejected after a delay",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.2: it must not be called before `promise` is rejected rejected after a delay",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar isRejected = false;\nd.promise.then(null, function onRejected() {\n    assert.strictEqual(isRejected, true);\n    done();\n});\nsetTimeout(function () {\n    d.reject(dummy);\n    isRejected = true;\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5f205d3c-2d8a-4c9d-9eb0-a4d697bb0427",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "never rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.2: it must not be called before `promise` is rejected never rejected",
                    "timedOut": false,
                    "duration": 152,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar onRejectedCalled = false;\nd.promise.then(null, function onRejected() {\n    onRejectedCalled = true;\n    done();\n});\nsetTimeout(function () {\n    assert.strictEqual(onRejectedCalled, false);\n    done();\n}, 150);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ccfff452-7c74-43d6-a3bf-75c905ce0681",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "5f205d3c-2d8a-4c9d-9eb0-a4d697bb0427",
                  "ccfff452-7c74-43d6-a3bf-75c905ce0681"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 207,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "dddb81c9-7bf9-4244-99f7-dd1896796e0f",
                "title": "2.2.3.3: it must not be called more than once.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.3: it must not be called more than once. already-rejected",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var timesCalled = 0;\nrejected(dummy).then(null, function onRejected() {\n    assert.strictEqual(++timesCalled, 1);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "83ec53c8-a32a-4a18-bfd7-ad2df0b43f0c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "trying to reject a pending promise more than once, immediately",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.3: it must not be called more than once. trying to reject a pending promise more than once, immediately",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar timesCalled = 0;\nd.promise.then(null, function onRejected() {\n    assert.strictEqual(++timesCalled, 1);\n    done();\n});\nd.reject(dummy);\nd.reject(dummy);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a2fe608f-e620-4131-95be-f3074cc6c107",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "trying to reject a pending promise more than once, delayed",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.3: it must not be called more than once. trying to reject a pending promise more than once, delayed",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar timesCalled = 0;\nd.promise.then(null, function onRejected() {\n    assert.strictEqual(++timesCalled, 1);\n    done();\n});\nsetTimeout(function () {\n    d.reject(dummy);\n    d.reject(dummy);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f8bd5412-7934-439f-a29d-8b910db8ca33",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "trying to reject a pending promise more than once, immediately then delayed",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.3: it must not be called more than once. trying to reject a pending promise more than once, immediately then delayed",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar timesCalled = 0;\nd.promise.then(null, function onRejected() {\n    assert.strictEqual(++timesCalled, 1);\n    done();\n});\nd.reject(dummy);\nsetTimeout(function () {\n    d.reject(dummy);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b2c3e90a-ce4f-486f-ab68-fa2da5fe4acf",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when multiple `then` calls are made, spaced apart in time",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.3: it must not be called more than once. when multiple `then` calls are made, spaced apart in time",
                    "timedOut": false,
                    "duration": 155,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar timesCalled = [0, 0, 0];\nd.promise.then(null, function onRejected() {\n    assert.strictEqual(++timesCalled[0], 1);\n});\nsetTimeout(function () {\n    d.promise.then(null, function onRejected() {\n        assert.strictEqual(++timesCalled[1], 1);\n    });\n}, 50);\nsetTimeout(function () {\n    d.promise.then(null, function onRejected() {\n        assert.strictEqual(++timesCalled[2], 1);\n        done();\n    });\n}, 100);\nsetTimeout(function () {\n    d.reject(dummy);\n}, 150);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2511e93f-2f36-4a1b-aefc-1e5900979e7d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when `then` is interleaved with rejection",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.3: it must not be called more than once. when `then` is interleaved with rejection",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar timesCalled = [0, 0];\nd.promise.then(null, function onRejected() {\n    assert.strictEqual(++timesCalled[0], 1);\n});\nd.reject(dummy);\nd.promise.then(null, function onRejected() {\n    assert.strictEqual(++timesCalled[1], 1);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2076f529-8568-4e6d-b3ac-faa92f41d7f4",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "83ec53c8-a32a-4a18-bfd7-ad2df0b43f0c",
                  "a2fe608f-e620-4131-95be-f3074cc6c107",
                  "f8bd5412-7934-439f-a29d-8b910db8ca33",
                  "b2c3e90a-ce4f-486f-ab68-fa2da5fe4acf",
                  "2511e93f-2f36-4a1b-aefc-1e5900979e7d",
                  "2076f529-8568-4e6d-b3ac-faa92f41d7f4"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 222,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "0f8d61b3-15cf-479b-9af2-4f5a48125f79",
            "title": "2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code.",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "ccbadff5-fefb-4783-84f5-be81195f8986",
                "title": "`then` returns before the promise becomes fulfilled or rejected",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. `then` returns before the promise becomes fulfilled or rejected already-fulfilled",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ec389f4b-6d02-4a2d-8769-bc1d93796200",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. `then` returns before the promise becomes fulfilled or rejected immediately-fulfilled",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "161fcf1b-f111-4593-9326-89238319852e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. `then` returns before the promise becomes fulfilled or rejected eventually-fulfilled",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dfc70054-4eae-4038-a9d2-2222c758412a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. `then` returns before the promise becomes fulfilled or rejected already-rejected",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dc511b01-4710-406d-a863-d84db30013cf",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. `then` returns before the promise becomes fulfilled or rejected immediately-rejected",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a206a629-4f29-45d1-ae6b-9945afd19b9e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. `then` returns before the promise becomes fulfilled or rejected eventually-rejected",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9baf781b-df4c-417c-b3d8-b0147745c438",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "ec389f4b-6d02-4a2d-8769-bc1d93796200",
                  "161fcf1b-f111-4593-9326-89238319852e",
                  "dfc70054-4eae-4038-a9d2-2222c758412a",
                  "dc511b01-4710-406d-a863-d84db30013cf",
                  "a206a629-4f29-45d1-ae6b-9945afd19b9e",
                  "9baf781b-df4c-417c-b3d8-b0147745c438"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 121,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "cd8e855b-a1e2-422b-8e7c-d224b65e24be",
                "title": "Clean-stack execution ordering tests (fulfillment case)",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "when `onFulfilled` is added immediately before the promise is fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (fulfillment case) when `onFulfilled` is added immediately before the promise is fulfilled",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar onFulfilledCalled = false;\nd.promise.then(function onFulfilled() {\n    onFulfilledCalled = true;\n});\nd.resolve(dummy);\nassert.strictEqual(onFulfilledCalled, false);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5c9697f6-08c5-472d-afbc-cffbfad5ade0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when `onFulfilled` is added immediately after the promise is fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (fulfillment case) when `onFulfilled` is added immediately after the promise is fulfilled",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar onFulfilledCalled = false;\nd.resolve(dummy);\nd.promise.then(function onFulfilled() {\n    onFulfilledCalled = true;\n});\nassert.strictEqual(onFulfilledCalled, false);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "699f00a7-9f3f-4e2e-ad18-50cebdc9e29b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when one `onFulfilled` is added inside another `onFulfilled`",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (fulfillment case) when one `onFulfilled` is added inside another `onFulfilled`",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved();\nvar firstOnFulfilledFinished = false;\npromise.then(function () {\n    promise.then(function () {\n        assert.strictEqual(firstOnFulfilledFinished, true);\n        done();\n    });\n    firstOnFulfilledFinished = true;\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "071a0605-c462-4f3d-963f-0b9887d8db28",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when `onFulfilled` is added inside an `onRejected`",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (fulfillment case) when `onFulfilled` is added inside an `onRejected`",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected();\nvar promise2 = resolved();\nvar firstOnRejectedFinished = false;\npromise.then(null, function () {\n    promise2.then(function () {\n        assert.strictEqual(firstOnRejectedFinished, true);\n        done();\n    });\n    firstOnRejectedFinished = true;\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "19666da3-dd54-48e3-aaee-e84b5316bfec",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when the promise is fulfilled asynchronously",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (fulfillment case) when the promise is fulfilled asynchronously",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar firstStackFinished = false;\nsetTimeout(function () {\n    d.resolve(dummy);\n    firstStackFinished = true;\n}, 0);\nd.promise.then(function () {\n    assert.strictEqual(firstStackFinished, true);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "98da9d4f-20a3-4b43-af93-18ed17734dee",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "5c9697f6-08c5-472d-afbc-cffbfad5ade0",
                  "699f00a7-9f3f-4e2e-ad18-50cebdc9e29b",
                  "071a0605-c462-4f3d-963f-0b9887d8db28",
                  "19666da3-dd54-48e3-aaee-e84b5316bfec",
                  "98da9d4f-20a3-4b43-af93-18ed17734dee"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 15,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "7cee3a37-0b9e-45a2-a763-5cee24a81c6d",
                "title": "Clean-stack execution ordering tests (rejection case)",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "when `onRejected` is added immediately before the promise is rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (rejection case) when `onRejected` is added immediately before the promise is rejected",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar onRejectedCalled = false;\nd.promise.then(null, function onRejected() {\n    onRejectedCalled = true;\n});\nd.reject(dummy);\nassert.strictEqual(onRejectedCalled, false);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "63a22244-0a16-4af0-a5b0-5aba50b20cd4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when `onRejected` is added immediately after the promise is rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (rejection case) when `onRejected` is added immediately after the promise is rejected",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar onRejectedCalled = false;\nd.reject(dummy);\nd.promise.then(null, function onRejected() {\n    onRejectedCalled = true;\n});\nassert.strictEqual(onRejectedCalled, false);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "034bb320-f0b0-4887-b24f-d365f66bb371",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when `onRejected` is added inside an `onFulfilled`",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (rejection case) when `onRejected` is added inside an `onFulfilled`",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved();\nvar promise2 = rejected();\nvar firstOnFulfilledFinished = false;\npromise.then(function () {\n    promise2.then(null, function () {\n        assert.strictEqual(firstOnFulfilledFinished, true);\n        done();\n    });\n    firstOnFulfilledFinished = true;\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "03bca50f-06d0-43fb-8c90-3a6bcce91cb3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when one `onRejected` is added inside another `onRejected`",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (rejection case) when one `onRejected` is added inside another `onRejected`",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected();\nvar firstOnRejectedFinished = false;\npromise.then(null, function () {\n    promise.then(null, function () {\n        assert.strictEqual(firstOnRejectedFinished, true);\n        done();\n    });\n    firstOnRejectedFinished = true;\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b89359d8-fee5-47e7-bed5-f1de155f9171",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when the promise is rejected asynchronously",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (rejection case) when the promise is rejected asynchronously",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar firstStackFinished = false;\nsetTimeout(function () {\n    d.reject(dummy);\n    firstStackFinished = true;\n}, 0);\nd.promise.then(null, function () {\n    assert.strictEqual(firstStackFinished, true);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e8a65db5-d579-49be-8f20-0b70a0addcbf",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "63a22244-0a16-4af0-a5b0-5aba50b20cd4",
                  "034bb320-f0b0-4887-b24f-d365f66bb371",
                  "03bca50f-06d0-43fb-8c90-3a6bcce91cb3",
                  "b89359d8-fee5-47e7-bed5-f1de155f9171",
                  "e8a65db5-d579-49be-8f20-0b70a0addcbf"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 13,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "796b1cbf-a649-40b1-a5f0-20e3f82ef9a6",
            "title": "2.2.5 `onFulfilled` and `onRejected` must be called as functions (i.e. with no `this` value).",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "fa237a01-9c55-435b-87b7-eb486f8392dc",
                "title": "strict mode",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.5 `onFulfilled` and `onRejected` must be called as functions (i.e. with no `this` value). strict mode fulfilled",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "resolved(dummy).then(function onFulfilled() {\n    \"use strict\";\n    assert.strictEqual(this, undefined);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "14cc2b2f-39d4-43c8-9570-559bde0f187e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.5 `onFulfilled` and `onRejected` must be called as functions (i.e. with no `this` value). strict mode rejected",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "rejected(dummy).then(null, function onRejected() {\n    \"use strict\";\n    assert.strictEqual(this, undefined);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "349b103e-2c0a-41a7-a506-13d2a65ff0a9",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "14cc2b2f-39d4-43c8-9570-559bde0f187e",
                  "349b103e-2c0a-41a7-a506-13d2a65ff0a9"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 3,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "14389c9c-af4a-4f60-99da-836b0379201e",
                "title": "sloppy mode",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.5 `onFulfilled` and `onRejected` must be called as functions (i.e. with no `this` value). sloppy mode fulfilled",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "resolved(dummy).then(function onFulfilled() {\n    assert.strictEqual(this, global);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aacbb2ff-b6ec-4c87-8330-c371edc366b0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.5 `onFulfilled` and `onRejected` must be called as functions (i.e. with no `this` value). sloppy mode rejected",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "rejected(dummy).then(null, function onRejected() {\n    assert.strictEqual(this, global);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "27feb78a-7636-4ac3-b8ed-0a54505d1f67",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "aacbb2ff-b6ec-4c87-8330-c371edc366b0",
                  "27feb78a-7636-4ac3-b8ed-0a54505d1f67"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 3,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "07832787-7056-4fa4-ab47-f6cecc20642e",
            "title": "2.2.6: `then` may be called multiple times on the same promise.",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "1f71f853-3dc9-44e5-96a1-ec9dbadfd80f",
                "title": "2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "56fdd51c-73cd-42af-a888-7ff39d141f2c",
                    "title": "multiple boring fulfillment handlers",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. multiple boring fulfillment handlers already-fulfilled",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "65a724bd-cb31-4cc0-8514-b90918f800df",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. multiple boring fulfillment handlers immediately-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9939d99c-fd92-4730-a21d-b6998e016069",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. multiple boring fulfillment handlers eventually-fulfilled",
                        "timedOut": false,
                        "duration": 54,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "71eb2a82-33be-47d3-988e-feb492cddadf",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "65a724bd-cb31-4cc0-8514-b90918f800df",
                      "9939d99c-fd92-4730-a21d-b6998e016069",
                      "71eb2a82-33be-47d3-988e-feb492cddadf"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 63,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "36bf3324-0772-40c4-a5ed-65ab5e8c41dc",
                    "title": "multiple fulfillment handlers, one of which throws",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. multiple fulfillment handlers, one of which throws already-fulfilled",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7d6f3e30-d070-48bc-b09a-a44fb8836f06",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. multiple fulfillment handlers, one of which throws immediately-fulfilled",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "fd588439-8117-4a29-85af-950d868f9734",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. multiple fulfillment handlers, one of which throws eventually-fulfilled",
                        "timedOut": false,
                        "duration": 54,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c366a54c-bad3-48e4-8c67-4be2385f526f",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "7d6f3e30-d070-48bc-b09a-a44fb8836f06",
                      "fd588439-8117-4a29-85af-950d868f9734",
                      "c366a54c-bad3-48e4-8c67-4be2385f526f"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 60,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "83e602fb-862b-4345-937c-362438797882",
                    "title": "results in multiple branching chains with their own fulfillment values",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. results in multiple branching chains with their own fulfillment values already-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "bc66e9fe-6275-4231-97e1-142a19806ce9",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. results in multiple branching chains with their own fulfillment values immediately-fulfilled",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "902876fa-05a6-4210-a159-b4056403c478",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. results in multiple branching chains with their own fulfillment values eventually-fulfilled",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ba2c1967-2902-47c7-ac62-5a28de8aab8c",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "bc66e9fe-6275-4231-97e1-142a19806ce9",
                      "902876fa-05a6-4210-a159-b4056403c478",
                      "ba2c1967-2902-47c7-ac62-5a28de8aab8c"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 71,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "3d3f28a0-af06-4381-9ada-14efc5c98277",
                    "title": "`onFulfilled` handlers are called in the original order",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. `onFulfilled` handlers are called in the original order already-fulfilled",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "93b01a94-dc04-4444-bf70-7aa218b1f2f2",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. `onFulfilled` handlers are called in the original order immediately-fulfilled",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b2dab493-2649-4838-a397-1e280f297b48",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. `onFulfilled` handlers are called in the original order eventually-fulfilled",
                        "timedOut": false,
                        "duration": 54,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ac385333-f856-4f50-856e-6c563ce5b1d6",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [
                      {
                        "uuid": "aa83fc14-0251-4a6e-b30d-5fdc7701dfe2",
                        "title": "even when one handler is added inside another handler",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "already-fulfilled",
                            "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. `onFulfilled` handlers are called in the original order even when one handler is added inside another handler already-fulfilled",
                            "timedOut": false,
                            "duration": 16,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "test(resolved(value), done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "10abfc62-97b6-4ac6-9a51-33c80b6ccb36",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "immediately-fulfilled",
                            "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. `onFulfilled` handlers are called in the original order even when one handler is added inside another handler immediately-fulfilled",
                            "timedOut": false,
                            "duration": 21,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "da3b9489-b753-4826-a060-029a4dd95e41",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "eventually-fulfilled",
                            "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. `onFulfilled` handlers are called in the original order even when one handler is added inside another handler eventually-fulfilled",
                            "timedOut": false,
                            "duration": 72,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "6aa036c7-2d75-4603-a11e-062b62be1231",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "10abfc62-97b6-4ac6-9a51-33c80b6ccb36",
                          "da3b9489-b753-4826-a060-029a4dd95e41",
                          "6aa036c7-2d75-4603-a11e-062b62be1231"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 109,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      }
                    ],
                    "passes": [
                      "93b01a94-dc04-4444-bf70-7aa218b1f2f2",
                      "b2dab493-2649-4838-a397-1e280f297b48",
                      "ac385333-f856-4f50-856e-6c563ce5b1d6"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 60,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "f686df84-e75e-416a-9b80-365591dd9768",
                "title": "2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "9337826d-0417-4e6d-97cc-d96f5dd04d82",
                    "title": "multiple boring rejection handlers",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. multiple boring rejection handlers already-rejected",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "afd64279-f97b-4f9c-b28a-fcac793a08b1",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. multiple boring rejection handlers immediately-rejected",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "beee796c-4f11-43c1-9f88-acba63cc3623",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. multiple boring rejection handlers eventually-rejected",
                        "timedOut": false,
                        "duration": 53,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "714e4023-af73-4b66-824e-ee8722bebf8f",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "afd64279-f97b-4f9c-b28a-fcac793a08b1",
                      "beee796c-4f11-43c1-9f88-acba63cc3623",
                      "714e4023-af73-4b66-824e-ee8722bebf8f"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 57,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "9384b3c7-1087-438b-a01b-d2d099bd5f28",
                    "title": "multiple rejection handlers, one of which throws",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. multiple rejection handlers, one of which throws already-rejected",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "82a9ea0e-ef38-4ed8-be46-970ae8909992",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. multiple rejection handlers, one of which throws immediately-rejected",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "760f1a25-2acd-4e1f-95ae-75fdb6b952a9",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. multiple rejection handlers, one of which throws eventually-rejected",
                        "timedOut": false,
                        "duration": 55,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5d12c8a0-1d5c-4773-8e44-ef54471f666c",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "82a9ea0e-ef38-4ed8-be46-970ae8909992",
                      "760f1a25-2acd-4e1f-95ae-75fdb6b952a9",
                      "5d12c8a0-1d5c-4773-8e44-ef54471f666c"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 61,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "01b69cef-065f-441f-b711-ed89f6589c6d",
                    "title": "results in multiple branching chains with their own fulfillment values",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. results in multiple branching chains with their own fulfillment values already-rejected",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c7972cf0-f878-49bd-83a4-eb7e7c43155e",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. results in multiple branching chains with their own fulfillment values immediately-rejected",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "74e5c3a7-926c-4c39-86a9-c71e21841d5b",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. results in multiple branching chains with their own fulfillment values eventually-rejected",
                        "timedOut": false,
                        "duration": 57,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "aa85f45b-73b3-46ec-970f-da63f3751fbd",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "c7972cf0-f878-49bd-83a4-eb7e7c43155e",
                      "74e5c3a7-926c-4c39-86a9-c71e21841d5b",
                      "aa85f45b-73b3-46ec-970f-da63f3751fbd"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 69,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "eebdbabd-c87e-4e7f-ac1e-6040d6d214c5",
                    "title": "`onRejected` handlers are called in the original order",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. `onRejected` handlers are called in the original order already-rejected",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "adce5654-2ff8-4eaa-a42e-f1a157c24a90",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. `onRejected` handlers are called in the original order immediately-rejected",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "18a3b9b8-fa24-47b2-be91-abb0ab2cb1a1",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. `onRejected` handlers are called in the original order eventually-rejected",
                        "timedOut": false,
                        "duration": 54,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3aac2001-4237-4aa3-8389-c4d54b224cc2",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [
                      {
                        "uuid": "103f6f84-3962-45fa-beab-54dd2df7e852",
                        "title": "even when one handler is added inside another handler",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "already-rejected",
                            "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. `onRejected` handlers are called in the original order even when one handler is added inside another handler already-rejected",
                            "timedOut": false,
                            "duration": 18,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "test(rejected(reason), done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "b24a6409-e61f-47e2-a6b0-6e84b593997b",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "immediately-rejected",
                            "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. `onRejected` handlers are called in the original order even when one handler is added inside another handler immediately-rejected",
                            "timedOut": false,
                            "duration": 20,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "2b18794c-0e58-4a28-8565-78c21bb0d098",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "eventually-rejected",
                            "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. `onRejected` handlers are called in the original order even when one handler is added inside another handler eventually-rejected",
                            "timedOut": false,
                            "duration": 71,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "3d93d6fe-7ffd-4b8c-b33b-a726bad8978b",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "b24a6409-e61f-47e2-a6b0-6e84b593997b",
                          "2b18794c-0e58-4a28-8565-78c21bb0d098",
                          "3d93d6fe-7ffd-4b8c-b33b-a726bad8978b"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 109,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      }
                    ],
                    "passes": [
                      "adce5654-2ff8-4eaa-a42e-f1a157c24a90",
                      "18a3b9b8-fa24-47b2-be91-abb0ab2cb1a1",
                      "3aac2001-4237-4aa3-8389-c4d54b224cc2"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 57,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "9e5c9df0-3bf9-4097-aaee-01fa6a83604a",
            "title": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)`",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "is a promise",
                "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` is a promise",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var promise1 = deferred().promise;\nvar promise2 = promise1.then();\nassert(typeof promise2 === \"object\" || typeof promise2 === \"function\");\nassert.notStrictEqual(promise2, null);\nassert.strictEqual(typeof promise2.then, \"function\");",
                "err": {},
                "isRoot": false,
                "uuid": "1acb14da-878e-4bcf-936d-0eb3515e30c8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [
              {
                "uuid": "ad045b3c-603e-4525-9343-3e46153b601e",
                "title": "2.2.7.1: If either `onFulfilled` or `onRejected` returns a value `x`, run the Promise Resolution Procedure `[[Resolve]](promise2, x)`",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "see separate 3.3 tests",
                    "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.1: If either `onFulfilled` or `onRejected` returns a value `x`, run the Promise Resolution Procedure `[[Resolve]](promise2, x)` see separate 3.3 tests",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8ee495c0-a54f-46db-b356-51ff6814a2df",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "8ee495c0-a54f-46db-b356-51ff6814a2df"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "30dbe70a-fcd2-4222-9d2c-330844df03fa",
                "title": "2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "aaab6f20-5eb7-49fa-b0a4-2f7776215204",
                    "title": "The reason is `undefined`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `undefined` already-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8b200f7e-f380-4410-95aa-d69e3282e748",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `undefined` immediately-fulfilled",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "bd84c352-3290-4c67-9af0-2f122aa4bcd4",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `undefined` eventually-fulfilled",
                        "timedOut": false,
                        "duration": 58,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f5283623-4b17-4350-b489-33f743c932b2",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `undefined` already-rejected",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7e73228d-ff2f-4abd-a398-250daeaa7f0e",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `undefined` immediately-rejected",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4d54c2ef-3bbf-4c34-9042-0e4f26c25628",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `undefined` eventually-rejected",
                        "timedOut": false,
                        "duration": 56,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "546c0a69-86da-49c2-bc43-ef6bfa8e451a",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "8b200f7e-f380-4410-95aa-d69e3282e748",
                      "bd84c352-3290-4c67-9af0-2f122aa4bcd4",
                      "f5283623-4b17-4350-b489-33f743c932b2",
                      "7e73228d-ff2f-4abd-a398-250daeaa7f0e",
                      "4d54c2ef-3bbf-4c34-9042-0e4f26c25628",
                      "546c0a69-86da-49c2-bc43-ef6bfa8e451a"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 137,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "45330003-288d-4ade-83a8-c7981e7f669b",
                    "title": "The reason is `null`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `null` already-fulfilled",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "494e6b25-78fe-4585-8a24-be9aae66d4d8",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `null` immediately-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5639fe82-1d80-4ebe-8825-895752843b8a",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `null` eventually-fulfilled",
                        "timedOut": false,
                        "duration": 58,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8e10291a-5152-4a2c-b602-357af8ba769c",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `null` already-rejected",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "08323cda-e6bc-4ba2-8936-90c63c1f1b06",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `null` immediately-rejected",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d507ae7e-3902-4e70-8ff1-3b565c308638",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `null` eventually-rejected",
                        "timedOut": false,
                        "duration": 56,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c9affa4e-bff1-4d39-abda-e1ae6d1e2e5d",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "494e6b25-78fe-4585-8a24-be9aae66d4d8",
                      "5639fe82-1d80-4ebe-8825-895752843b8a",
                      "8e10291a-5152-4a2c-b602-357af8ba769c",
                      "08323cda-e6bc-4ba2-8936-90c63c1f1b06",
                      "d507ae7e-3902-4e70-8ff1-3b565c308638",
                      "c9affa4e-bff1-4d39-abda-e1ae6d1e2e5d"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 135,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "18cbb30f-b8ab-4c2b-a3bc-1de40bd2202a",
                    "title": "The reason is `false`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `false` already-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a9271eb6-5e37-467e-ba97-9ccaf899a186",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `false` immediately-fulfilled",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e58608e1-201d-46f7-b1ce-54cc6cb4b5a7",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `false` eventually-fulfilled",
                        "timedOut": false,
                        "duration": 57,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "37f72b30-87c1-4a6b-a823-483a9f945b10",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `false` already-rejected",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6c29e257-7c76-40fb-a648-8151c74a8fff",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `false` immediately-rejected",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f82e2138-440e-4824-839c-2881f33ec5cb",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `false` eventually-rejected",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e185f4ab-c66e-493c-a7c4-78ab214f40e4",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "a9271eb6-5e37-467e-ba97-9ccaf899a186",
                      "e58608e1-201d-46f7-b1ce-54cc6cb4b5a7",
                      "37f72b30-87c1-4a6b-a823-483a9f945b10",
                      "6c29e257-7c76-40fb-a648-8151c74a8fff",
                      "f82e2138-440e-4824-839c-2881f33ec5cb",
                      "e185f4ab-c66e-493c-a7c4-78ab214f40e4"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 142,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "4d105d3e-25ec-4c84-a783-d820e0d66217",
                    "title": "The reason is `0`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `0` already-fulfilled",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "97483684-a31b-48e1-a6e4-f8a66af1384f",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `0` immediately-fulfilled",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4a30af16-c972-44c7-bf47-41b77b63f55c",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `0` eventually-fulfilled",
                        "timedOut": false,
                        "duration": 57,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e1b02844-f3f9-483d-90d7-a4cb08fc7ce8",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `0` already-rejected",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c177bf34-3a80-4fb9-b149-8e9e003bac33",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `0` immediately-rejected",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7c14e0a7-d23e-4b2c-8e2d-b8f5d2a4fb69",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `0` eventually-rejected",
                        "timedOut": false,
                        "duration": 55,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c14b2c4a-9914-4494-bacd-ca95ce5c817a",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "97483684-a31b-48e1-a6e4-f8a66af1384f",
                      "4a30af16-c972-44c7-bf47-41b77b63f55c",
                      "e1b02844-f3f9-483d-90d7-a4cb08fc7ce8",
                      "c177bf34-3a80-4fb9-b149-8e9e003bac33",
                      "7c14e0a7-d23e-4b2c-8e2d-b8f5d2a4fb69",
                      "c14b2c4a-9914-4494-bacd-ca95ce5c817a"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 137,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "6e69e4d0-3ddc-41b9-9738-aea39efe16e5",
                    "title": "The reason is an error",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error already-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9de85577-adae-4f40-958b-885c2046ecab",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error immediately-fulfilled",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "eb88bab7-8ed2-49d2-809d-e0e66081e505",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error eventually-fulfilled",
                        "timedOut": false,
                        "duration": 57,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7acb3dd1-664f-42ca-8c4d-0479f3deb786",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error already-rejected",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "78979d0a-a319-4dbf-8957-fc83dd5936d1",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error immediately-rejected",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "586019c4-c1cc-4c64-a035-d5ed6ec482bd",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error eventually-rejected",
                        "timedOut": false,
                        "duration": 57,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "05201084-ecd7-4ea3-b286-d634c874759e",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "9de85577-adae-4f40-958b-885c2046ecab",
                      "eb88bab7-8ed2-49d2-809d-e0e66081e505",
                      "7acb3dd1-664f-42ca-8c4d-0479f3deb786",
                      "78979d0a-a319-4dbf-8957-fc83dd5936d1",
                      "586019c4-c1cc-4c64-a035-d5ed6ec482bd",
                      "05201084-ecd7-4ea3-b286-d634c874759e"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 137,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "a36a3685-1fa6-4f9e-a89d-077a9534035b",
                    "title": "The reason is an error without a stack",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error without a stack already-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a480cdf6-0dfd-40cc-aa13-de5886a0dc48",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error without a stack immediately-fulfilled",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f462d751-d662-49e2-9912-af2350ed6f15",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error without a stack eventually-fulfilled",
                        "timedOut": false,
                        "duration": 57,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f6e21f9d-c954-423e-babe-4ac7d75be683",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error without a stack already-rejected",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a9b237ff-58e7-4456-b180-01e7a28619a7",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error without a stack immediately-rejected",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f1efb2f6-7a52-4d7b-83f2-cd37e101b463",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error without a stack eventually-rejected",
                        "timedOut": false,
                        "duration": 57,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d8982e97-9d5b-446b-b4fc-6c5ca86bb60e",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "a480cdf6-0dfd-40cc-aa13-de5886a0dc48",
                      "f462d751-d662-49e2-9912-af2350ed6f15",
                      "f6e21f9d-c954-423e-babe-4ac7d75be683",
                      "a9b237ff-58e7-4456-b180-01e7a28619a7",
                      "f1efb2f6-7a52-4d7b-83f2-cd37e101b463",
                      "d8982e97-9d5b-446b-b4fc-6c5ca86bb60e"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 140,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "d73b0737-5b3e-4d20-a31b-8a429572af7e",
                    "title": "The reason is a date",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a date already-fulfilled",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8426fdd8-80c2-4e36-9d3f-c48326ded1f1",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a date immediately-fulfilled",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "44bc06e2-c5a6-43ba-81ad-f091f2d597e3",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a date eventually-fulfilled",
                        "timedOut": false,
                        "duration": 58,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "597f9b0f-0d1d-463a-a755-660842fb8e93",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a date already-rejected",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "567379e5-017a-4a90-a6c1-eeb2e2d1a780",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a date immediately-rejected",
                        "timedOut": false,
                        "duration": 10,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e4518a74-5e07-48fa-aac8-7c135095b2e6",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a date eventually-rejected",
                        "timedOut": false,
                        "duration": 57,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7100c573-3c67-4917-b907-a4a0d87c51ee",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "8426fdd8-80c2-4e36-9d3f-c48326ded1f1",
                      "44bc06e2-c5a6-43ba-81ad-f091f2d597e3",
                      "597f9b0f-0d1d-463a-a755-660842fb8e93",
                      "567379e5-017a-4a90-a6c1-eeb2e2d1a780",
                      "e4518a74-5e07-48fa-aac8-7c135095b2e6",
                      "7100c573-3c67-4917-b907-a4a0d87c51ee"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 143,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "10cd7e46-49d5-42b2-8577-c8c98af3cd35",
                    "title": "The reason is an object",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an object already-fulfilled",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6743abf9-6793-4fa2-aa37-181f31d89c5a",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an object immediately-fulfilled",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3af4f3e3-7c0e-4e99-9208-85c36d2700fc",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an object eventually-fulfilled",
                        "timedOut": false,
                        "duration": 57,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ad0c3d92-7465-4fe5-ab07-753472ba5fd2",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an object already-rejected",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "edac7647-8880-4eb9-810b-4a272400cc0b",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an object immediately-rejected",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "cca023ce-52e3-43d0-9b4a-0965a8ed3b86",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an object eventually-rejected",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5ef6f627-ec1f-473e-ad50-a92569574851",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "6743abf9-6793-4fa2-aa37-181f31d89c5a",
                      "3af4f3e3-7c0e-4e99-9208-85c36d2700fc",
                      "ad0c3d92-7465-4fe5-ab07-753472ba5fd2",
                      "edac7647-8880-4eb9-810b-4a272400cc0b",
                      "cca023ce-52e3-43d0-9b4a-0965a8ed3b86",
                      "5ef6f627-ec1f-473e-ad50-a92569574851"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 138,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "2ff9ceb3-ccd0-4243-8c12-f02f268ec8ee",
                    "title": "The reason is an always-pending thenable",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an always-pending thenable already-fulfilled",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9b7ed84a-9954-4779-82c0-aac1d4e952db",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an always-pending thenable immediately-fulfilled",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "80119572-6364-4385-9278-6e33beb4a454",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an always-pending thenable eventually-fulfilled",
                        "timedOut": false,
                        "duration": 57,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b32cc80b-6c4c-4b2f-b368-0afec7ef0226",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an always-pending thenable already-rejected",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6e91d906-7603-44af-8238-3da0d7112654",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an always-pending thenable immediately-rejected",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6836fcc3-7932-4cfd-9118-c41d89efac02",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an always-pending thenable eventually-rejected",
                        "timedOut": false,
                        "duration": 57,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4427fd40-ee0d-46d2-8fd9-152b6cac961a",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "9b7ed84a-9954-4779-82c0-aac1d4e952db",
                      "80119572-6364-4385-9278-6e33beb4a454",
                      "b32cc80b-6c4c-4b2f-b368-0afec7ef0226",
                      "6e91d906-7603-44af-8238-3da0d7112654",
                      "6836fcc3-7932-4cfd-9118-c41d89efac02",
                      "4427fd40-ee0d-46d2-8fd9-152b6cac961a"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 140,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "9757d84f-8152-47e3-9819-b4781962c245",
                    "title": "The reason is a fulfilled promise",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a fulfilled promise already-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f929b58d-d7a9-4d1e-8263-7755423d6b55",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a fulfilled promise immediately-fulfilled",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "35e1ad2f-6027-48f2-b34a-a7b7af614771",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a fulfilled promise eventually-fulfilled",
                        "timedOut": false,
                        "duration": 58,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5b6e4c3c-b059-4333-b045-cdd53ead4da9",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a fulfilled promise already-rejected",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "24cb5757-a985-4e12-a817-9e3e5919ef4c",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a fulfilled promise immediately-rejected",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e89f251c-a5eb-4eef-b762-6160f1f4d8f2",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a fulfilled promise eventually-rejected",
                        "timedOut": false,
                        "duration": 58,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "aac54088-5469-4393-b63f-b2703f2087d4",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "f929b58d-d7a9-4d1e-8263-7755423d6b55",
                      "35e1ad2f-6027-48f2-b34a-a7b7af614771",
                      "5b6e4c3c-b059-4333-b045-cdd53ead4da9",
                      "24cb5757-a985-4e12-a817-9e3e5919ef4c",
                      "e89f251c-a5eb-4eef-b762-6160f1f4d8f2",
                      "aac54088-5469-4393-b63f-b2703f2087d4"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 139,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "7685e238-29be-413e-b63c-f4977560bba7",
                    "title": "The reason is a rejected promise",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a rejected promise already-fulfilled",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9f6c9eb1-e4dc-41a2-8bb8-5e1c7d437e4e",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a rejected promise immediately-fulfilled",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "35b0ff33-d563-4483-acc7-582034c950c2",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a rejected promise eventually-fulfilled",
                        "timedOut": false,
                        "duration": 57,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b6a881a3-8578-4bed-8d68-a88f06d7b0ee",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a rejected promise already-rejected",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2dc1ab4b-9a95-4121-baaa-23fcc2513db3",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a rejected promise immediately-rejected",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3e6843d4-1369-4c36-b72d-87220ac26125",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a rejected promise eventually-rejected",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0496f699-7e41-4d64-b8c3-1ee75fa13430",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "9f6c9eb1-e4dc-41a2-8bb8-5e1c7d437e4e",
                      "35b0ff33-d563-4483-acc7-582034c950c2",
                      "b6a881a3-8578-4bed-8d68-a88f06d7b0ee",
                      "2dc1ab4b-9a95-4121-baaa-23fcc2513db3",
                      "3e6843d4-1369-4c36-b72d-87220ac26125",
                      "0496f699-7e41-4d64-b8c3-1ee75fa13430"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 134,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "d0a5f040-f5da-4e27-bbf3-463ada0f699e",
                "title": "2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "f2cf95db-1e21-4634-b423-519782749f93",
                    "title": "`onFulfilled` is `undefined`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `undefined` already-fulfilled",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "df528943-b072-46ea-9d8e-659903d5eb83",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `undefined` immediately-fulfilled",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e988c756-1618-4101-9c8a-3843c8dc829e",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `undefined` eventually-fulfilled",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7c51f64d-6f84-4f65-9ce1-1d4d9e2258d0",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "df528943-b072-46ea-9d8e-659903d5eb83",
                      "e988c756-1618-4101-9c8a-3843c8dc829e",
                      "7c51f64d-6f84-4f65-9ce1-1d4d9e2258d0"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 69,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "50d09450-b4eb-4b17-891e-61f73d0d2bd3",
                    "title": "`onFulfilled` is `null`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `null` already-fulfilled",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2e0f4c43-ff23-4f39-a56d-cadbae6b4e46",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `null` immediately-fulfilled",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2802da73-ec11-4b2c-b4a3-4315e16a1b2e",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `null` eventually-fulfilled",
                        "timedOut": false,
                        "duration": 58,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5e758741-d13a-4344-91f6-3cec05e7c705",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "2e0f4c43-ff23-4f39-a56d-cadbae6b4e46",
                      "2802da73-ec11-4b2c-b4a3-4315e16a1b2e",
                      "5e758741-d13a-4344-91f6-3cec05e7c705"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 69,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "6f70df40-63af-4b26-9110-ad05a844efaa",
                    "title": "`onFulfilled` is `false`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `false` already-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d2111d62-4765-4af6-b61f-2f741eb9bc8f",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `false` immediately-fulfilled",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5c6a2101-363f-495d-b8e7-d4421b2159d8",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `false` eventually-fulfilled",
                        "timedOut": false,
                        "duration": 58,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "114c0f03-80d3-4786-a16c-e55261abb1a4",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "d2111d62-4765-4af6-b61f-2f741eb9bc8f",
                      "5c6a2101-363f-495d-b8e7-d4421b2159d8",
                      "114c0f03-80d3-4786-a16c-e55261abb1a4"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 70,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "5f6683c8-2ccd-409a-b675-6664d4765d88",
                    "title": "`onFulfilled` is `5`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `5` already-fulfilled",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "532d6808-8111-4a0d-8394-f5298251b930",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `5` immediately-fulfilled",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "059ce97f-0c4d-48e0-b032-7064e8af08f4",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `5` eventually-fulfilled",
                        "timedOut": false,
                        "duration": 56,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "30208590-8670-4ba8-8105-ad836eb83576",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "532d6808-8111-4a0d-8394-f5298251b930",
                      "059ce97f-0c4d-48e0-b032-7064e8af08f4",
                      "30208590-8670-4ba8-8105-ad836eb83576"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 70,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "021602eb-f68f-48d9-9ff0-c6f2e064632e",
                    "title": "`onFulfilled` is an object",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is an object already-fulfilled",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8f511632-b649-4886-9578-2146c643f0d8",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is an object immediately-fulfilled",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0edc3ece-2d80-4be6-8896-9d8f5bf0421a",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is an object eventually-fulfilled",
                        "timedOut": false,
                        "duration": 56,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7c795c96-7a55-4e97-afd3-96343af3763c",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "8f511632-b649-4886-9578-2146c643f0d8",
                      "0edc3ece-2d80-4be6-8896-9d8f5bf0421a",
                      "7c795c96-7a55-4e97-afd3-96343af3763c"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 68,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "28ec49ce-4e97-4011-bca3-1cc0f39a8189",
                    "title": "`onFulfilled` is an array containing a function",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is an array containing a function already-fulfilled",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ee7805ec-f2ac-4119-bc71-d8f3c858126b",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is an array containing a function immediately-fulfilled",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "43ce681c-4998-42bb-8f84-2739e69c5dd8",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is an array containing a function eventually-fulfilled",
                        "timedOut": false,
                        "duration": 58,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "47c1c53f-d0ed-45f4-92c4-2fb7c4a3da11",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "ee7805ec-f2ac-4119-bc71-d8f3c858126b",
                      "43ce681c-4998-42bb-8f84-2739e69c5dd8",
                      "47c1c53f-d0ed-45f4-92c4-2fb7c4a3da11"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 70,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "4e7e46f9-5373-4c95-8c56-793c3da699cd",
                "title": "2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "c720ff81-de29-4a95-aa74-4758900d361d",
                    "title": "`onRejected` is `undefined`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `undefined` already-rejected",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c59f2caa-361b-4808-a184-234becc2c154",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `undefined` immediately-rejected",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6e466ce2-cc87-4fea-bd81-3869229c2ec1",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `undefined` eventually-rejected",
                        "timedOut": false,
                        "duration": 57,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d18e83ea-e596-4909-81dd-fa6a1168fa5a",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "c59f2caa-361b-4808-a184-234becc2c154",
                      "6e466ce2-cc87-4fea-bd81-3869229c2ec1",
                      "d18e83ea-e596-4909-81dd-fa6a1168fa5a"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 69,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "a920887a-83bd-4fc1-9044-7015f9fd2364",
                    "title": "`onRejected` is `null`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `null` already-rejected",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4f313581-f24a-4794-b4ed-490d627dc542",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `null` immediately-rejected",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "372c4ae7-9ce7-402d-bad4-c25b5e484f07",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `null` eventually-rejected",
                        "timedOut": false,
                        "duration": 58,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "357a0c2b-828b-44c0-bc0a-e40af422d99f",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "4f313581-f24a-4794-b4ed-490d627dc542",
                      "372c4ae7-9ce7-402d-bad4-c25b5e484f07",
                      "357a0c2b-828b-44c0-bc0a-e40af422d99f"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 71,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "f18ffaef-07ee-4982-8ad0-af27ec3e3528",
                    "title": "`onRejected` is `false`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `false` already-rejected",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9c1ef699-f39e-4d48-a112-fa366aaacac4",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `false` immediately-rejected",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "178e13f8-cd78-4a14-94df-063ec2ffbccd",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `false` eventually-rejected",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "61825c32-e06a-4252-9a9d-a176f70253df",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "9c1ef699-f39e-4d48-a112-fa366aaacac4",
                      "178e13f8-cd78-4a14-94df-063ec2ffbccd",
                      "61825c32-e06a-4252-9a9d-a176f70253df"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 72,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "a15a4ad5-5848-4a80-810b-d6d1c9156eed",
                    "title": "`onRejected` is `5`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `5` already-rejected",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "19500741-a401-46dd-939a-4d965cc4b636",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `5` immediately-rejected",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5f6fa22c-935c-46d6-835d-fa5a15db41fb",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `5` eventually-rejected",
                        "timedOut": false,
                        "duration": 58,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "bc4c6b9c-36fe-4edc-b255-540b24c4646e",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "19500741-a401-46dd-939a-4d965cc4b636",
                      "5f6fa22c-935c-46d6-835d-fa5a15db41fb",
                      "bc4c6b9c-36fe-4edc-b255-540b24c4646e"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 72,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "a877bc4c-07c4-45fc-9ee7-a2d2c8ee6d86",
                    "title": "`onRejected` is an object",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is an object already-rejected",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f3591d3c-bce5-490b-ac07-c4fe22f3c013",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is an object immediately-rejected",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9c234e42-8b67-4f92-9413-385863b34a30",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is an object eventually-rejected",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b522be43-0d60-4fcf-b893-670909e2cf82",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "f3591d3c-bce5-490b-ac07-c4fe22f3c013",
                      "9c234e42-8b67-4f92-9413-385863b34a30",
                      "b522be43-0d60-4fcf-b893-670909e2cf82"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 74,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "8b1aabb5-4c67-4549-bf48-8ed50fd1210d",
                    "title": "`onRejected` is an array containing a function",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is an array containing a function already-rejected",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5429af90-392c-4658-a688-6cef26a14fdc",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is an array containing a function immediately-rejected",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "bb9503b2-f11d-4af0-b406-de9b5d7ce537",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is an array containing a function eventually-rejected",
                        "timedOut": false,
                        "duration": 60,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c770c2a2-8797-4555-8a03-4dc428792f19",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "5429af90-392c-4658-a688-6cef26a14fdc",
                      "bb9503b2-f11d-4af0-b406-de9b5d7ce537",
                      "c770c2a2-8797-4555-8a03-4dc428792f19"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 73,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [
              "1acb14da-878e-4bcf-936d-0eb3515e30c8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "09a59a73-3497-4a49-822b-ed632aed3d96",
            "title": "2.3.1: If `promise` and `x` refer to the same object, reject `promise` with a `TypeError' as the reason.",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "via return from a fulfilled promise",
                "fullTitle": "Promises/A+ Tests 2.3.1: If `promise` and `x` refer to the same object, reject `promise` with a `TypeError' as the reason. via return from a fulfilled promise",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var promise = resolved(dummy).then(function () {\n    return promise;\n});\npromise.then(null, function (reason) {\n    assert(reason instanceof TypeError);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "b31fd9d7-45a0-49e2-ad05-7dac23fe1f27",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "via return from a rejected promise",
                "fullTitle": "Promises/A+ Tests 2.3.1: If `promise` and `x` refer to the same object, reject `promise` with a `TypeError' as the reason. via return from a rejected promise",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var promise = rejected(dummy).then(null, function () {\n    return promise;\n});\npromise.then(null, function (reason) {\n    assert(reason instanceof TypeError);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "2f96162e-80e5-4163-8f27-c74eff41a120",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b31fd9d7-45a0-49e2-ad05-7dac23fe1f27",
              "2f96162e-80e5-4163-8f27-c74eff41a120"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 12,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "2d053007-92f0-480b-b684-921f13213e01",
            "title": "2.3.2: If `x` is a promise, adopt its state",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "611fdac3-d09a-46b7-ba19-b79758f0ddd3",
                "title": "2.3.2.1: If `x` is pending, `promise` must remain pending until `x` is fulfilled or rejected.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "via return from a fulfilled promise",
                    "fullTitle": "Promises/A+ Tests 2.3.2: If `x` is a promise, adopt its state 2.3.2.1: If `x` is pending, `promise` must remain pending until `x` is fulfilled or rejected. via return from a fulfilled promise",
                    "timedOut": false,
                    "duration": 102,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "860b7488-d15b-47cd-8038-3809476878c2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "via return from a rejected promise",
                    "fullTitle": "Promises/A+ Tests 2.3.2: If `x` is a promise, adopt its state 2.3.2.1: If `x` is pending, `promise` must remain pending until `x` is fulfilled or rejected. via return from a rejected promise",
                    "timedOut": false,
                    "duration": 100,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a4c1d605-4b85-40ea-a190-2b1c1fbdc124",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "860b7488-d15b-47cd-8038-3809476878c2",
                  "a4c1d605-4b85-40ea-a190-2b1c1fbdc124"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 202,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "d61e47bb-4af5-484c-a810-70181a53d319",
                "title": "2.3.2.2: If/when `x` is fulfilled, fulfill `promise` with the same value.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "073680b0-0519-4dd9-bff4-9b90215ce94d",
                    "title": "`x` is already-fulfilled",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.2: If `x` is a promise, adopt its state 2.3.2.2: If/when `x` is fulfilled, fulfill `promise` with the same value. `x` is already-fulfilled via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 9,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "46a8d7b7-beb1-4055-bc57-7cbc5ca623ae",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.2: If `x` is a promise, adopt its state 2.3.2.2: If/when `x` is fulfilled, fulfill `promise` with the same value. `x` is already-fulfilled via return from a rejected promise",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "32c7d7d7-40e8-4877-a7a3-c43870471443",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "46a8d7b7-beb1-4055-bc57-7cbc5ca623ae",
                      "32c7d7d7-40e8-4877-a7a3-c43870471443"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 16,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "46e9ce93-d390-45bb-8224-43ac0bc0aeb0",
                    "title": "`x` is eventually-fulfilled",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.2: If `x` is a promise, adopt its state 2.3.2.2: If/when `x` is fulfilled, fulfill `promise` with the same value. `x` is eventually-fulfilled via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 60,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "33d36c6e-3485-44e3-b4c9-27d888bd24a8",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.2: If `x` is a promise, adopt its state 2.3.2.2: If/when `x` is fulfilled, fulfill `promise` with the same value. `x` is eventually-fulfilled via return from a rejected promise",
                        "timedOut": false,
                        "duration": 60,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "127289ef-bbea-4dad-9d52-12030e83ddf2",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "33d36c6e-3485-44e3-b4c9-27d888bd24a8",
                      "127289ef-bbea-4dad-9d52-12030e83ddf2"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 120,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "92f3f9a8-8313-4996-b12e-683b217fe590",
                "title": "2.3.2.3: If/when `x` is rejected, reject `promise` with the same reason.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "f9773330-9e95-41b3-8703-f6ed70bbe85e",
                    "title": "`x` is already-rejected",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.2: If `x` is a promise, adopt its state 2.3.2.3: If/when `x` is rejected, reject `promise` with the same reason. `x` is already-rejected via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "33a0ca04-d965-4dd6-b95d-44f0a8c16bee",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.2: If `x` is a promise, adopt its state 2.3.2.3: If/when `x` is rejected, reject `promise` with the same reason. `x` is already-rejected via return from a rejected promise",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c3783bc5-7753-4101-afd3-211d6712f649",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "33a0ca04-d965-4dd6-b95d-44f0a8c16bee",
                      "c3783bc5-7753-4101-afd3-211d6712f649"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 14,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "cfa19dd3-a71d-4286-bc1a-06d33afd6c16",
                    "title": "`x` is eventually-rejected",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.2: If `x` is a promise, adopt its state 2.3.2.3: If/when `x` is rejected, reject `promise` with the same reason. `x` is eventually-rejected via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7d56a719-d1b9-46a8-9030-e7cf76ea9fa2",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.2: If `x` is a promise, adopt its state 2.3.2.3: If/when `x` is rejected, reject `promise` with the same reason. `x` is eventually-rejected via return from a rejected promise",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f775696a-0651-4e4d-af7e-59f560a32878",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "7d56a719-d1b9-46a8-9030-e7cf76ea9fa2",
                      "f775696a-0651-4e4d-af7e-59f560a32878"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 118,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "32943435-5248-427c-bfcc-0a84bdd60580",
            "title": "2.3.3: Otherwise, if `x` is an object or function,",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "bbf47569-5acd-478e-9428-e5f1db5cd5b9",
                "title": "2.3.3.1: Let `then` be `x.then`",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "b5f77866-17f2-4611-ae56-49722cd799d5",
                    "title": "`x` is an object with null prototype",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [
                      {
                        "title": "\"before each\" hook",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is an object with null prototype \"before each\" hook",
                        "timedOut": false,
                        "duration": 0,
                        "pass": false,
                        "fail": false,
                        "pending": false,
                        "code": "numberOfTimesThenWasRetrieved = 0;",
                        "err": {},
                        "isRoot": false,
                        "uuid": "713d4f80-da02-4887-b14f-520026a251f9",
                        "isHook": true,
                        "skipped": false
                      }
                    ],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is an object with null prototype via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f9594704-95b9-4994-a03c-9854421917b7",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is an object with null prototype via return from a rejected promise",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8d0ac4f5-925a-4411-898f-0004ba26d230",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "f9594704-95b9-4994-a03c-9854421917b7",
                      "8d0ac4f5-925a-4411-898f-0004ba26d230"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 8,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "b2c7a300-a7d7-4f66-880a-c91fc456553f",
                    "title": "`x` is an object with normal Object.prototype",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [
                      {
                        "title": "\"before each\" hook",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is an object with normal Object.prototype \"before each\" hook",
                        "timedOut": false,
                        "duration": 0,
                        "pass": false,
                        "fail": false,
                        "pending": false,
                        "code": "numberOfTimesThenWasRetrieved = 0;",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d386d0a1-2b30-46c8-88a2-c3f55f1683da",
                        "isHook": true,
                        "skipped": false
                      }
                    ],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is an object with normal Object.prototype via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2fb687a3-0704-4eaf-9b52-46c39391e7c0",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is an object with normal Object.prototype via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f097f26d-c031-4e3a-9075-f5c606d60997",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "2fb687a3-0704-4eaf-9b52-46c39391e7c0",
                      "f097f26d-c031-4e3a-9075-f5c606d60997"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 11,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "9398dc21-9ac9-4a7f-873e-a51c73a3d4b8",
                    "title": "`x` is a function",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [
                      {
                        "title": "\"before each\" hook",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is a function \"before each\" hook",
                        "timedOut": false,
                        "duration": 0,
                        "pass": false,
                        "fail": false,
                        "pending": false,
                        "code": "numberOfTimesThenWasRetrieved = 0;",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b569d8ba-dc44-4f2d-9459-93eb3a0545eb",
                        "isHook": true,
                        "skipped": false
                      }
                    ],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is a function via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1c5fc31a-ad7c-4302-92f2-b6b462fa2ba1",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is a function via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8476a49a-1b2e-4245-a0fa-12da2fb69ddf",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "1c5fc31a-ad7c-4302-92f2-b6b462fa2ba1",
                      "8476a49a-1b2e-4245-a0fa-12da2fb69ddf"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 12,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "9b5df351-7e5a-4630-864c-ecf282ef5e0f",
                "title": "2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "51d1288c-81aa-4652-a65a-30de3d4cdb0e",
                    "title": "`e` is `undefined`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is `undefined` via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "dbfc01ed-c2e2-4ab3-8e81-5046528885b4",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is `undefined` via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "523869ad-c1fe-4b20-bb72-915cf003aac0",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "dbfc01ed-c2e2-4ab3-8e81-5046528885b4",
                      "523869ad-c1fe-4b20-bb72-915cf003aac0"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 12,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "2de16884-3372-42e3-b6f9-ea0409a10b9b",
                    "title": "`e` is `null`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is `null` via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c5e0bb4b-76fe-463b-b787-1e426595a401",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is `null` via return from a rejected promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "eeab9b59-80b3-4115-8842-e65967cdc100",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "c5e0bb4b-76fe-463b-b787-1e426595a401",
                      "eeab9b59-80b3-4115-8842-e65967cdc100"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 9,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "8d38b90d-52a2-4b5d-8802-e0b2d0b1e08a",
                    "title": "`e` is `false`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is `false` via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9cfa0efe-bb4e-447e-a01e-92c683a96060",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is `false` via return from a rejected promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "dce7ad10-0ad1-41f3-bfb6-9a680ef1dcbe",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "9cfa0efe-bb4e-447e-a01e-92c683a96060",
                      "dce7ad10-0ad1-41f3-bfb6-9a680ef1dcbe"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 11,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "f1b7d2cd-886c-463d-992b-bfabe5a9eca5",
                    "title": "`e` is `0`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is `0` via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "69e42a6e-52a6-431d-97ba-745d0767c9bd",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is `0` via return from a rejected promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b9603faf-5b04-49d5-b13c-7d48f50c1e39",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "69e42a6e-52a6-431d-97ba-745d0767c9bd",
                      "b9603faf-5b04-49d5-b13c-7d48f50c1e39"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 11,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "0add3825-030c-459d-95a1-f45ec29c7d16",
                    "title": "`e` is an error",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is an error via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c9a79492-485b-4f9f-8391-00e63e1f4553",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is an error via return from a rejected promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0ea0df68-e4a5-4a31-b459-687ba7046572",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "c9a79492-485b-4f9f-8391-00e63e1f4553",
                      "0ea0df68-e4a5-4a31-b459-687ba7046572"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 9,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "d7d8f696-ee05-4d40-9d0f-08715f9dcdac",
                    "title": "`e` is an error without a stack",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is an error without a stack via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6b0c884f-d600-46af-9fe0-f2f0bb2a225c",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is an error without a stack via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2f0d915b-b663-4730-870b-ce5ba3739531",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "6b0c884f-d600-46af-9fe0-f2f0bb2a225c",
                      "2f0d915b-b663-4730-870b-ce5ba3739531"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 12,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "d2143860-0074-4ee1-ac5d-4895f1ebeed3",
                    "title": "`e` is a date",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is a date via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "38387585-faa2-4c66-9ab5-a2dbf765e376",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is a date via return from a rejected promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c5e9b0ea-a454-4cd9-b827-d0c38f9039c1",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "38387585-faa2-4c66-9ab5-a2dbf765e376",
                      "c5e9b0ea-a454-4cd9-b827-d0c38f9039c1"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 11,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "7228bbc6-6051-46a5-9755-39788e17cb95",
                    "title": "`e` is an object",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is an object via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "13138945-d912-46cd-b4c7-5504464ca256",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is an object via return from a rejected promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3b880df9-5986-4b2f-93f6-229994b1eacd",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "13138945-d912-46cd-b4c7-5504464ca256",
                      "3b880df9-5986-4b2f-93f6-229994b1eacd"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 10,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "924f361a-138c-442a-a05d-1871703a0d6c",
                    "title": "`e` is an always-pending thenable",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is an always-pending thenable via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0f8b3692-1a3b-4153-a67b-5d280a7bcca2",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is an always-pending thenable via return from a rejected promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d52e6840-a19a-4cb6-b260-1dcdb95f5d23",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "0f8b3692-1a3b-4153-a67b-5d280a7bcca2",
                      "d52e6840-a19a-4cb6-b260-1dcdb95f5d23"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 9,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "6df81d61-5bfc-4b28-9485-d33febbf9d51",
                    "title": "`e` is a fulfilled promise",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is a fulfilled promise via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9f2497ca-298f-4535-881a-e6f813c4fc1c",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is a fulfilled promise via return from a rejected promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "62a1860d-8d60-4b55-b428-94ef1bf870cc",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "9f2497ca-298f-4535-881a-e6f813c4fc1c",
                      "62a1860d-8d60-4b55-b428-94ef1bf870cc"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 11,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "410e35c7-f339-4e08-b6f5-8ed716a84e73",
                    "title": "`e` is a rejected promise",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is a rejected promise via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "fec941a3-b429-4c1f-a9d4-e1ba155fb9de",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is a rejected promise via return from a rejected promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ce68795d-5dfa-4547-aad3-e1b674dac260",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "fec941a3-b429-4c1f-a9d4-e1ba155fb9de",
                      "ce68795d-5dfa-4547-aad3-e1b674dac260"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 10,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "a699f0db-c69b-44ae-ae68-bf1418aa032e",
                "title": "2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise`",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "e765c05d-fe09-41ab-9b44-3d67de8739ae",
                    "title": "Calls with `x` as `this` and two function arguments",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` Calls with `x` as `this` and two function arguments via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e7fe6f05-ee3f-4fb1-90ca-931a827fd5df",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` Calls with `x` as `this` and two function arguments via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "359ceb5e-c7c1-406c-a4a5-7a8c66204161",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "e7fe6f05-ee3f-4fb1-90ca-931a827fd5df",
                      "359ceb5e-c7c1-406c-a4a5-7a8c66204161"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 12,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "e86b73e3-e595-435b-bcbc-f9ef002ff1e9",
                    "title": "Uses the original value of `then`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [
                      {
                        "title": "\"before each\" hook",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` Uses the original value of `then` \"before each\" hook",
                        "timedOut": false,
                        "duration": 0,
                        "pass": false,
                        "fail": false,
                        "pending": false,
                        "code": "numberOfTimesThenWasRetrieved = 0;",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5bc73378-c0dc-4162-a31b-07ee8026dcbd",
                        "isHook": true,
                        "skipped": false
                      }
                    ],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` Uses the original value of `then` via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ceabe483-cf1f-4b72-b14b-50a35b05be56",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` Uses the original value of `then` via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "80d31abf-a41a-4fc7-8bd7-4b86601a9eaf",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "ceabe483-cf1f-4b72-b14b-50a35b05be56",
                      "80d31abf-a41a-4fc7-8bd7-4b86601a9eaf"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 11,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "72871172-d224-41c9-985e-e1ee65c0a622",
                    "title": "2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                      {
                        "uuid": "66f07e64-1164-4746-b72e-5d3f7b57b9b9",
                        "title": "`y` is not a thenable",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "456dbe7c-b6b9-4778-aca2-c98bb86d109a",
                            "title": "`y` is `undefined`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "636441a8-7b34-40d7-bff8-2cc1430b733b",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `undefined` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5955bbc7-54d6-4175-b788-0fb811790448",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `undefined` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4dd8b101-0de6-41f0-8d8d-2b4aae312544",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "5955bbc7-54d6-4175-b788-0fb811790448",
                                  "4dd8b101-0de6-41f0-8d8d-2b4aae312544"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 10,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "e5e698ee-bb1a-4c35-964f-4604e7deba99",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `undefined` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2739830d-68e2-4a6b-b3e0-0530d5f87643",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `undefined` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "48271f2c-9621-4902-bfc9-01fd93310e59",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "2739830d-68e2-4a6b-b3e0-0530d5f87643",
                                  "48271f2c-9621-4902-bfc9-01fd93310e59"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "263d07ea-c351-4b5a-bc84-520d368540eb",
                            "title": "`y` is `null`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "ec6e2f76-9aa4-4742-9edd-832f47dfa0fb",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `null` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e86601be-8fb1-4d28-b855-15f7f3854818",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `null` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0a4bce2c-bb20-446e-9e21-a3a38ef8570a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "e86601be-8fb1-4d28-b855-15f7f3854818",
                                  "0a4bce2c-bb20-446e-9e21-a3a38ef8570a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "5876875a-173c-4dcb-9483-12ea38190db6",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `null` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "46b2a50e-9da2-4b89-9fb5-5075b7357ed2",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `null` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5237d82a-92eb-4e8b-91b9-bd1890cef0d3",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "46b2a50e-9da2-4b89-9fb5-5075b7357ed2",
                                  "5237d82a-92eb-4e8b-91b9-bd1890cef0d3"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "3370c189-f38d-4306-9085-6f2dfd321477",
                            "title": "`y` is `false`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "5065eaa0-1611-4157-86d1-a92aead2683d",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `false` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0dfd7a22-7360-45d4-97dc-1aa30281e01c",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `false` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6132d8ca-cbbe-4bef-a76a-6c8fab6d1ca5",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "0dfd7a22-7360-45d4-97dc-1aa30281e01c",
                                  "6132d8ca-cbbe-4bef-a76a-6c8fab6d1ca5"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "30012170-b9df-4860-85d1-8dd15bc28ac5",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `false` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "eaf7f3d5-0969-4cd1-bce8-7bb11c7d4868",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `false` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7e3212d0-2565-4dae-96c1-12ea06058b71",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "eaf7f3d5-0969-4cd1-bce8-7bb11c7d4868",
                                  "7e3212d0-2565-4dae-96c1-12ea06058b71"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "910fe78a-89fa-4c5c-80f5-c4abb6a6ac0c",
                            "title": "`y` is `5`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "f11f366f-2a99-4b8f-8cbb-c5607f811cb8",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `5` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "fab79a19-b17d-425d-bdba-c4426c4bd416",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `5` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "665af8a1-d21d-4a7e-94c4-e6d6685a0efb",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "fab79a19-b17d-425d-bdba-c4426c4bd416",
                                  "665af8a1-d21d-4a7e-94c4-e6d6685a0efb"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 9,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "5056b785-3a6b-44d7-a26e-e2ede60cdb52",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `5` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "fc5aaa68-e30f-435e-9996-eb1f81f46f23",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `5` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "008c0e8c-28be-4f2e-bb25-29fb11de6f5b",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "fc5aaa68-e30f-435e-9996-eb1f81f46f23",
                                  "008c0e8c-28be-4f2e-bb25-29fb11de6f5b"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "43afe695-764d-426c-9a7c-1e8287f35103",
                            "title": "`y` is an object",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "549bfac6-c389-47d8-9980-a731bbf9dce3",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is an object `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4a6bfc94-7e8f-430f-b77c-63378299e05a",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is an object `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3d1ab22a-e631-48b7-8d46-6a6f54d0b1cc",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "4a6bfc94-7e8f-430f-b77c-63378299e05a",
                                  "3d1ab22a-e631-48b7-8d46-6a6f54d0b1cc"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "d207485c-e8cd-4020-ad08-9dbcbcf684eb",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is an object `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "cda099ff-f0a6-4639-94b1-bf128731ddde",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is an object `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9d22e6d0-f70a-4a9f-a70e-e798b2d4f058",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "cda099ff-f0a6-4639-94b1-bf128731ddde",
                                  "9d22e6d0-f70a-4a9f-a70e-e798b2d4f058"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "cde5bf73-142f-4f46-9f85-ba0df6f42312",
                            "title": "`y` is an array",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "6cfdacdb-a5fb-4034-9554-8ef541046eee",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is an array `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "68c036dd-ad64-4d70-b325-cb1ae842042f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is an array `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "12bbf6c4-6551-4c84-95ee-f5861cbd94f4",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "68c036dd-ad64-4d70-b325-cb1ae842042f",
                                  "12bbf6c4-6551-4c84-95ee-f5861cbd94f4"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "b805a7e5-7cbe-4e90-90c8-b092ba538f3a",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is an array `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c654c598-f7d7-47ae-8067-5720ab26e188",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is an array `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "57ca57f1-4c68-4fc9-aa78-150450d587e1",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "c654c598-f7d7-47ae-8067-5720ab26e188",
                                  "57ca57f1-4c68-4fc9-aa78-150450d587e1"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "d9c8ef83-5a25-42ac-98de-091372886bf5",
                        "title": "`y` is a thenable",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "09c76494-1d5c-403c-9123-57ed67a192d0",
                            "title": "`y` is a synchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "1682092b-e462-4612-b9b1-c5ca0d8c3ead",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "50d3526f-0daa-45c3-be61-1ad1add40963",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7cd40eea-989a-46e0-b9a0-e4a842ed0871",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "50d3526f-0daa-45c3-be61-1ad1add40963",
                                  "7cd40eea-989a-46e0-b9a0-e4a842ed0871"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 10,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "16e122cb-acae-4367-a010-bedd1e026fb0",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "015041ce-d40b-4bbf-985f-e5dc922878ad",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a41696fb-369b-44b0-bda8-4ba2267847ba",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "015041ce-d40b-4bbf-985f-e5dc922878ad",
                                  "a41696fb-369b-44b0-bda8-4ba2267847ba"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "20980f47-7ab3-495d-835f-7e914fd3ff9f",
                            "title": "`y` is an asynchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "e45dbe08-320c-4139-8df3-1842d70936c7",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7f2108b8-f49a-4d40-8116-65172c9adc9d",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "85ef3f5a-f53c-48da-95a6-ac119a1dfae0",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "7f2108b8-f49a-4d40-8116-65172c9adc9d",
                                  "85ef3f5a-f53c-48da-95a6-ac119a1dfae0"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "ef28a9ce-0a9b-4c17-8749-9c9d2a47f724",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "bdbaddce-b704-4dc1-8da7-2325893c3b84",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "606bf341-71f8-4dd6-8b5d-17daf7aa304b",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "bdbaddce-b704-4dc1-8da7-2325893c3b84",
                                  "606bf341-71f8-4dd6-8b5d-17daf7aa304b"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "97b3cb26-603b-4271-8dd4-dc0f9bc4f0c2",
                            "title": "`y` is a synchronously-fulfilled one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "fcfc3669-beb9-45b9-8338-261af3cbabc4",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ef2c7d42-09b8-4ab5-add0-6e837aa18e7a",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b5455939-e57c-47e9-baf0-1806de1ef8a3",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ef2c7d42-09b8-4ab5-add0-6e837aa18e7a",
                                  "b5455939-e57c-47e9-baf0-1806de1ef8a3"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 10,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "b5662368-9969-4c27-95e8-d4092a0b4cd5",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6088e396-dbe7-4dd3-b82f-e92adaf70a93",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "20b8bbcb-2f8c-43dd-aaf4-a0922f6232bb",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "6088e396-dbe7-4dd3-b82f-e92adaf70a93",
                                  "20b8bbcb-2f8c-43dd-aaf4-a0922f6232bb"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "e30810d4-c60c-447a-8046-fd86c9c2203a",
                            "title": "`y` is a thenable that tries to fulfill twice",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "4da12fab-589f-4115-8ae6-e2d279497f03",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "138d112c-3bca-4405-af8c-fb869d1bf218",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "56bcff9e-b7da-4576-a3b8-778a4c70ec42",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "138d112c-3bca-4405-af8c-fb869d1bf218",
                                  "56bcff9e-b7da-4576-a3b8-778a4c70ec42"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 10,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "f93f0512-c7f2-4a17-ae5d-285cd865e026",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5e0fc2b4-7f5c-40cc-b134-de68bafb00cc",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e0728df8-3a75-4bfb-b960-db24f8f76562",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "5e0fc2b4-7f5c-40cc-b134-de68bafb00cc",
                                  "e0728df8-3a75-4bfb-b960-db24f8f76562"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "4da3ae51-301d-48e8-afa8-fc512665b052",
                            "title": "`y` is a thenable that fulfills but then throws",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "c7efde3f-6f66-4a55-a732-cc2e84cfd3a3",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a4b25839-5ff5-4c58-97fe-4c87e510f788",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0e890e61-7c5d-44ad-b9e0-d212bc600bfb",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "a4b25839-5ff5-4c58-97fe-4c87e510f788",
                                  "0e890e61-7c5d-44ad-b9e0-d212bc600bfb"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 9,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "0de87209-11ad-469f-90bc-9c0eb976a37a",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "37d3375e-d3b5-443b-8867-59664ca69e79",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a1c18f9c-b0dd-445e-846a-542ff134d1f3",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "37d3375e-d3b5-443b-8867-59664ca69e79",
                                  "a1c18f9c-b0dd-445e-846a-542ff134d1f3"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "3c3b87bf-9877-44d7-a789-888c77bfc183",
                            "title": "`y` is an already-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "f3d385bc-36f2-4ebf-a653-ae444af01ade",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e25f3966-06ed-4bb3-bd00-00946ac3de43",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2d13ba56-2610-48d8-8037-71f76b322cb4",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "e25f3966-06ed-4bb3-bd00-00946ac3de43",
                                  "2d13ba56-2610-48d8-8037-71f76b322cb4"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "4cbf706c-d95f-4ee5-afb0-40216166b7b2",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9cce2598-4950-4909-b1d0-774744a55530",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5caa2ed9-1146-44a7-b7ca-db578581ac88",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "9cce2598-4950-4909-b1d0-774744a55530",
                                  "5caa2ed9-1146-44a7-b7ca-db578581ac88"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "57a7f4b0-c97d-4d02-8bd9-f8a92300639e",
                            "title": "`y` is an eventually-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "4d31ddde-730d-49a1-ba40-504f6d7aa9a4",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1d02f913-e508-427b-8a9f-980e1280e8d9",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6e2ddda8-3caa-4750-8469-66c1a27e15bb",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "1d02f913-e508-427b-8a9f-980e1280e8d9",
                                  "6e2ddda8-3caa-4750-8469-66c1a27e15bb"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 118,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "ed82d315-3c5f-4529-a02d-3f64c5bd47e1",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3dbd3cbc-2d92-44ed-8d2b-8e113f24bf1f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9f667d19-4b5b-4bf0-80fa-fdee45b84cc1",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "3dbd3cbc-2d92-44ed-8d2b-8e113f24bf1f",
                                  "9f667d19-4b5b-4bf0-80fa-fdee45b84cc1"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 121,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "d1e30698-b058-4f55-8eba-3cb35024cddb",
                            "title": "`y` is a synchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "542b7d28-4f61-459f-882e-7775c4cee263",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0e8b1e76-ffa4-4459-ae2f-acb29ad4830c",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "aee5b3e4-943d-47f9-bed0-977b2b0d1bc8",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "0e8b1e76-ffa4-4459-ae2f-acb29ad4830c",
                                  "aee5b3e4-943d-47f9-bed0-977b2b0d1bc8"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "aec73506-93d7-4563-9dc6-9f86ddad4f94",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "43aaa448-1eb0-4c5e-9a30-b0ec8522d1c4",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "bf68993f-101e-4531-a1f7-0e725e5cb033",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "43aaa448-1eb0-4c5e-9a30-b0ec8522d1c4",
                                  "bf68993f-101e-4531-a1f7-0e725e5cb033"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "0e876ae8-6fb8-446b-869e-5845cfa13d6c",
                            "title": "`y` is an asynchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "3a56a73a-8908-44da-9aab-fd1e4fd21243",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0c986379-2a8f-487b-8a83-8de3dc0201db",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e0abda81-4a54-46a6-8ada-7e768c65bee0",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "0c986379-2a8f-487b-8a83-8de3dc0201db",
                                  "e0abda81-4a54-46a6-8ada-7e768c65bee0"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "527cdaca-65ac-4681-8eb2-d24aeb8f9d3c",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2fb4fa60-1e28-4a38-9881-999628cf8ade",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ca48895b-6791-4a7e-a1e0-94c84c54c588",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "2fb4fa60-1e28-4a38-9881-999628cf8ade",
                                  "ca48895b-6791-4a7e-a1e0-94c84c54c588"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "e8b5be9c-0d7e-4f6a-b1e5-54199a18d56d",
                            "title": "`y` is a synchronously-rejected one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "ce3623b1-fc18-4fe5-992e-ac6db836b3b7",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "bb26125f-e599-44cd-adda-536d9636fe7f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9639eba1-33e6-4894-8b97-40ea4ac5576a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "bb26125f-e599-44cd-adda-536d9636fe7f",
                                  "9639eba1-33e6-4894-8b97-40ea4ac5576a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 10,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "68443a2b-2d1b-4014-87e5-ccec10f90eaf",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b4e71fbc-aa47-42a4-8442-f5939faeaefc",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5de9ce37-24f7-47f1-b481-4f5481dc73e1",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "b4e71fbc-aa47-42a4-8442-f5939faeaefc",
                                  "5de9ce37-24f7-47f1-b481-4f5481dc73e1"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "1efb78db-4c57-40f0-a9b4-fcfaf71ebdb2",
                            "title": "`y` is a thenable that immediately throws in `then`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "fcc2120d-3684-45d1-af7c-c87ec925c34f",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6d15ce59-7f03-4d69-9078-c15af1ba3cff",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "990dbd33-27c8-4602-a226-b87a86d471bf",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "6d15ce59-7f03-4d69-9078-c15af1ba3cff",
                                  "990dbd33-27c8-4602-a226-b87a86d471bf"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 9,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "831fa5d5-e040-463d-857b-107fe4b3cd97",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "770ec703-e998-4102-9069-34d05734b51e",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b9705053-61fc-46bc-8929-fd02fd8dae0f",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "770ec703-e998-4102-9069-34d05734b51e",
                                  "b9705053-61fc-46bc-8929-fd02fd8dae0f"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "ea0e606d-b3c6-4b20-90c3-fa5fb05fab91",
                            "title": "`y` is an object with a throwing `then` accessor",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "7d75185b-c623-4292-b470-29f9b9ee8597",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8a5bf8b7-b8f6-4e90-9788-2af5b1cf8704",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5014ae06-4fed-4acf-9965-2caeb3b23f9d",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "8a5bf8b7-b8f6-4e90-9788-2af5b1cf8704",
                                  "5014ae06-4fed-4acf-9965-2caeb3b23f9d"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 9,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "44f6c175-7d09-4312-ab5d-8ea21f90bac2",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2f40a44a-722c-4d23-a3e0-016c114559ee",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "24c4b6f6-4e91-41b6-8a6c-b8d0b4dea878",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "2f40a44a-722c-4d23-a3e0-016c114559ee",
                                  "24c4b6f6-4e91-41b6-8a6c-b8d0b4dea878"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "c3b17c77-c201-42de-a27d-d0ff41face00",
                            "title": "`y` is an already-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "8800b09e-433b-4fff-8f84-b20f9225645b",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an already-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a187c1ae-1f8b-4eb9-8bc3-bf2a6085e472",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an already-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "cf7a659b-ae86-4d1e-af40-84517c9eb20d",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "a187c1ae-1f8b-4eb9-8bc3-bf2a6085e472",
                                  "cf7a659b-ae86-4d1e-af40-84517c9eb20d"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "cd5a66ad-e0dd-4f3d-b2c9-975f0cc92dd3",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "108a8ea4-bbc7-476b-8fb9-633f63546b23",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c2ee1555-295d-4778-849f-f81a5cd12ad8",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "108a8ea4-bbc7-476b-8fb9-633f63546b23",
                                  "c2ee1555-295d-4778-849f-f81a5cd12ad8"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "5ef4d584-d342-40dd-b7f1-2f5a687247d1",
                            "title": "`y` is an eventually-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "1a3ec585-2b93-48d6-b28b-2c356f01ba44",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "aaa3b28f-e983-48c6-9122-a8147d12377f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 58,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "159adaa9-7439-4b0c-a011-bb600a422163",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "aaa3b28f-e983-48c6-9122-a8147d12377f",
                                  "159adaa9-7439-4b0c-a011-bb600a422163"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 119,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "3f970807-6447-407e-acdb-553d36c11ee9",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3891ece8-15b6-4609-a124-991d77a570b2",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c0968f88-05d7-44e2-b4cb-0b82d549cbbd",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "3891ece8-15b6-4609-a124-991d77a570b2",
                                  "c0968f88-05d7-44e2-b4cb-0b82d549cbbd"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 125,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "5a403b15-7803-47d4-9791-a8c19b048bd4",
                        "title": "`y` is a thenable for a thenable",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "55fe30ac-ff19-4202-8ba5-15eb507e2d22",
                            "title": "`y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "c3ad62e8-f5a3-43f4-a20e-41935e6b73ae",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d964eaa4-8f62-47bb-bd33-5716cd664c8c",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "215fea8e-5eaa-419c-9a67-326dd2c4dd82",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "d964eaa4-8f62-47bb-bd33-5716cd664c8c",
                                  "215fea8e-5eaa-419c-9a67-326dd2c4dd82"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 9,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "e29618f4-27e0-4521-b01c-98148f0cddb0",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7c14026d-7a44-4330-a722-d046ebaac911",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0bec5340-5999-4de0-b4d2-d238f90151f2",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "7c14026d-7a44-4330-a722-d046ebaac911",
                                  "0bec5340-5999-4de0-b4d2-d238f90151f2"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "e440a2a2-790d-4357-abd5-f667921028b8",
                            "title": "`y` is a synchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "ec7f5fc4-4b3b-4d3d-8ba5-58434b23a582",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "16c01598-0539-4b37-99ae-91a313bfb8f2",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7d94b061-e788-49e2-be97-afb90c46031f",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "16c01598-0539-4b37-99ae-91a313bfb8f2",
                                  "7d94b061-e788-49e2-be97-afb90c46031f"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "4353ab99-8c55-49da-b24a-69d7113bdde7",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "92acd05a-423d-47b9-9650-79c021a65e45",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a87b6470-e2d9-4095-983a-0c626cee4406",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "92acd05a-423d-47b9-9650-79c021a65e45",
                                  "a87b6470-e2d9-4095-983a-0c626cee4406"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "4be8c527-6f05-4922-9709-95406a7ac5ad",
                            "title": "`y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "d7b05fc1-c55a-4398-b00a-ac8f9b87cc49",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "01b808a0-2f05-4576-aa9b-7a88cd4ad312",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "03527bf4-22b7-434c-9f8c-2b6ba75cc99a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "01b808a0-2f05-4576-aa9b-7a88cd4ad312",
                                  "03527bf4-22b7-434c-9f8c-2b6ba75cc99a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 10,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "e15f6f87-d15d-4644-ab90-7bf20efbf840",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0f8bfb92-0c57-4130-a1b6-1b66f17bd19c",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "27108f47-f8f0-4de0-84b9-493654e9cbaa",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "0f8bfb92-0c57-4130-a1b6-1b66f17bd19c",
                                  "27108f47-f8f0-4de0-84b9-493654e9cbaa"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "8a802f23-04d2-4aae-8b62-523d8cf91c93",
                            "title": "`y` is a synchronously-fulfilled custom thenable for a thenable that tries to fulfill twice",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "8b5c047c-3f2e-4eb3-9d84-e023678da6ac",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "aa71ad14-b508-4a25-bb3c-f4affcf983a3",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0f949849-5c40-47ef-bd50-d0578ee165d4",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "aa71ad14-b508-4a25-bb3c-f4affcf983a3",
                                  "0f949849-5c40-47ef-bd50-d0578ee165d4"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "a280e38f-5f90-493f-933e-4a44ab9167c9",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "40ac9c46-faa3-4cd6-9344-b48cb97a393a",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3ad11015-82ac-42a4-9aaf-178b4c7e0a9c",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "40ac9c46-faa3-4cd6-9344-b48cb97a393a",
                                  "3ad11015-82ac-42a4-9aaf-178b4c7e0a9c"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "f1716219-9e4f-4c17-92dc-cd6916d920dd",
                            "title": "`y` is a synchronously-fulfilled custom thenable for a thenable that fulfills but then throws",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "ce18c0a9-c377-4297-81b0-4fabc47a3d91",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9f6fcd6e-273d-4e3e-859a-f9b9825f5c82",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e9af32d5-1a9e-49d4-b2af-15dcdd4a5467",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "9f6fcd6e-273d-4e3e-859a-f9b9825f5c82",
                                  "e9af32d5-1a9e-49d4-b2af-15dcdd4a5467"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "14e704c5-1715-4828-ba9e-598dd25ea224",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8dce6467-3ebd-446c-9315-14444a3d494c",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ef75d3c7-3415-42b1-ba97-731e287df44e",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "8dce6467-3ebd-446c-9315-14444a3d494c",
                                  "ef75d3c7-3415-42b1-ba97-731e287df44e"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "4845a681-8aad-4491-8929-33bdde44689e",
                            "title": "`y` is a synchronously-fulfilled custom thenable for an already-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "e3da259f-41c4-4be3-9fd3-eebe8a4a0e9a",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "04d8d56f-95eb-4e69-9b42-e9343a4699b8",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "63875bcc-5f37-4872-8238-5fcb8da22958",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "04d8d56f-95eb-4e69-9b42-e9343a4699b8",
                                  "63875bcc-5f37-4872-8238-5fcb8da22958"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "44e10ff1-3b9f-43dd-84fc-945a968cd807",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "928afa16-663e-4265-b5f1-86177b755a0b",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0baa2a53-335b-470b-ad57-210b7a9b03d6",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "928afa16-663e-4265-b5f1-86177b755a0b",
                                  "0baa2a53-335b-470b-ad57-210b7a9b03d6"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "6a7439e4-d34b-4404-8ee2-dffc9f29c907",
                            "title": "`y` is a synchronously-fulfilled custom thenable for an eventually-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "1f597563-f9f6-4ff2-b254-8023aa53cb77",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3402895c-c382-4fcd-8329-f6fbf9caaf82",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "00e6bad8-e617-42dc-accf-873a557d5272",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "3402895c-c382-4fcd-8329-f6fbf9caaf82",
                                  "00e6bad8-e617-42dc-accf-873a557d5272"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 119,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "0debb198-5d68-46db-bffa-d3faff86dd2e",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "cc43b9d9-4d91-4368-988d-c161376a9283",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "92af8921-e9c6-4b75-866e-28f4aaa10164",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "cc43b9d9-4d91-4368-988d-c161376a9283",
                                  "92af8921-e9c6-4b75-866e-28f4aaa10164"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 123,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "b68678b0-dce5-4392-a2d3-ba868c3eab08",
                            "title": "`y` is a synchronously-fulfilled custom thenable for a synchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "f09a7cb5-50b2-4f44-81c4-c55cfc46fd23",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "eebc11c8-cdcb-44a0-b421-85226a4311c2",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "19239830-99ca-4867-99ff-af0717de12a5",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "eebc11c8-cdcb-44a0-b421-85226a4311c2",
                                  "19239830-99ca-4867-99ff-af0717de12a5"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 8,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "97bd173a-c355-4f82-b445-4ade52808a8b",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b13a6010-9acf-4151-9017-749eb49d665f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "13297b05-42cb-488a-b27b-6d83d5076f85",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "b13a6010-9acf-4151-9017-749eb49d665f",
                                  "13297b05-42cb-488a-b27b-6d83d5076f85"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "ceab1b12-ebde-4056-b127-3280265048c2",
                            "title": "`y` is a synchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "4a14b7a0-e55c-4f77-b2b1-c51df095a4bc",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9212290a-4bb1-42d7-ae54-5f15884b1233",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b7f78d1f-0017-4e19-9ff9-70bc20fd84f3",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "9212290a-4bb1-42d7-ae54-5f15884b1233",
                                  "b7f78d1f-0017-4e19-9ff9-70bc20fd84f3"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "62f9f0b5-17ef-4b1a-bdd7-e0632e7089e5",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d7625067-9172-4f44-8ad2-2dc6392cfee7",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "68173299-441a-414e-bb9d-e4d13b6d33db",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "d7625067-9172-4f44-8ad2-2dc6392cfee7",
                                  "68173299-441a-414e-bb9d-e4d13b6d33db"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "1c34e088-aa42-42b1-bf22-6adc7643d48b",
                            "title": "`y` is a synchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "1335a752-9762-4098-9ee1-657e323c86ae",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "12b29349-cb63-40ca-a6c9-31b40046fc6f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c3dd846e-f331-4aaa-8559-d40cc55f1afd",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "12b29349-cb63-40ca-a6c9-31b40046fc6f",
                                  "c3dd846e-f331-4aaa-8559-d40cc55f1afd"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "4209bce4-617b-4327-9dc6-eef06bbaed72",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3c279777-dba9-4882-b5d2-af189eab81ef",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "778bdc13-93d2-453a-b3fd-c8aad5fb1e27",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "3c279777-dba9-4882-b5d2-af189eab81ef",
                                  "778bdc13-93d2-453a-b3fd-c8aad5fb1e27"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "eb3b561d-8b0a-408d-b2c5-e47180e6f7d9",
                            "title": "`y` is a synchronously-fulfilled custom thenable for a thenable that immediately throws in `then`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "baad3288-dcd6-44e0-8e59-b81c47b9cb63",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "58dba7e7-5e8c-413e-b380-f0ecce834a8b",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "85fc6a02-04b4-44e5-9d4e-64b1efd73de6",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "58dba7e7-5e8c-413e-b380-f0ecce834a8b",
                                  "85fc6a02-04b4-44e5-9d4e-64b1efd73de6"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "e2ecf7cb-e22e-48e9-95b3-34df5dcf4dd3",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9adf0187-02b7-4ad8-ad1e-0c760d48c45a",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c47fbfb8-dcc9-42e2-a202-f07921d1cec5",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "9adf0187-02b7-4ad8-ad1e-0c760d48c45a",
                                  "c47fbfb8-dcc9-42e2-a202-f07921d1cec5"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "78da18f6-2682-4f4d-8bdd-4c661dd27f8b",
                            "title": "`y` is a synchronously-fulfilled custom thenable for an object with a throwing `then` accessor",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "b1fd71ec-25d0-43b3-b3ed-e1fd6b6efe46",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 24,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "58a7a48d-29d6-45a4-8de0-b95dbc7263a5",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5c401141-ee47-46c0-8490-351e0fea33d0",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "58a7a48d-29d6-45a4-8de0-b95dbc7263a5",
                                  "5c401141-ee47-46c0-8490-351e0fea33d0"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 30,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "25aedc1b-3c24-48ef-a6e8-c7597b4a802b",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2c14c68d-9616-490f-a321-48818b504701",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "21b168f5-4b6f-4632-a987-3a789aedf8c7",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "2c14c68d-9616-490f-a321-48818b504701",
                                  "21b168f5-4b6f-4632-a987-3a789aedf8c7"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "3ef57507-b4b2-450a-89f3-11e0062a3ac4",
                            "title": "`y` is a synchronously-fulfilled custom thenable for an already-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "b76d229f-eb1d-4680-b47b-cf8fadc10b49",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c3498895-a957-41b5-a6bf-0282cfb62bcc",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "293d829b-5c7d-4d6c-86ab-279e69980fd7",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "c3498895-a957-41b5-a6bf-0282cfb62bcc",
                                  "293d829b-5c7d-4d6c-86ab-279e69980fd7"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "51725e77-532b-427c-af8e-8070bcf17d21",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "aff96fec-51fb-4802-9579-42e3221d1bab",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7b955b79-7b77-4c28-a83b-08d174e47209",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "aff96fec-51fb-4802-9579-42e3221d1bab",
                                  "7b955b79-7b77-4c28-a83b-08d174e47209"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 20,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "6fdb8202-abb2-4c33-ba7a-724bdfdfc8ab",
                            "title": "`y` is a synchronously-fulfilled custom thenable for an eventually-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "dab8e43a-92d9-48f4-b339-eee2c33372f4",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1c8f90f0-e2ea-4753-88da-dd93a7c5a060",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "89c4618e-916e-4f5d-b739-389928f66858",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "1c8f90f0-e2ea-4753-88da-dd93a7c5a060",
                                  "89c4618e-916e-4f5d-b739-389928f66858"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 119,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "5ab0c6a4-5476-47bb-ae29-10d4b6056b48",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ae798157-ee7b-40e6-a7d1-08076dc49d9b",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ad8c6802-09e9-460f-b583-274c8ca38496",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ae798157-ee7b-40e6-a7d1-08076dc49d9b",
                                  "ad8c6802-09e9-460f-b583-274c8ca38496"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 121,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "a559a58f-bb26-492a-a9fc-b48d90684f42",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "09f00af8-3d8a-4d82-bde6-bb74d502fd87",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8cedcb0a-77a7-4d43-bfc7-ca48b0e6e05a",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e7f24c8f-105a-4df9-9f51-21dde2068b72",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "8cedcb0a-77a7-4d43-bfc7-ca48b0e6e05a",
                                  "e7f24c8f-105a-4df9-9f51-21dde2068b72"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "8fba00c2-5435-4a3e-9745-51fb9328e76d",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "de99acff-4a29-4699-8f0a-f7edbe5218c3",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "fe10dfc9-b3f1-4aec-8017-86d5f079ad23",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "de99acff-4a29-4699-8f0a-f7edbe5218c3",
                                  "fe10dfc9-b3f1-4aec-8017-86d5f079ad23"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "eb4a45e7-6808-42d5-8b8d-4a90fdf8f7fc",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "428f90e0-426f-4b8f-a324-0ef0803b1a8d",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "cab94acf-1c66-4782-b4cc-a25e7240611c",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c582742a-be15-4c13-90af-54543ca28603",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "cab94acf-1c66-4782-b4cc-a25e7240611c",
                                  "c582742a-be15-4c13-90af-54543ca28603"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "e87172be-cccb-4413-a45b-9952841d45e2",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ad4df8ed-969d-4983-a7ef-fa9d36f738b5",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7a71e99b-ad43-48f1-9210-7bd694d9b6a0",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ad4df8ed-969d-4983-a7ef-fa9d36f738b5",
                                  "7a71e99b-ad43-48f1-9210-7bd694d9b6a0"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 21,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "a7823799-4596-4495-9f5e-6cf23149ccff",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "eebe9bfd-b1cc-4d08-b16d-38ac9b062f87",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5bc6ad7e-b5d3-4f5b-a013-b02723f95f03",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d703bbfd-a578-4759-a222-b38d800878e7",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "5bc6ad7e-b5d3-4f5b-a013-b02723f95f03",
                                  "d703bbfd-a578-4759-a222-b38d800878e7"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "952c2103-1b10-47c5-b69f-973b88e01a0b",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "04296168-2a5e-4516-bf2a-93ecbb90bf0b",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "70905766-6e4f-45f3-b778-941ca1de1e09",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "04296168-2a5e-4516-bf2a-93ecbb90bf0b",
                                  "70905766-6e4f-45f3-b778-941ca1de1e09"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 19,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "62c68405-c460-4e5b-8557-4c0f74810c04",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for a thenable that tries to fulfill twice",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "5405e13b-4f05-4ba0-80e8-961a3600de11",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5335d0c2-5ac1-4e9c-9ab3-2692a527f414",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "97b93f79-d464-40a5-9689-3d01365898f4",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "5335d0c2-5ac1-4e9c-9ab3-2692a527f414",
                                  "97b93f79-d464-40a5-9689-3d01365898f4"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "79e9f705-738d-4099-a7fd-62b345ec9fe5",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1104d71a-e95b-47ac-a9df-c4cb888bbfc6",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "51994996-bf45-4205-aa51-1d7385d98891",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "1104d71a-e95b-47ac-a9df-c4cb888bbfc6",
                                  "51994996-bf45-4205-aa51-1d7385d98891"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "1a0c28b3-187c-45ef-bd83-a79c85be38aa",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for a thenable that fulfills but then throws",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "8a224f96-3e8f-4f88-821e-a26902a82074",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5acb1d1e-fd96-4620-bd81-d668b7640807",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "73e472c2-a41f-4d6a-91d3-e595d5bb4d89",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "5acb1d1e-fd96-4620-bd81-d668b7640807",
                                  "73e472c2-a41f-4d6a-91d3-e595d5bb4d89"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "4be7721c-d5bb-46cf-b37f-282ed778dbfa",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e38221fa-0306-4235-afa4-fe884a5439e0",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "cbb8e01f-11db-44a5-81b7-9f7024ac2a7e",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "e38221fa-0306-4235-afa4-fe884a5439e0",
                                  "cbb8e01f-11db-44a5-81b7-9f7024ac2a7e"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "f63951f5-c39c-49b7-8bd9-b216266b3463",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for an already-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "181881b3-5395-4518-af24-2b0504fff1ff",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "804f5c54-e010-405f-878e-f690441e0431",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "08d951c0-4104-4066-82f0-81a04dd97d1e",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "804f5c54-e010-405f-878e-f690441e0431",
                                  "08d951c0-4104-4066-82f0-81a04dd97d1e"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "de119c71-b68e-46be-baa5-7fe7b1944bd5",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5e986b87-5a27-44be-be41-629f7e7ea8bf",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "fefe58ed-0c4b-47c3-8a8c-51d3fb64a8fa",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "5e986b87-5a27-44be-be41-629f7e7ea8bf",
                                  "fefe58ed-0c4b-47c3-8a8c-51d3fb64a8fa"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 23,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "22d1a56b-6688-4cf1-a9af-02f6c4692de0",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for an eventually-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "13ef3fd9-b0e1-4d05-b2ab-0cb7d527596f",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3d8c8c2f-7ec9-477d-b1ee-c81a6435d3a0",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "73cd9c79-6037-4376-abda-22a1a2688056",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "3d8c8c2f-7ec9-477d-b1ee-c81a6435d3a0",
                                  "73cd9c79-6037-4376-abda-22a1a2688056"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 120,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "81e738f5-8e29-476c-b2b7-bac48097822b",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5b2dc4f3-7534-470c-ba51-f7f584c70155",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3bb41189-427e-4cbc-a527-3382e103d591",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "5b2dc4f3-7534-470c-ba51-f7f584c70155",
                                  "3bb41189-427e-4cbc-a527-3382e103d591"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 118,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "917abdab-e7e3-4cd2-88b4-1844ebb2636b",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "95f67ebe-e422-4741-90ed-b857366152d1",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "00bf9eb8-ed7d-4350-98cf-2a013c300736",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e8e5dedb-b637-406e-8d34-fb08d136e356",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "00bf9eb8-ed7d-4350-98cf-2a013c300736",
                                  "e8e5dedb-b637-406e-8d34-fb08d136e356"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "54be60e2-be80-488a-bd63-4375df184d95",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6a49e155-bb1b-4a2b-b06f-17cf1d882a06",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "826dc06d-f4e9-4ea1-9305-d42a6e3b80a2",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "6a49e155-bb1b-4a2b-b06f-17cf1d882a06",
                                  "826dc06d-f4e9-4ea1-9305-d42a6e3b80a2"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "b88c9771-154e-4d2b-8e79-aed1aafcad23",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "9e036cfe-72c5-41ce-ae7f-9d819f7d3c7d",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6218859b-2c64-4e08-8643-ab6f813d9dcb",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ad77ad31-1c61-4906-b1e2-3f139c38e319",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "6218859b-2c64-4e08-8643-ab6f813d9dcb",
                                  "ad77ad31-1c61-4906-b1e2-3f139c38e319"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 19,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "7c8b42bf-9550-44ef-a063-fa8927671284",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2afb5beb-ee35-45e9-88ae-7fa4ff7ae38f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "77471da9-9abd-420e-a910-082f8c640ece",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "2afb5beb-ee35-45e9-88ae-7fa4ff7ae38f",
                                  "77471da9-9abd-420e-a910-082f8c640ece"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 22,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "51c509d2-fad3-4182-a021-e0b4dd6e6de7",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "c6446e4f-0e3d-4d92-9fcf-99cb61616ae0",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ad53e201-b216-49fc-ba0d-87c5d09a708f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "44d3061f-2b89-468b-8bf2-25845ff5decd",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ad53e201-b216-49fc-ba0d-87c5d09a708f",
                                  "44d3061f-2b89-468b-8bf2-25845ff5decd"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "58d98e9d-f178-42f9-93ba-db0b0c981706",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9099fa93-6714-4a76-9395-34f03b8ed060",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3802dbca-78a5-41fd-b1c3-2f81b6c2a7a5",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "9099fa93-6714-4a76-9395-34f03b8ed060",
                                  "3802dbca-78a5-41fd-b1c3-2f81b6c2a7a5"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "86326d60-889f-4a62-a99e-ac5e033a34a7",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for a thenable that immediately throws in `then`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "2435af5b-10b7-4e82-b846-cd0a233c99f2",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "55e1de10-ea9a-43c3-985a-88480868d730",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "52fa22f2-4dfd-4271-a9e7-4ce13072a50d",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "55e1de10-ea9a-43c3-985a-88480868d730",
                                  "52fa22f2-4dfd-4271-a9e7-4ce13072a50d"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "5d16c5c1-7e81-4b9e-bbee-642c0bd1f220",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c171919b-47be-4126-8a0b-8fc261e38598",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7487b9b4-35f7-43d5-914b-f84d00ef99a5",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "c171919b-47be-4126-8a0b-8fc261e38598",
                                  "7487b9b4-35f7-43d5-914b-f84d00ef99a5"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "fa92a007-d3d9-427a-9801-a6581f56a8fd",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for an object with a throwing `then` accessor",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "6ad8446a-7c73-461c-be9e-b8b75ef4e0b4",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7261c468-a75f-4062-a72d-41d5229317dd",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4ffd5d2d-b41e-4058-aec1-cbcd59320049",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "7261c468-a75f-4062-a72d-41d5229317dd",
                                  "4ffd5d2d-b41e-4058-aec1-cbcd59320049"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "b5eac895-1fd0-4fa7-83ac-8b395de76c65",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "34c59e18-44d7-4319-9f9f-4aed95664329",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a82c290c-40b4-4fde-8949-d8a73c4f147a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "34c59e18-44d7-4319-9f9f-4aed95664329",
                                  "a82c290c-40b4-4fde-8949-d8a73c4f147a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "ca2cbc7f-700d-43a8-8b63-2fcb555a3d92",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for an already-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "f1ba54e8-b02d-48b6-ab57-d970d9158575",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6dcec9f1-d4e8-479e-8f47-623e2c9e9637",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5f03017a-3caa-4f80-bab0-339d95a76346",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "6dcec9f1-d4e8-479e-8f47-623e2c9e9637",
                                  "5f03017a-3caa-4f80-bab0-339d95a76346"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "7e143201-ea31-4f3f-856b-09e33c1bcc31",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "545f8d81-424d-483d-9a9d-558b92012fae",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "43f48537-c93a-4f8c-a5c9-8c302e3b826d",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "545f8d81-424d-483d-9a9d-558b92012fae",
                                  "43f48537-c93a-4f8c-a5c9-8c302e3b826d"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 21,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "0f7ed78a-50e1-43d0-9fa2-f30bbe161cee",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for an eventually-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "497b8b11-0348-48a5-a1cd-50654359ecf8",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 58,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c0051a72-4558-4586-aaec-0efe176d5e54",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9e33afac-7e56-4152-9fe8-50f0eb1764df",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "c0051a72-4558-4586-aaec-0efe176d5e54",
                                  "9e33afac-7e56-4152-9fe8-50f0eb1764df"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 117,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "50f57c57-cf6f-4887-adf2-5b89ed5f8773",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c28b631d-31d8-4d16-8a73-a9479a25d4ee",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7bb77c20-d498-42ec-95b1-0f61171cacc9",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "c28b631d-31d8-4d16-8a73-a9479a25d4ee",
                                  "7bb77c20-d498-42ec-95b1-0f61171cacc9"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 123,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "f3e78fc1-bb8d-4b71-8076-81870ad546a6",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "91600b3b-20d4-4ddd-9766-39ead056f710",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "05df6905-a3a0-45db-962e-0dd94ba33732",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a2708028-1f2c-4130-9596-40d669f157be",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "05df6905-a3a0-45db-962e-0dd94ba33732",
                                  "a2708028-1f2c-4130-9596-40d669f157be"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 7,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "5cc8447f-46fb-4885-a212-f14a83d16032",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "491aa177-ef09-4d04-b5eb-7a1e373f7c00",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "168e96cb-9b35-4f29-8b1c-7896d0f37a0b",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "491aa177-ef09-4d04-b5eb-7a1e373f7c00",
                                  "168e96cb-9b35-4f29-8b1c-7896d0f37a0b"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "3202ed35-ebe4-4008-85e8-c82f59bd47a1",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for an asynchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "0631507f-7c25-4f08-831a-6535c755abf2",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ea52f5a1-d4a2-45de-88a9-a8ca05e304e2",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "95539eb1-0121-4c42-81f0-716d3c08fa61",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ea52f5a1-d4a2-45de-88a9-a8ca05e304e2",
                                  "95539eb1-0121-4c42-81f0-716d3c08fa61"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "c3424758-b7b9-40d2-8f73-d98a4edf47a3",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "69d1703b-340a-4db0-bcc5-856b5c4b180c",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "484ef528-0dc5-4e04-a1f9-749432bf92ff",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "69d1703b-340a-4db0-bcc5-856b5c4b180c",
                                  "484ef528-0dc5-4e04-a1f9-749432bf92ff"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "68f3d7ef-1c68-407f-9b0f-42e466d2ea66",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "38895f2f-3c0d-488c-b886-face05ca53a7",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6b184555-a160-46a7-953e-408e48ba4d83",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9f4e29a9-fb7a-418c-8798-3fc75603874c",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "6b184555-a160-46a7-953e-408e48ba4d83",
                                  "9f4e29a9-fb7a-418c-8798-3fc75603874c"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 10,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "f3d7808c-8a8c-4032-89bc-2f3d1f3e407d",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1908b56c-b544-4ad0-a52d-cdbc541a0bf8",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9f1d57c7-8941-442e-96a8-6a943a2b732d",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "1908b56c-b544-4ad0-a52d-cdbc541a0bf8",
                                  "9f1d57c7-8941-442e-96a8-6a943a2b732d"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "469b7882-4829-49d2-b766-504283ccb4ff",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for a thenable that tries to fulfill twice",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "4fa092e0-a2db-40a9-bd33-f7cea3fe80b1",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b0374c91-5321-4f2e-83fb-d212ee346648",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "63d69452-0570-4f5e-a821-c24af9a15f11",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "b0374c91-5321-4f2e-83fb-d212ee346648",
                                  "63d69452-0570-4f5e-a821-c24af9a15f11"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "50a09087-cd9c-4ab5-b202-4926cbbf146f",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2dd42c92-ca08-4eac-a2b5-b079f2706f10",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "be61c994-9300-4388-94f6-22131cadbe0c",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "2dd42c92-ca08-4eac-a2b5-b079f2706f10",
                                  "be61c994-9300-4388-94f6-22131cadbe0c"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "2a9b2557-13d9-4e72-b4f2-de39f1612105",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for a thenable that fulfills but then throws",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "629a6790-eee2-42b7-959c-dc57b6f5471d",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0d2b33be-dbf3-41a8-b307-b4d55483c449",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a5beb22f-6ed7-4e75-814f-b88066c18975",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "0d2b33be-dbf3-41a8-b307-b4d55483c449",
                                  "a5beb22f-6ed7-4e75-814f-b88066c18975"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "7817bb8c-1752-44c7-ac5d-ba27e8ca1aba",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e3277ff0-a20c-42d7-b0fb-e69779490a23",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "fdfa32fb-69b4-4e53-a558-18d68c757be3",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "e3277ff0-a20c-42d7-b0fb-e69779490a23",
                                  "fdfa32fb-69b4-4e53-a558-18d68c757be3"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "091d943b-8956-4451-80fb-c386dc67f998",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for an already-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "4cd127bb-44ea-41d7-bf03-a07582dc622f",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ddeff1d2-5f2e-4baf-9a52-613838fb934c",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "91d7974f-7a6b-4bbc-a492-9e82d05eda55",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ddeff1d2-5f2e-4baf-9a52-613838fb934c",
                                  "91d7974f-7a6b-4bbc-a492-9e82d05eda55"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "da0216cb-fec5-46d3-bd0c-b2de1d9e10aa",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "af59a1b0-b320-462e-9024-912bb6cdecc1",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "526d0d17-5b9c-4311-a1e1-4c73077ff1da",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "af59a1b0-b320-462e-9024-912bb6cdecc1",
                                  "526d0d17-5b9c-4311-a1e1-4c73077ff1da"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "d7e4bc12-bb40-47f2-9f20-1c513883133d",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for an eventually-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "db414c59-bfa8-4c3b-a414-7df34f479a80",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d9afa5b5-9667-44c5-8bb3-1350fc1b01c2",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 58,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "bf7193d8-bed1-48c3-a1ed-3389011bfef9",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "d9afa5b5-9667-44c5-8bb3-1350fc1b01c2",
                                  "bf7193d8-bed1-48c3-a1ed-3389011bfef9"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 118,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "0e46c49b-f5b1-4e0c-a3bb-b0968605351a",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "90f1998e-fadc-4a0e-84c0-f67a6603b58f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f5fb2c98-2556-4fc2-a6b6-4e51986bbdbb",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "90f1998e-fadc-4a0e-84c0-f67a6603b58f",
                                  "f5fb2c98-2556-4fc2-a6b6-4e51986bbdbb"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 122,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "830a3f4b-15dd-42ec-b89b-7cc7a15945d3",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "7afb2788-e299-4e09-b363-acbc9ca5be02",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "11e044ef-4680-469a-aa04-df49d1bfad79",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8d18fdb0-01b8-4b89-9287-461d8faf8dcc",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "11e044ef-4680-469a-aa04-df49d1bfad79",
                                  "8d18fdb0-01b8-4b89-9287-461d8faf8dcc"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 7,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "8b62959c-407e-4e29-b913-855a63d4d51c",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3cf9f576-499f-4f1f-920d-cebfffeb5bed",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1eb56436-fe85-474f-b2ac-f51cafd4e22d",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "3cf9f576-499f-4f1f-920d-cebfffeb5bed",
                                  "1eb56436-fe85-474f-b2ac-f51cafd4e22d"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "4c6becdf-5d67-4cf1-8384-8524ff982a26",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for an asynchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "b3b44ece-4ce4-4ddd-8256-d5b18bd5f79d",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7ffc2a22-7c41-4377-b172-359ae433c607",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c11e6f81-3073-4388-acfe-79d4925cd375",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "7ffc2a22-7c41-4377-b172-359ae433c607",
                                  "c11e6f81-3073-4388-acfe-79d4925cd375"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "4b7f7943-dc11-4403-9656-048b9bfcab27",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "84740aa0-7db9-4065-9478-809a272db984",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ccc5f48e-2838-475b-9fd0-e887448115b0",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "84740aa0-7db9-4065-9478-809a272db984",
                                  "ccc5f48e-2838-475b-9fd0-e887448115b0"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 20,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "9c1676d5-ee80-4858-b573-5beee285083f",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "f35e266b-f16a-4e3c-933a-c94842941394",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1d0e7d9c-ce4e-4a94-bb9e-3a33be8dbebc",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8526e0f0-d93f-4eb9-b71a-e42006762e52",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "1d0e7d9c-ce4e-4a94-bb9e-3a33be8dbebc",
                                  "8526e0f0-d93f-4eb9-b71a-e42006762e52"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "27f3e4af-348f-418d-a32d-29c3b34e48d4",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "598ace4a-7dbb-4a02-baae-adca5e34e225",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8a356337-39a4-489b-a12a-915f82456350",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "598ace4a-7dbb-4a02-baae-adca5e34e225",
                                  "8a356337-39a4-489b-a12a-915f82456350"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "d59935ec-068c-4211-ae32-6037408d0fce",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for a thenable that immediately throws in `then`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "66c7268d-a107-4a92-a793-334e2f2f8ea2",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3e5f3ef5-a32c-4aec-bb41-51a9dfd38186",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3cf8825c-fa12-4a17-a41b-10d1594a6c84",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "3e5f3ef5-a32c-4aec-bb41-51a9dfd38186",
                                  "3cf8825c-fa12-4a17-a41b-10d1594a6c84"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "31fd8a6e-e5f4-499a-b693-b25dad280285",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "564674a6-7215-42c1-b10a-77f41c6eee26",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0e14c2ad-da25-4f33-afae-b3942ca7b935",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "564674a6-7215-42c1-b10a-77f41c6eee26",
                                  "0e14c2ad-da25-4f33-afae-b3942ca7b935"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "917c1ba8-152a-4a76-8593-3a7e9d0ac218",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for an object with a throwing `then` accessor",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "a278b18e-a248-4721-b642-0920d4ea6efd",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "226bc45b-da2a-4867-8ea3-34222f7d037b",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0c7f3b89-3308-4695-85d2-f856d1b8dffc",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "226bc45b-da2a-4867-8ea3-34222f7d037b",
                                  "0c7f3b89-3308-4695-85d2-f856d1b8dffc"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 10,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "9966bc9c-f13e-489f-9476-7c347b88acb3",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "bd0e6ca3-94da-415c-8968-374fcdbb1c29",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d4e95c02-7d7b-4f1e-897e-ac2cb733846f",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "bd0e6ca3-94da-415c-8968-374fcdbb1c29",
                                  "d4e95c02-7d7b-4f1e-897e-ac2cb733846f"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "7d8ff7cb-28eb-4857-adad-b87b7bf01ecd",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for an already-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "24cb1b0e-1f8e-4357-ac27-0c2aba08d284",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "cd4a0245-c869-4e7f-b6e2-744ba1ccefaf",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "658cf8aa-8a5c-4028-bce0-b6acf6d45346",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "cd4a0245-c869-4e7f-b6e2-744ba1ccefaf",
                                  "658cf8aa-8a5c-4028-bce0-b6acf6d45346"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "c1531796-ba00-4c66-9f01-f903edab31bb",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d09c4b16-492d-4251-8604-2fb304e962c2",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "74801e5e-2301-4982-975c-e18f162aa99b",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "d09c4b16-492d-4251-8604-2fb304e962c2",
                                  "74801e5e-2301-4982-975c-e18f162aa99b"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 20,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "1e5b634f-9196-40bf-963f-fcbdfc8df039",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for an eventually-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "5e3d4462-01f5-4998-9203-73367380b54f",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2c41b830-f145-40d9-a50b-2c45c81db468",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2eab9c68-10a4-40f9-897a-4535f387abfb",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "2c41b830-f145-40d9-a50b-2c45c81db468",
                                  "2eab9c68-10a4-40f9-897a-4535f387abfb"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 123,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "79cad793-1a11-49c9-a256-3625b8e56ce9",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9b247875-e3e1-40d9-810f-0ff466ea274e",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "bea2b858-4629-4c25-95ee-12338dcc4938",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "9b247875-e3e1-40d9-810f-0ff466ea274e",
                                  "bea2b858-4629-4c25-95ee-12338dcc4938"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 119,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "7f6db9b1-824f-463a-ade2-430117652602",
                            "title": "`y` is a thenable that tries to fulfill twice for a synchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "f793e469-e27e-4b15-8d50-ca7407ccf687",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "66d3f241-5d5a-4aec-a4bb-ea97d1144a71",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "91590320-cbf5-4833-b473-c4cd08eb5e72",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "66d3f241-5d5a-4aec-a4bb-ea97d1144a71",
                                  "91590320-cbf5-4833-b473-c4cd08eb5e72"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "1ecca766-004c-49d9-b84f-23a35e2d9a6a",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7ea40ddf-678a-49e3-a93f-e3c1ef5d2b7f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "10901597-cf16-4d1b-92c0-0beb4ba61583",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "7ea40ddf-678a-49e3-a93f-e3c1ef5d2b7f",
                                  "10901597-cf16-4d1b-92c0-0beb4ba61583"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "40509020-c547-404a-8e27-7bf1dc4fb7eb",
                            "title": "`y` is a thenable that tries to fulfill twice for an asynchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "1448b047-73fb-408c-83e9-6b8f34000b67",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "74a6bdd3-f99e-4de7-83ce-267d8ed8eff8",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9574f71c-0be8-4b03-900f-e45545d9ec95",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "74a6bdd3-f99e-4de7-83ce-267d8ed8eff8",
                                  "9574f71c-0be8-4b03-900f-e45545d9ec95"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "fa31ce45-4e78-448c-8e6d-80e75e06de9c",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6a44c3ff-b590-43b8-8be3-e9a6e0e6e950",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "45b1986f-d543-410a-bd95-d543b2d2a35a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "6a44c3ff-b590-43b8-8be3-e9a6e0e6e950",
                                  "45b1986f-d543-410a-bd95-d543b2d2a35a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "60876f7f-594b-4822-8a45-8d0e1339c052",
                            "title": "`y` is a thenable that tries to fulfill twice for a synchronously-fulfilled one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "b3a4b475-79b1-4aa2-b70f-65e10b8264c6",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "eac2c19f-90dc-4f77-a396-3b6c46ebd446",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3b3107c1-f07f-4b13-ac9e-ef17a3b69b12",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "eac2c19f-90dc-4f77-a396-3b6c46ebd446",
                                  "3b3107c1-f07f-4b13-ac9e-ef17a3b69b12"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "e1c7b63c-0a18-4179-85b1-5c3d9f3e8649",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a0593986-d695-49cc-9baa-20aaded7d90a",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "caae6bb5-0a73-4581-846a-98d67ecb9c55",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "a0593986-d695-49cc-9baa-20aaded7d90a",
                                  "caae6bb5-0a73-4581-846a-98d67ecb9c55"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "f4528330-fb10-4382-9b7b-cfa25685eec8",
                            "title": "`y` is a thenable that tries to fulfill twice for a thenable that tries to fulfill twice",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "649eae83-45f9-48b6-9291-4f104dfd4197",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "aa78e8c8-8aeb-467b-ae29-0fff2c7423ad",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d00b9dfd-3561-483a-993f-bb5f0d44e54f",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "aa78e8c8-8aeb-467b-ae29-0fff2c7423ad",
                                  "d00b9dfd-3561-483a-993f-bb5f0d44e54f"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "fcf528a2-27a0-489e-bf0a-8b7061b06b97",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a2c5b3be-8aac-4404-9d30-183ba8c41768",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "11364ed9-fb90-44ad-ae91-77abf40651ae",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "a2c5b3be-8aac-4404-9d30-183ba8c41768",
                                  "11364ed9-fb90-44ad-ae91-77abf40651ae"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "dd8d1c31-58d7-4aaf-b9b0-0974c85338e1",
                            "title": "`y` is a thenable that tries to fulfill twice for a thenable that fulfills but then throws",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "1f9a1986-2665-41a6-be5c-843c41d34b49",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "07beb5d0-9002-460e-a979-dde05f366a4d",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ddcfceb4-8ee2-4e3e-ba38-6f7a32cacc72",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "07beb5d0-9002-460e-a979-dde05f366a4d",
                                  "ddcfceb4-8ee2-4e3e-ba38-6f7a32cacc72"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 10,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "1ee6cbfe-3382-4e01-bf0a-f9ba7a439e57",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6e4bd8e6-0bbc-4a97-8152-bbbf130bfe41",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9c902a02-0bf1-4cd0-b1d0-b881c06b4601",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "6e4bd8e6-0bbc-4a97-8152-bbbf130bfe41",
                                  "9c902a02-0bf1-4cd0-b1d0-b881c06b4601"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "b4cd1ea3-cbcb-441e-a8ad-43da5792b5d5",
                            "title": "`y` is a thenable that tries to fulfill twice for an already-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "5d21e0f5-2d01-499f-9711-6f502ef6b4a8",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e8e8f006-fca7-439c-a6f3-96d0bebc3421",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2c3bbaab-e071-4e99-a12a-46828a373b2e",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "e8e8f006-fca7-439c-a6f3-96d0bebc3421",
                                  "2c3bbaab-e071-4e99-a12a-46828a373b2e"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "9a9c76a7-bf2a-4c9c-adfb-b145f34a89d1",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e0995257-54d0-4828-8bab-aeb45220d153",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "247467b4-e08b-40d6-bec7-3a1c37100f0f",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "e0995257-54d0-4828-8bab-aeb45220d153",
                                  "247467b4-e08b-40d6-bec7-3a1c37100f0f"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "7c59a6b3-d6d0-445a-a0ff-20f969b735f7",
                            "title": "`y` is a thenable that tries to fulfill twice for an eventually-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "094e3176-25bc-4bf4-937c-ad7afade36dc",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "37b92739-73d1-4243-b22c-45841eb7354b",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "04d9785e-3175-448a-ad4d-7d7933301570",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "37b92739-73d1-4243-b22c-45841eb7354b",
                                  "04d9785e-3175-448a-ad4d-7d7933301570"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 121,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "48240c9e-f13f-4d76-8028-bbd8a59685bb",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d4e1d40e-db62-4389-afbb-29260c6aaa44",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "397ca068-4aef-49d3-892a-4d2cd97f3de2",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "d4e1d40e-db62-4389-afbb-29260c6aaa44",
                                  "397ca068-4aef-49d3-892a-4d2cd97f3de2"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 125,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "4c4a365a-c472-4522-8077-fc3a7f1b19b5",
                            "title": "`y` is a thenable that tries to fulfill twice for a synchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "3d2a87e0-866f-4b27-b782-770a42ad57e2",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "58b92c3b-5251-489e-96a4-bbfcfc217f65",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "719a1208-1c02-487b-8e7c-27bb5f4f99bc",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "58b92c3b-5251-489e-96a4-bbfcfc217f65",
                                  "719a1208-1c02-487b-8e7c-27bb5f4f99bc"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "a7db7271-0a29-48c0-ac26-b831bc7043a3",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2117ac29-4cc2-425c-a6c7-d982ee6b4f95",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b41dbb15-cb26-4188-94df-5642e3394e33",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "2117ac29-4cc2-425c-a6c7-d982ee6b4f95",
                                  "b41dbb15-cb26-4188-94df-5642e3394e33"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "fbb85e58-5bf8-4775-93dc-82e84e02cdbf",
                            "title": "`y` is a thenable that tries to fulfill twice for an asynchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "3c64b988-bfba-417e-8fef-6c26c7bd1897",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2d0b2052-6d4c-42e9-9b2a-4833f18921c3",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "83f3b725-7ef8-4ef4-871f-445364abfd1b",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "2d0b2052-6d4c-42e9-9b2a-4833f18921c3",
                                  "83f3b725-7ef8-4ef4-871f-445364abfd1b"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "0c85f367-3993-42ba-a55d-71698c63c221",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b9e89c0f-045e-4a20-97cb-aeb9e8a0c991",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7b52dfcc-efcd-4a37-8ffb-f6ec6b63b12d",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "b9e89c0f-045e-4a20-97cb-aeb9e8a0c991",
                                  "7b52dfcc-efcd-4a37-8ffb-f6ec6b63b12d"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "4e617d29-cda4-4b1d-8342-58f0e7d1026c",
                            "title": "`y` is a thenable that tries to fulfill twice for a synchronously-rejected one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "712afab0-2620-439c-8d21-6bcd0b5e4277",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0417e5aa-8f9c-4139-ae9c-be95648b66e1",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "90adc0cc-4d6f-4071-9192-dd0264cd26d3",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "0417e5aa-8f9c-4139-ae9c-be95648b66e1",
                                  "90adc0cc-4d6f-4071-9192-dd0264cd26d3"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "f6684f06-4b40-4c11-b339-5871f94fb400",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f7180ce7-e5cc-4b6a-855c-a4a444138d17",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "19446762-fcdd-40b7-ba32-8cccf98b88e8",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "f7180ce7-e5cc-4b6a-855c-a4a444138d17",
                                  "19446762-fcdd-40b7-ba32-8cccf98b88e8"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "4de6e56f-946c-4db6-8889-ee419663ad13",
                            "title": "`y` is a thenable that tries to fulfill twice for a thenable that immediately throws in `then`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "cb2a053c-78da-4c3b-8e90-66ed399fb01a",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d74f616b-7793-43ef-9005-62f931a4d0ac",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9b6e3e33-8139-4806-b861-b6703d808cd3",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "d74f616b-7793-43ef-9005-62f931a4d0ac",
                                  "9b6e3e33-8139-4806-b861-b6703d808cd3"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 9,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "0c1c6b85-ebaa-43e0-adc9-45586a51e482",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "aec06ab2-f54f-4ed7-8150-78754b0d86ff",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "12bf36f8-6d01-4038-9c86-5b6b66241f6a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "aec06ab2-f54f-4ed7-8150-78754b0d86ff",
                                  "12bf36f8-6d01-4038-9c86-5b6b66241f6a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "0df33f2c-7482-45ec-b01f-88cefc257fe3",
                            "title": "`y` is a thenable that tries to fulfill twice for an object with a throwing `then` accessor",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "b60a9d9c-5261-44d3-a4dc-360d5c87b3fe",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7c9bee33-a60c-42ba-8487-ea09e1f3b472",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4979cf45-033b-4148-9b2d-0f5327ad549f",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "7c9bee33-a60c-42ba-8487-ea09e1f3b472",
                                  "4979cf45-033b-4148-9b2d-0f5327ad549f"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "6d41fe55-c156-42f7-82c1-bf5b9a567f21",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "bb7831a7-9a86-4e88-b718-1012f70858ed",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ce21724e-bc2e-4c82-be61-26a06ad12e96",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "bb7831a7-9a86-4e88-b718-1012f70858ed",
                                  "ce21724e-bc2e-4c82-be61-26a06ad12e96"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "8e313f88-83e1-432a-9e33-90ee8bc7eeef",
                            "title": "`y` is a thenable that tries to fulfill twice for an already-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "155795e7-1f44-448d-9057-78b7284ace2d",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0aa6fa85-89ec-4e23-8b6e-15ebf87b936f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "395bd3df-d879-402e-aa1a-d9dce0457c97",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "0aa6fa85-89ec-4e23-8b6e-15ebf87b936f",
                                  "395bd3df-d879-402e-aa1a-d9dce0457c97"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "73b782b8-64e5-410d-acaf-f1481fb68590",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ab8adb6e-27f8-4572-91f3-fc58de2c15f5",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8515b73c-6258-46ac-849d-afd873e0d54c",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ab8adb6e-27f8-4572-91f3-fc58de2c15f5",
                                  "8515b73c-6258-46ac-849d-afd873e0d54c"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "75174837-ea13-4b22-b40e-4c5975e406bc",
                            "title": "`y` is a thenable that tries to fulfill twice for an eventually-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "c9048cdf-c3c8-4335-85bf-97c8589fec82",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2e378643-7f8f-4ac0-b6f4-e48a8ba62f91",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "fca253d3-0188-407d-a6bb-3d1de824c251",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "2e378643-7f8f-4ac0-b6f4-e48a8ba62f91",
                                  "fca253d3-0188-407d-a6bb-3d1de824c251"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 119,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "64a4a19b-7aed-4f59-98aa-68154832f474",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8578b328-0dcb-4b7c-a5b7-413e9a371843",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2205dd89-afe5-4e49-976d-78b529fb7397",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "8578b328-0dcb-4b7c-a5b7-413e9a371843",
                                  "2205dd89-afe5-4e49-976d-78b529fb7397"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 119,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "5d05f70b-a82f-48d2-b2f6-4a24f180da8f",
                            "title": "`y` is a thenable that fulfills but then throws for a synchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "aab75a20-7333-483a-b245-2783b7826e6a",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "84a2ba2b-2355-4cb1-95c7-d7bcfbc1b859",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "db255f23-b9ae-4a5e-920a-a161e95829c3",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "84a2ba2b-2355-4cb1-95c7-d7bcfbc1b859",
                                  "db255f23-b9ae-4a5e-920a-a161e95829c3"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 9,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "b2b10073-a727-40cb-9629-1bdcbf60ae64",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "807b8fb4-d927-4eca-8dd4-99dbec7963ca",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ab4d8bc6-848a-4083-9c45-005633c0c0cf",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "807b8fb4-d927-4eca-8dd4-99dbec7963ca",
                                  "ab4d8bc6-848a-4083-9c45-005633c0c0cf"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "2830e4b4-5187-49d8-bfb4-8d2408b24b65",
                            "title": "`y` is a thenable that fulfills but then throws for an asynchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "b48fbcce-58f3-4694-8334-d8cac3f2c694",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9825d483-3cf1-4452-b24f-059f08806f8a",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5f33f778-ca3b-43a6-8e8a-8d2c49ca7fa8",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "9825d483-3cf1-4452-b24f-059f08806f8a",
                                  "5f33f778-ca3b-43a6-8e8a-8d2c49ca7fa8"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "2273cc50-61f8-4e21-abf6-5f658c324c4c",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "fe5254a2-ecbe-40fc-b9d6-de1ed20684f8",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d17d2c5b-0853-428b-aba1-cdd92d3facbf",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "fe5254a2-ecbe-40fc-b9d6-de1ed20684f8",
                                  "d17d2c5b-0853-428b-aba1-cdd92d3facbf"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 19,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "48423dbd-56be-4612-9743-b83370b08d98",
                            "title": "`y` is a thenable that fulfills but then throws for a synchronously-fulfilled one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "de00dc41-a1f4-4862-a6f8-05caae9c0582",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "15a3fa4e-5457-43ad-9be7-5cab1b64e7a4",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2f4474a8-0dcc-4687-baff-6684bf089df4",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "15a3fa4e-5457-43ad-9be7-5cab1b64e7a4",
                                  "2f4474a8-0dcc-4687-baff-6684bf089df4"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "cb484058-1912-4538-8e1a-79f4486b9f47",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4f7efdb8-5583-496e-8abc-4f433ebd2241",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e703d0de-79e1-4649-971f-1d7a6f36188e",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "4f7efdb8-5583-496e-8abc-4f433ebd2241",
                                  "e703d0de-79e1-4649-971f-1d7a6f36188e"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "b436f873-96f4-4ba7-875a-0d738c8db985",
                            "title": "`y` is a thenable that fulfills but then throws for a thenable that tries to fulfill twice",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "c29dad97-2fd5-4db7-9bb6-9800d5bb385a",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "015c9702-ff64-4824-91ce-1cb5d3b9158f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b5e514a1-a626-41b1-bb33-2ae1e7dd8f1b",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "015c9702-ff64-4824-91ce-1cb5d3b9158f",
                                  "b5e514a1-a626-41b1-bb33-2ae1e7dd8f1b"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "9a7b14a4-2051-4882-84ed-f143a8e865f4",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3e758ed7-bc60-40b0-9210-e1e780d0b8c5",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2446ee28-e286-444c-9de0-1ff7860be1ec",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "3e758ed7-bc60-40b0-9210-e1e780d0b8c5",
                                  "2446ee28-e286-444c-9de0-1ff7860be1ec"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 10,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "88d0b08e-ba04-4a16-bc73-3dd150c43ee6",
                            "title": "`y` is a thenable that fulfills but then throws for a thenable that fulfills but then throws",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "f49b331b-8ab9-4b78-a6c2-aa21dabed5ca",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "402b07a8-3b8c-42ef-bf0d-c41158e61827",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "acaec638-88b0-4fb6-bdd6-76a1e6aff00b",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "402b07a8-3b8c-42ef-bf0d-c41158e61827",
                                  "acaec638-88b0-4fb6-bdd6-76a1e6aff00b"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "ac356d7a-4061-43ad-8256-b6ea8b4c8504",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d6c648e1-2894-4d17-bc92-7533a37fe38e",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4398ea1a-6fa1-446e-bba8-b4fdbeb37806",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "d6c648e1-2894-4d17-bc92-7533a37fe38e",
                                  "4398ea1a-6fa1-446e-bba8-b4fdbeb37806"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "dbc760ff-f2ab-4d25-9f5e-1f556738ba5b",
                            "title": "`y` is a thenable that fulfills but then throws for an already-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "e608cbaf-c975-454f-85e7-f63a02c47f2f",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b0a52161-1ceb-40ab-9ce3-3b29da4259a2",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d706d64d-96cc-48f9-baaa-8d37933e238c",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "b0a52161-1ceb-40ab-9ce3-3b29da4259a2",
                                  "d706d64d-96cc-48f9-baaa-8d37933e238c"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "a813d58d-c179-43d4-876f-f3fbe7f5e305",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1705dd7c-8a73-4391-bcc4-3efa42406b39",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "614b4273-7246-4e37-a745-d08bf1b958ff",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "1705dd7c-8a73-4391-bcc4-3efa42406b39",
                                  "614b4273-7246-4e37-a745-d08bf1b958ff"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "666f3e88-6983-436b-a531-7fd1e17ea013",
                            "title": "`y` is a thenable that fulfills but then throws for an eventually-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "9d7c4638-8ff6-4f8a-86fe-11beaa4eb258",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 58,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "20283c81-0aa2-4f33-852e-f101d8d49b03",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4d1a553f-cff7-4da3-ae78-4bf5dffbd333",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "20283c81-0aa2-4f33-852e-f101d8d49b03",
                                  "4d1a553f-cff7-4da3-ae78-4bf5dffbd333"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 117,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "d6c66458-58b0-4202-84f5-9b1a6e4e6582",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0ef6b307-4494-4995-bd07-e55f0d66248b",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "fdfd7ab1-3411-45b3-b03c-e4e1bb1b3163",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "0ef6b307-4494-4995-bd07-e55f0d66248b",
                                  "fdfd7ab1-3411-45b3-b03c-e4e1bb1b3163"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 126,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "af7ede9a-86df-4f7f-b3b7-81b972e895dc",
                            "title": "`y` is a thenable that fulfills but then throws for a synchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "f4b6b068-f252-46ed-bc1a-3c38e3762869",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1a2d4fea-865b-49fa-889c-e724d2acc90b",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "dbb22def-bf58-4512-ac83-4690db8b55e8",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "1a2d4fea-865b-49fa-889c-e724d2acc90b",
                                  "dbb22def-bf58-4512-ac83-4690db8b55e8"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 8,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "92c6676b-ade1-41d7-8bfb-c7d9167fac2a",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "92ea17c2-0d0b-4663-85ba-1299e5f8b66c",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d58c65a0-7bbf-448c-901e-011933937c09",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "92ea17c2-0d0b-4663-85ba-1299e5f8b66c",
                                  "d58c65a0-7bbf-448c-901e-011933937c09"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "9d323770-3c7b-4a89-b124-0c0363705c65",
                            "title": "`y` is a thenable that fulfills but then throws for an asynchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "caae61f5-d82a-48bf-920f-fcb50f900ba2",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "64a155cd-69dc-4053-b58a-32b81e8bd99b",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "431884c6-5832-4b0f-91f2-64018de6adf1",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "64a155cd-69dc-4053-b58a-32b81e8bd99b",
                                  "431884c6-5832-4b0f-91f2-64018de6adf1"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "15c4691d-9595-4861-a95f-ffcb2c87cdcb",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "780b106a-3dfe-4908-ba9f-d5f566f4cbf3",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e3e63ff3-81ca-499b-9437-6a99735afd86",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "780b106a-3dfe-4908-ba9f-d5f566f4cbf3",
                                  "e3e63ff3-81ca-499b-9437-6a99735afd86"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "74d0bb5e-df93-452f-b884-90f7596e5021",
                            "title": "`y` is a thenable that fulfills but then throws for a synchronously-rejected one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "2f016f6d-322d-4da7-9052-4b8f052598a2",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a3619321-2a8c-4189-871d-62ab89ece749",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4fa848fb-4546-418e-9a3f-2f1431f1c0f8",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "a3619321-2a8c-4189-871d-62ab89ece749",
                                  "4fa848fb-4546-418e-9a3f-2f1431f1c0f8"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "4a4cd222-36bb-4521-8e1f-45c7e7f3818f",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d2f0c92b-9546-4b90-a4f3-bdeda477d4e6",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5ed052ae-323c-4761-b44f-1d4c4df2590c",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "d2f0c92b-9546-4b90-a4f3-bdeda477d4e6",
                                  "5ed052ae-323c-4761-b44f-1d4c4df2590c"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "bb980c11-2b8a-4e2b-8abe-10df6f27d68c",
                            "title": "`y` is a thenable that fulfills but then throws for a thenable that immediately throws in `then`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "25226380-a9ad-4e98-9c38-3e5a813858a8",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c9d2d436-babb-4868-8d1f-9809ca153f6f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "295572ea-7464-44db-823b-d9f943419879",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "c9d2d436-babb-4868-8d1f-9809ca153f6f",
                                  "295572ea-7464-44db-823b-d9f943419879"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "ac9af818-bd0b-4a17-8477-07f69ba9f769",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3fd0f9ea-50ac-4e6b-a98b-bc210c20cf2e",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9e827d82-679e-408c-99f1-2b8f4952bfa8",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "3fd0f9ea-50ac-4e6b-a98b-bc210c20cf2e",
                                  "9e827d82-679e-408c-99f1-2b8f4952bfa8"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "a4697546-04c0-4a15-9bc1-fae7d71ef595",
                            "title": "`y` is a thenable that fulfills but then throws for an object with a throwing `then` accessor",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "9940df60-c587-464b-8fe1-426c9d43b30c",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "dd95d3ea-e5a1-4311-830b-7f5df4c32712",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e5d9979f-8b2f-4004-bd06-643c27349c42",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "dd95d3ea-e5a1-4311-830b-7f5df4c32712",
                                  "e5d9979f-8b2f-4004-bd06-643c27349c42"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 8,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "fecbdc67-eebb-493b-87d9-67284b69325e",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4fd922a3-530f-4f5d-8145-59f0d7704e34",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8d65b86f-e5f6-4422-97ff-ab62d3e1e48a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "4fd922a3-530f-4f5d-8145-59f0d7704e34",
                                  "8d65b86f-e5f6-4422-97ff-ab62d3e1e48a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "19bd6ed4-8e00-4f03-bf22-92d617eb570a",
                            "title": "`y` is a thenable that fulfills but then throws for an already-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "617c516e-d4e1-46ca-a41e-ba432d1115ea",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8a82b599-c606-4727-b0da-11048a244e08",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "623dafea-6727-4ad7-864c-e230bcc169c0",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "8a82b599-c606-4727-b0da-11048a244e08",
                                  "623dafea-6727-4ad7-864c-e230bcc169c0"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "1223c8a2-88a1-4e7e-a7d6-6f2f801f4f08",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c1175cba-4c43-46b1-bd8c-1c264f63ef14",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e370ace1-2091-4684-b754-bdaaf3224144",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "c1175cba-4c43-46b1-bd8c-1c264f63ef14",
                                  "e370ace1-2091-4684-b754-bdaaf3224144"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "5611c7b5-b383-4aaf-ab13-831d9a7ec0a0",
                            "title": "`y` is a thenable that fulfills but then throws for an eventually-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "7c22cbcb-c439-430c-8d27-334887f36fa8",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "54938859-2196-467b-b88e-95fefea7e967",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b7be97c3-10dd-4b28-93db-729de972cf9b",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "54938859-2196-467b-b88e-95fefea7e967",
                                  "b7be97c3-10dd-4b28-93db-729de972cf9b"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 118,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "670fee2a-bb39-4bf3-af3d-080073f7fb32",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1843d2af-69fe-472b-9f82-4c014ca5e380",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b8dfbbe1-9ff3-47e7-af4d-c94890b86525",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "1843d2af-69fe-472b-9f82-4c014ca5e380",
                                  "b8dfbbe1-9ff3-47e7-af4d-c94890b86525"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 122,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "777c291d-a019-4f26-9ef9-4047315f1791",
                            "title": "`y` is an already-fulfilled promise for a synchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "d214ee18-cf99-422a-b35b-5dbe0ac8cf9f",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2bba8079-7a72-4f8b-ba60-4d4626a92319",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5f67828e-ba2b-4afb-b456-b21e3af679d2",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "2bba8079-7a72-4f8b-ba60-4d4626a92319",
                                  "5f67828e-ba2b-4afb-b456-b21e3af679d2"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "1fe1fea7-d921-47ab-8bff-f6fe62c37a0e",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f6964560-63c8-491b-957f-844c6e274645",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c51508cd-c05a-4baa-896e-5cca47fdd321",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "f6964560-63c8-491b-957f-844c6e274645",
                                  "c51508cd-c05a-4baa-896e-5cca47fdd321"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "1a762ee6-12b5-4a5d-8275-32226ea35c8e",
                            "title": "`y` is an already-fulfilled promise for an asynchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "12f3ecf2-827b-4e18-a1fa-189e36925b85",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "fddf5cdc-f8a8-4b77-be69-ac484e9098b1",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "294d33a8-bc70-4c42-b5e1-00c64f2d7958",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "fddf5cdc-f8a8-4b77-be69-ac484e9098b1",
                                  "294d33a8-bc70-4c42-b5e1-00c64f2d7958"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 20,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "5c2dcc8a-2a7e-4a90-a63f-a9ff2bb3e5aa",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8109d8eb-8131-4d0d-ab6a-0abcf2ab6cbf",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5d7be967-9a0e-4b83-8ac6-7c4ab36120fa",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "8109d8eb-8131-4d0d-ab6a-0abcf2ab6cbf",
                                  "5d7be967-9a0e-4b83-8ac6-7c4ab36120fa"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 22,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "662833d4-4e96-49e5-bb72-ec6323d5e9b1",
                            "title": "`y` is an already-fulfilled promise for a synchronously-fulfilled one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "4fa4d11a-a2a4-4ef9-a688-6033abaec58d",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3851e355-538a-430b-9ffa-d84ae2895ee1",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1e67dcf4-113c-4f67-8ce3-b79882f72ea2",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "3851e355-538a-430b-9ffa-d84ae2895ee1",
                                  "1e67dcf4-113c-4f67-8ce3-b79882f72ea2"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "cead38bb-4762-479b-9fa8-b0b2539b701d",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8492f5a5-b7ca-426e-b7a1-230dd8cc3ba5",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7fd91811-22b8-41e7-8085-4fce31808af0",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "8492f5a5-b7ca-426e-b7a1-230dd8cc3ba5",
                                  "7fd91811-22b8-41e7-8085-4fce31808af0"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "e89b0df5-2ade-448c-87a2-c22bf8e5a327",
                            "title": "`y` is an already-fulfilled promise for a thenable that tries to fulfill twice",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "c73dd71e-d89b-4e0c-b07f-6f343dd22123",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b2b25cdb-ab50-4703-ace8-d802646f9039",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "37942a5a-1016-4099-9a22-92da52dfec0a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "b2b25cdb-ab50-4703-ace8-d802646f9039",
                                  "37942a5a-1016-4099-9a22-92da52dfec0a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "fbf679e0-03f1-4fef-ae25-cfe2e2c6cd21",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "945a2f35-5754-4855-9137-a3929307e701",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "26a8af13-d1dc-4971-bb7c-a687941509bb",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "945a2f35-5754-4855-9137-a3929307e701",
                                  "26a8af13-d1dc-4971-bb7c-a687941509bb"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "cd165f8a-069e-43e5-b802-779ed93fd557",
                            "title": "`y` is an already-fulfilled promise for a thenable that fulfills but then throws",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "d3c2f657-4031-4aec-81f6-7c4c4718197a",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5fa6e8e9-d791-44fe-9eb1-7b3fdc9605a8",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4e05c9b5-9577-4162-bf3f-8939e8f58994",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "5fa6e8e9-d791-44fe-9eb1-7b3fdc9605a8",
                                  "4e05c9b5-9577-4162-bf3f-8939e8f58994"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "fb6f3aeb-2d89-42b6-8884-37cb8ed1b46a",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8da6b021-f1a9-4274-9ed3-7bead4748b3a",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "238436cf-5f18-43c8-9ca0-139043b25a43",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "8da6b021-f1a9-4274-9ed3-7bead4748b3a",
                                  "238436cf-5f18-43c8-9ca0-139043b25a43"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "ad39dfd3-90ee-4a3c-81c6-2f0509876b12",
                            "title": "`y` is an already-fulfilled promise for an already-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "42b8da25-ee2f-4e7e-a4d5-55ba75c233b6",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ca9c38ec-68dd-46c8-b395-e75c4401e1b0",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e481956f-0bff-43f5-ad06-3af37baa3cf1",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ca9c38ec-68dd-46c8-b395-e75c4401e1b0",
                                  "e481956f-0bff-43f5-ad06-3af37baa3cf1"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "ad52ce1f-8a7a-4675-a80c-507b96ce1695",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6eb3fac2-1792-4ca3-99ef-8d33466185ba",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9cd0a9e5-4d88-4c2c-8863-7de4a3e3f370",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "6eb3fac2-1792-4ca3-99ef-8d33466185ba",
                                  "9cd0a9e5-4d88-4c2c-8863-7de4a3e3f370"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "4ae3fd61-2638-41e5-8e66-7ecf9fe1c28c",
                            "title": "`y` is an already-fulfilled promise for an eventually-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "5d6920ed-99ca-40af-966f-188345fe6335",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1b285f09-463b-4f8b-8f70-3f52681d7b17",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 58,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c58636ce-8ea1-416f-9a0d-16705e55923c",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "1b285f09-463b-4f8b-8f70-3f52681d7b17",
                                  "c58636ce-8ea1-416f-9a0d-16705e55923c"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 117,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "2f9e7a38-1730-4357-b5d0-3edcf62926ba",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3933dc58-b72a-4bab-9d0e-6d8408948abc",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "fada8bb8-d80a-412c-a1c3-dce1e0084aeb",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "3933dc58-b72a-4bab-9d0e-6d8408948abc",
                                  "fada8bb8-d80a-412c-a1c3-dce1e0084aeb"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 119,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "201a6e6e-e53b-4b53-bcba-27af9fee0bb9",
                            "title": "`y` is an already-fulfilled promise for a synchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "19119acf-9c89-4776-8db1-cd49897b9b95",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "78fc670f-757b-4d48-b0d2-aac149823551",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7581b9ab-569e-4218-be7b-273c2f0eedd4",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "78fc670f-757b-4d48-b0d2-aac149823551",
                                  "7581b9ab-569e-4218-be7b-273c2f0eedd4"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "0f7978a2-3418-4d2f-8865-23db7e4ba610",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3e1da935-2c5d-4952-aa2d-55dde3295f33",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "15de39f5-3dd5-485a-8463-94ad60f8d029",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "3e1da935-2c5d-4952-aa2d-55dde3295f33",
                                  "15de39f5-3dd5-485a-8463-94ad60f8d029"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "2b60eab4-60aa-4f45-8c47-740847da8b92",
                            "title": "`y` is an already-fulfilled promise for an asynchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "acdcc31a-71d4-43f1-b56c-66ac0b188389",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3fa52624-ec98-4077-8832-a27fd6f7433c",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "392c9142-7488-4c72-a5fc-342074e5ce35",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "3fa52624-ec98-4077-8832-a27fd6f7433c",
                                  "392c9142-7488-4c72-a5fc-342074e5ce35"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 19,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "bd2b4352-2f87-4ff0-9e1a-254af90a4a1c",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "450da2b9-bd8a-4258-a560-61806b0960a1",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "fb1920a4-4e70-4f5e-8ba7-5b4ca8110251",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "450da2b9-bd8a-4258-a560-61806b0960a1",
                                  "fb1920a4-4e70-4f5e-8ba7-5b4ca8110251"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 25,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "8da9b2f9-8851-4611-986b-5248231ee163",
                            "title": "`y` is an already-fulfilled promise for a synchronously-rejected one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "2de7dd32-63d4-49b6-b5e3-85ec06522690",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a1ee92cf-408b-420d-96d0-5abf084a1aae",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1696a5b8-5125-4184-a627-a01520bfd531",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "a1ee92cf-408b-420d-96d0-5abf084a1aae",
                                  "1696a5b8-5125-4184-a627-a01520bfd531"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "12c9b4eb-a63c-4345-b60c-e2fc02a150ca",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "70e4e643-09e4-49dc-b34e-713330ca60fc",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8da88abf-bb5f-4cb7-9140-35b749f1fa56",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "70e4e643-09e4-49dc-b34e-713330ca60fc",
                                  "8da88abf-bb5f-4cb7-9140-35b749f1fa56"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "9667a455-e0d7-4940-a315-2743dcb4a163",
                            "title": "`y` is an already-fulfilled promise for a thenable that immediately throws in `then`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "0f790f2e-93ac-4f76-a5e5-3680bb2a3470",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1a2d45a9-848f-4c8e-a488-cca0d08f06bb",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4497d041-20de-438d-b36a-13b72ee8de5a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "1a2d45a9-848f-4c8e-a488-cca0d08f06bb",
                                  "4497d041-20de-438d-b36a-13b72ee8de5a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "64cfb0da-79d8-4c91-8c78-e2b420f3609d",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5d36fa61-b854-48d0-86a4-d404873bcbad",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "11e7d2d6-31fd-471b-a85d-b04da1ec744b",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "5d36fa61-b854-48d0-86a4-d404873bcbad",
                                  "11e7d2d6-31fd-471b-a85d-b04da1ec744b"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "6a893f51-e19a-4938-94f0-a3eb6d71704c",
                            "title": "`y` is an already-fulfilled promise for an object with a throwing `then` accessor",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "e6767d84-f454-4a56-9bfa-2d0553944c92",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "84280514-1b86-48c1-b374-8ff4717cb11d",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b36ed103-a204-453b-beb3-33c10a75c330",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "84280514-1b86-48c1-b374-8ff4717cb11d",
                                  "b36ed103-a204-453b-beb3-33c10a75c330"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "fae88af2-ce63-42b8-9ec1-c000d75a49bd",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a3c04df6-90ed-4a65-b794-af602ecb0124",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "37844e15-1cf3-4e16-9650-554b2860b6d9",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "a3c04df6-90ed-4a65-b794-af602ecb0124",
                                  "37844e15-1cf3-4e16-9650-554b2860b6d9"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 19,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "61cca6cb-cb06-47f3-98f7-33f51eb0a5cd",
                            "title": "`y` is an already-fulfilled promise for an already-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "7cf4af4b-721d-4e7e-9b6c-20e2ca653ab6",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f14df30f-7c07-4271-9fab-1c78aa2dc094",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ed7d7e96-183a-4f7a-9fe9-e112b5476c47",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "f14df30f-7c07-4271-9fab-1c78aa2dc094",
                                  "ed7d7e96-183a-4f7a-9fe9-e112b5476c47"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "81f1138b-4173-4612-99eb-4d8ae62dc908",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7f1a92c2-2f2f-4ded-b646-9edd1e93e50c",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "adc4ed01-7536-4e9b-ad3d-b38ac4c9a1ad",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "7f1a92c2-2f2f-4ded-b646-9edd1e93e50c",
                                  "adc4ed01-7536-4e9b-ad3d-b38ac4c9a1ad"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "42f7f562-460b-4fe3-af33-903c8b8b6e71",
                            "title": "`y` is an already-fulfilled promise for an eventually-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "92caa506-23b4-4dd6-9d90-a1a649e4077d",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8e12b58e-e145-44a4-b3b4-7934f6dc5335",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8711c767-708e-441b-9d90-8c6d917497dd",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "8e12b58e-e145-44a4-b3b4-7934f6dc5335",
                                  "8711c767-708e-441b-9d90-8c6d917497dd"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 120,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "c209ed9d-0975-4ae2-b8c8-5ff8ec1bb58d",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 58,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "09a2d2a9-b8ec-426c-8688-7c8003243ef7",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9b5e5bb6-de53-4f82-b8ec-fc22eb017ede",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "09a2d2a9-b8ec-426c-8688-7c8003243ef7",
                                  "9b5e5bb6-de53-4f82-b8ec-fc22eb017ede"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 117,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "b91bc445-1c4c-4a09-9eb0-05c3cab9312f",
                            "title": "`y` is an eventually-fulfilled promise for a synchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "1a5836fe-2440-4e01-a205-1edf418566fd",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 58,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b20e7c7f-4231-4449-8a75-c8218f96c2ce",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 58,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5b901a59-b375-4e25-864e-e6f9b4e72ea4",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "b20e7c7f-4231-4449-8a75-c8218f96c2ce",
                                  "5b901a59-b375-4e25-864e-e6f9b4e72ea4"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 116,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "c9494087-dbc4-4ee5-9f6e-e4761bc1386c",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ebc21069-70aa-4ca7-8cd9-83d8cfc156aa",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a8ee6b9d-bf45-46ab-b623-04205a85fa92",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ebc21069-70aa-4ca7-8cd9-83d8cfc156aa",
                                  "a8ee6b9d-bf45-46ab-b623-04205a85fa92"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 120,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "f7f6ab3e-4f9d-4520-a56a-61ddac6d719a",
                            "title": "`y` is an eventually-fulfilled promise for an asynchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "912b814d-2dd5-42ac-9360-3c9e09653a0a",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e81c3727-fb96-4483-84f5-94403b458eb5",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3d6f9fd0-c564-4bc5-9448-ea8a1b920789",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "e81c3727-fb96-4483-84f5-94403b458eb5",
                                  "3d6f9fd0-c564-4bc5-9448-ea8a1b920789"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 121,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "a431e3d5-1934-43bb-9251-932ea413cea3",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "116acd12-9de4-40b9-8d25-1bcbc380718e",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ff7d075e-d64a-4854-ba89-30ce94e7792f",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "116acd12-9de4-40b9-8d25-1bcbc380718e",
                                  "ff7d075e-d64a-4854-ba89-30ce94e7792f"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 124,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "70395e1c-f518-4af6-af91-873f30e1ef9c",
                            "title": "`y` is an eventually-fulfilled promise for a synchronously-fulfilled one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "3a51465e-1707-42aa-b40a-27730c207664",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 58,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b98beca8-66b9-40cd-b785-b9a30db4208e",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9b6e9f33-1ecf-4fa6-afcd-6519c3b8a0ff",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "b98beca8-66b9-40cd-b785-b9a30db4208e",
                                  "9b6e9f33-1ecf-4fa6-afcd-6519c3b8a0ff"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 118,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "c327b965-88ad-4d91-9d6f-aadb53c30f11",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2783c011-ff37-4ebc-858d-c9568b2d8e67",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c2120326-e79b-4015-a038-bb6facfb3650",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "2783c011-ff37-4ebc-858d-c9568b2d8e67",
                                  "c2120326-e79b-4015-a038-bb6facfb3650"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 121,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "7a8cffff-8c17-4fc3-93f1-5b9bdd73cb3e",
                            "title": "`y` is an eventually-fulfilled promise for a thenable that tries to fulfill twice",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "1476c898-817b-4ea2-8b61-cf8eaabf0afe",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "da0cd36c-291f-4ad8-ab99-3ebe158137ca",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 57,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "51b05a6a-1a83-4bca-bb4e-b78aaccdc992",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "da0cd36c-291f-4ad8-ab99-3ebe158137ca",
                                  "51b05a6a-1a83-4bca-bb4e-b78aaccdc992"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 118,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "bd2ee6cb-4395-4329-9049-579aa20233c5",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f1a314dd-ebeb-463f-b597-5359f2c4d5d0",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8b0f1e20-93c2-4531-972a-eed7d5e0c0fb",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "f1a314dd-ebeb-463f-b597-5359f2c4d5d0",
                                  "8b0f1e20-93c2-4531-972a-eed7d5e0c0fb"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 124,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "4f4eca31-13b8-4f23-9c13-7f89e1994294",
                            "title": "`y` is an eventually-fulfilled promise for a thenable that fulfills but then throws",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "8a69e579-edcb-4637-b661-c9c769dd1a73",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "05d19903-ab8c-4ac0-ab19-8d687a2fd2e5",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 57,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "97185ed8-1cd4-4d90-84a5-d512526ff0b9",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "05d19903-ab8c-4ac0-ab19-8d687a2fd2e5",
                                  "97185ed8-1cd4-4d90-84a5-d512526ff0b9"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 117,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "233ce3e6-78cd-46bb-8b5d-52ff2cb90961",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "bd50de28-f615-47d5-8b68-d228d91bec2e",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 58,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "43e7bfce-7411-4ef8-b30e-5734bdc6e027",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "bd50de28-f615-47d5-8b68-d228d91bec2e",
                                  "43e7bfce-7411-4ef8-b30e-5734bdc6e027"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 118,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "61dd4a8b-c00e-46cb-94f9-2243626fdbde",
                            "title": "`y` is an eventually-fulfilled promise for an already-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "e1cc1546-a521-4b0d-8f6a-2b21bf200d83",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "256cfa10-0b48-42f0-ae97-eaedff3e348f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "43aa6c8e-249c-47c4-938a-5baa829dbb81",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "256cfa10-0b48-42f0-ae97-eaedff3e348f",
                                  "43aa6c8e-249c-47c4-938a-5baa829dbb81"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 123,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "ebca26ad-b395-4223-a390-3b0f852b4455",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "bbf3df56-bb00-47ec-b00c-0cb55b92604e",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "66e6ac84-89c6-4b22-9613-58d33b3fb9b6",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "bbf3df56-bb00-47ec-b00c-0cb55b92604e",
                                  "66e6ac84-89c6-4b22-9613-58d33b3fb9b6"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 125,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "574ebf35-b647-4668-a44b-3da10dc8dfdf",
                            "title": "`y` is an eventually-fulfilled promise for an eventually-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "73870696-37eb-42b4-bbe5-8e56958f592f",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d115a500-0206-4376-8e57-d8688923127f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 58,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "042816e4-32da-427c-9e59-3c829e8a76de",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "d115a500-0206-4376-8e57-d8688923127f",
                                  "042816e4-32da-427c-9e59-3c829e8a76de"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 119,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "a67b5580-5e25-4b9e-8981-e5642f4388b7",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "edea5aa7-b04f-4e1d-9d36-c76a7e9bdde1",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "bb0ea110-65b7-4f96-bf61-b1089ba2b8c9",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "edea5aa7-b04f-4e1d-9d36-c76a7e9bdde1",
                                  "bb0ea110-65b7-4f96-bf61-b1089ba2b8c9"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 124,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "cb74063c-3813-470c-bebe-24fa2ef44f8a",
                            "title": "`y` is an eventually-fulfilled promise for a synchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "e34591f6-5de5-4401-87df-57445f6b717c",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "85892059-8a3f-4725-a6bb-630419e8f6d6",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "df2d85d9-2e53-45e5-8271-13fb7c8d46a6",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "85892059-8a3f-4725-a6bb-630419e8f6d6",
                                  "df2d85d9-2e53-45e5-8271-13fb7c8d46a6"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 118,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "3a7d821a-a66b-4ce1-9861-29008c1375b2",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "954ad780-815b-4582-a922-e0b1aff681a7",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7b2ac26c-c011-42e6-a787-7416ad347f9b",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "954ad780-815b-4582-a922-e0b1aff681a7",
                                  "7b2ac26c-c011-42e6-a787-7416ad347f9b"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 124,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "04144c55-a944-4d92-a975-a15a83eda010",
                            "title": "`y` is an eventually-fulfilled promise for an asynchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "ce3faef1-ab27-465a-b802-aa56e23b0bfd",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c7aa629e-ceea-4add-b8fe-e15f0b666fef",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "efd052e8-8a6d-4a76-b090-05d14a0cc749",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "c7aa629e-ceea-4add-b8fe-e15f0b666fef",
                                  "efd052e8-8a6d-4a76-b090-05d14a0cc749"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 119,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "7d71d469-4379-4b40-b6cd-91d04349dbaa",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2a331345-7cd9-4ddb-9149-08cf396987fc",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "835e751a-3a23-46ac-ae30-7230ac35bd9c",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "2a331345-7cd9-4ddb-9149-08cf396987fc",
                                  "835e751a-3a23-46ac-ae30-7230ac35bd9c"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 122,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "132f0977-3fee-47cd-b09c-feeaab2e35a7",
                            "title": "`y` is an eventually-fulfilled promise for a synchronously-rejected one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "bdea0b02-cdfe-476c-a8df-f905bec52988",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 57,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1210fb27-986a-4a73-991f-04531af1e207",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9e226d92-5691-4641-94a5-0ef28dc0f2b3",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "1210fb27-986a-4a73-991f-04531af1e207",
                                  "9e226d92-5691-4641-94a5-0ef28dc0f2b3"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 116,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "107ff524-74c6-47e8-b788-801ff2c3cd6e",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ae21c1cb-fa14-4e66-9795-e990c6d6858f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ce8ca51f-038e-4b42-973b-a4e476876913",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ae21c1cb-fa14-4e66-9795-e990c6d6858f",
                                  "ce8ca51f-038e-4b42-973b-a4e476876913"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 121,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "9129e22d-e85b-4c80-b13c-b817341f8c9a",
                            "title": "`y` is an eventually-fulfilled promise for a thenable that immediately throws in `then`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "32f54079-d04a-4f0f-8d3e-977d1894e3b6",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1f09f701-7cbd-4cd0-8949-6e92c3d61675",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 58,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "dd1bb557-cd45-4344-b4dc-bcbeadf922f7",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "1f09f701-7cbd-4cd0-8949-6e92c3d61675",
                                  "dd1bb557-cd45-4344-b4dc-bcbeadf922f7"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 118,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "2eb6d224-04f4-4f11-8795-932277ab630b",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "829a986a-51a7-4c62-87f2-d5de9077e91e",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "360653aa-de20-4e98-a1e9-5ab65ae5d241",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "829a986a-51a7-4c62-87f2-d5de9077e91e",
                                  "360653aa-de20-4e98-a1e9-5ab65ae5d241"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 121,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "43dd87d1-abc0-4d80-8f0e-1b6f48037a93",
                            "title": "`y` is an eventually-fulfilled promise for an object with a throwing `then` accessor",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "ac2c09ab-d62b-48ae-890e-e1459e38b631",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4b7a306e-f5d2-4a2d-beda-a0e8889652d4",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 58,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0bdcd491-7b61-443f-84d2-4cbb6cd1d1f3",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "4b7a306e-f5d2-4a2d-beda-a0e8889652d4",
                                  "0bdcd491-7b61-443f-84d2-4cbb6cd1d1f3"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 118,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "3cbe8461-397c-447a-8994-e72243be0ffb",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 58,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "955fd1ea-db96-4bbb-a3ea-afd17ed19a1a",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "df61a553-2757-4048-8ea4-0a830ba38afe",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "955fd1ea-db96-4bbb-a3ea-afd17ed19a1a",
                                  "df61a553-2757-4048-8ea4-0a830ba38afe"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 120,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "11b5c36f-0c1b-469b-85b7-59f5cd389fef",
                            "title": "`y` is an eventually-fulfilled promise for an already-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "9a8c7d94-1308-466b-b66f-b09e2d5f99cd",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c1ceed78-c6c2-478b-b529-a44565652747",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3c9ea772-d815-4a11-9c23-0972ab161609",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "c1ceed78-c6c2-478b-b529-a44565652747",
                                  "3c9ea772-d815-4a11-9c23-0972ab161609"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 122,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "120a9c06-f81f-406f-9ec1-37d539dcfc29",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 65,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7e0a5909-fa1f-46ab-be52-13c7cd216415",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 64,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8047f5c7-eaa3-4c86-be5f-65534b8689ea",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "7e0a5909-fa1f-46ab-be52-13c7cd216415",
                                  "8047f5c7-eaa3-4c86-be5f-65534b8689ea"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 129,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "484f19b3-024e-49f5-80f0-787ce1a75bfa",
                            "title": "`y` is an eventually-fulfilled promise for an eventually-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "673dae0a-eb99-4894-af5f-53676040fb3e",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "994892aa-df46-4a9f-a4bb-b8c8dc08bfcf",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d0dd808c-1221-4eda-87a8-7a31b644069d",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "994892aa-df46-4a9f-a4bb-b8c8dc08bfcf",
                                  "d0dd808c-1221-4eda-87a8-7a31b644069d"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 120,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "a6d5ad07-a975-4c35-b644-eab9acf492b3",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "af93e012-4793-4454-ad24-fdbdf3da0b79",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8e82ba1b-5f78-4fd7-b85e-9c719fa90b39",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "af93e012-4793-4454-ad24-fdbdf3da0b79",
                                  "8e82ba1b-5f78-4fd7-b85e-9c719fa90b39"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 124,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "bb2c930e-c0fe-4166-813f-03b7087daad2",
                    "title": "2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                      {
                        "uuid": "bfede4cb-99bf-441c-bd23-19c4bdeba659",
                        "title": "`r` is `undefined`",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "49b3595e-5989-4fee-851f-5edf6a1cfe01",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `undefined` `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "b062d4ed-0392-445e-b421-3e98cb9fc9b2",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `undefined` `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "e99a9926-7b28-40ec-bf4a-fe167a32d94e",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "b062d4ed-0392-445e-b421-3e98cb9fc9b2",
                              "e99a9926-7b28-40ec-bf4a-fe167a32d94e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "e19136c0-17c5-41cc-9b83-7b4b3d048ed0",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `undefined` `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "d5ea1b6f-5570-48d9-acc4-51a9ae16c7c8",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `undefined` `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "3c8cb6c1-abda-4428-863d-4776d7932a25",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "d5ea1b6f-5570-48d9-acc4-51a9ae16c7c8",
                              "3c8cb6c1-abda-4428-863d-4776d7932a25"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "f86ce3f3-bfe7-40fe-b6d7-c5038ca4de0d",
                        "title": "`r` is `null`",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "ab0a8fe5-8043-4d4c-ad7f-cfbadfe9566a",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `null` `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "a49a2ff9-f33c-4b40-9c8d-a700d8133b0b",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `null` `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "3a3a565d-104b-413f-a0ae-bf245807f171",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "a49a2ff9-f33c-4b40-9c8d-a700d8133b0b",
                              "3a3a565d-104b-413f-a0ae-bf245807f171"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "9de9d0de-0f5b-4511-959c-d74d2ff4cbe6",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `null` `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 9,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "9e8bf3eb-b466-4513-9e16-d91d45e0e8f9",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `null` `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "9f34eea7-f2a3-4f44-892f-9dbca3d92241",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "9e8bf3eb-b466-4513-9e16-d91d45e0e8f9",
                              "9f34eea7-f2a3-4f44-892f-9dbca3d92241"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 17,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "7fa3bf4c-ea97-494b-87ef-769f872d5154",
                        "title": "`r` is `false`",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "5f08dc6f-9a43-4780-b9bb-af66e1f2fbfd",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `false` `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "3c3ebc86-32da-4663-b271-a5e32c33a3f8",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `false` `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "cb3dfa30-fef9-4989-a183-038da82f053f",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "3c3ebc86-32da-4663-b271-a5e32c33a3f8",
                              "cb3dfa30-fef9-4989-a183-038da82f053f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "81fcf588-0eb4-46cd-9e64-a993b5464929",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `false` `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "41df6fd9-1b2d-49b7-81e0-90bb9986eb14",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `false` `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "80ecd4b2-6efa-4ada-87e4-37317326ad9f",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "41df6fd9-1b2d-49b7-81e0-90bb9986eb14",
                              "80ecd4b2-6efa-4ada-87e4-37317326ad9f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "d79312a2-a64e-4efd-87e8-d671c6edb36a",
                        "title": "`r` is `0`",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "4dbc64df-80b2-4be3-bc92-50009a29b98c",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `0` `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "148a80bd-36d3-4b41-afe9-c4c81e571b43",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `0` `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "15ed06bb-a4e8-4d25-94fa-36af99b0dbb6",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "148a80bd-36d3-4b41-afe9-c4c81e571b43",
                              "15ed06bb-a4e8-4d25-94fa-36af99b0dbb6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "447330d8-e74d-4735-8836-a8bd1b6af285",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `0` `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "33b0ec18-4263-4d87-af96-bdbf58ae2b69",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `0` `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 9,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "7b011ba4-c1dc-42f6-92b6-bff1fbab53a1",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "33b0ec18-4263-4d87-af96-bdbf58ae2b69",
                              "7b011ba4-c1dc-42f6-92b6-bff1fbab53a1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "c7e6c802-674c-443f-b1d9-9a935ed7c13f",
                        "title": "`r` is an error",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "62b011a8-cef2-4cc4-a1c1-cba7c9ae7dd4",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an error `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "7e4a7ad2-d9c2-4a78-be29-65adc1df09e1",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an error `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "8705fce4-3cec-4396-9878-d8182711d7bc",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "7e4a7ad2-d9c2-4a78-be29-65adc1df09e1",
                              "8705fce4-3cec-4396-9878-d8182711d7bc"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "266fc9aa-4b58-4d47-82d4-05bc19bf28e6",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an error `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "3a67aba4-3870-4e7b-8d4d-860980c94330",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an error `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "ac184cef-95af-4236-ac08-df2625cd15c7",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "3a67aba4-3870-4e7b-8d4d-860980c94330",
                              "ac184cef-95af-4236-ac08-df2625cd15c7"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "c6fc1529-bac6-41a5-ac05-decf3bad8e1e",
                        "title": "`r` is an error without a stack",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "693a4237-8bdf-4529-a82a-f4f7da91f868",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an error without a stack `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "a9349bb8-1f54-42fc-998a-1bd9ecaafb0e",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an error without a stack `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "85f79ea5-ec8f-4c60-b25b-81608d44491f",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "a9349bb8-1f54-42fc-998a-1bd9ecaafb0e",
                              "85f79ea5-ec8f-4c60-b25b-81608d44491f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "3b22abca-92f4-4e73-a370-da47774ab3f5",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an error without a stack `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "944d5492-cd7c-429d-9b1b-70e1548ae666",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an error without a stack `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "84d89e8f-6038-49c3-9f20-e5011a406365",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "944d5492-cd7c-429d-9b1b-70e1548ae666",
                              "84d89e8f-6038-49c3-9f20-e5011a406365"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "41e51dbf-a075-4538-96e4-54e83499b136",
                        "title": "`r` is a date",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "88753ae3-a830-42d1-a9b6-2502e8e6bf43",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a date `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "85102da7-2f86-42d9-b363-5ddcb3266dd1",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a date `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "a47f5b7f-bac1-4975-b41c-1a033e0a95e4",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "85102da7-2f86-42d9-b363-5ddcb3266dd1",
                              "a47f5b7f-bac1-4975-b41c-1a033e0a95e4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "c27c54cf-fe6e-481a-bc20-561b7a64bd41",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a date `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "340a88c1-bc1e-41ce-a8c2-9e7b39310402",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a date `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "f440e492-313e-4104-a2e8-5971f6b44b2f",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "340a88c1-bc1e-41ce-a8c2-9e7b39310402",
                              "f440e492-313e-4104-a2e8-5971f6b44b2f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "37e595ce-bb70-41ca-966d-0f790db762fe",
                        "title": "`r` is an object",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "1131d190-b02f-47ae-9517-bcc3e714485b",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an object `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "7aad4e7d-1b32-4c63-a19b-14b736b28a88",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an object `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "ab827292-1651-40f9-9c73-30f3d35b048a",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "7aad4e7d-1b32-4c63-a19b-14b736b28a88",
                              "ab827292-1651-40f9-9c73-30f3d35b048a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "a246af40-afca-471e-8d2d-3df8359ff70f",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an object `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "f657bc24-ad28-4dec-bba5-66d9241a1c26",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an object `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "c6701642-e188-4246-889d-8e3259c0300f",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "f657bc24-ad28-4dec-bba5-66d9241a1c26",
                              "c6701642-e188-4246-889d-8e3259c0300f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "13a47769-5e36-4e41-b871-f6a08d5783e0",
                        "title": "`r` is an always-pending thenable",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "f4951aab-fd86-404d-bd8a-5ac89dc52d06",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an always-pending thenable `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "e3aa23ee-8fea-4311-80ac-27ebd9903ce2",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an always-pending thenable `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "007b2e91-7e98-4d01-bb05-2f3d08a33fe5",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "e3aa23ee-8fea-4311-80ac-27ebd9903ce2",
                              "007b2e91-7e98-4d01-bb05-2f3d08a33fe5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "6e48c807-c709-4044-ba4e-d00901733765",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an always-pending thenable `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "24fb42b3-56f1-4bca-ac2c-f6bb1dc8419f",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an always-pending thenable `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "a8b46818-fd4c-4bd8-86b8-d1174507bf43",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "24fb42b3-56f1-4bca-ac2c-f6bb1dc8419f",
                              "a8b46818-fd4c-4bd8-86b8-d1174507bf43"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "6c662221-ff03-4333-8541-ce109a1a8738",
                        "title": "`r` is a fulfilled promise",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "63b53fe4-ab33-4162-ac83-edd23cac60f2",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a fulfilled promise `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "eb2f6aeb-0ad0-4a77-8791-bc0db7ac82ce",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a fulfilled promise `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "118acefc-1f1b-4cb0-b7e4-bb6cf92db0cd",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "eb2f6aeb-0ad0-4a77-8791-bc0db7ac82ce",
                              "118acefc-1f1b-4cb0-b7e4-bb6cf92db0cd"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "de9defda-ce00-4919-a8ba-091a3866c994",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a fulfilled promise `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "0907451a-16c7-4945-991d-7d68bb78bd04",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a fulfilled promise `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "839b73e3-6bdd-4300-b5fe-96141b7d10e7",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "0907451a-16c7-4945-991d-7d68bb78bd04",
                              "839b73e3-6bdd-4300-b5fe-96141b7d10e7"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "7aca7273-038e-4ff7-ad4e-d88d2d148760",
                        "title": "`r` is a rejected promise",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "24d0922c-d7cf-4cbe-b7ad-87ce3514d102",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a rejected promise `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "e30f0ac6-6f3b-4764-a2f3-deac57d67d0d",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a rejected promise `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "612fc1d6-94ea-4c74-9513-d11b1f188fdd",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "e30f0ac6-6f3b-4764-a2f3-deac57d67d0d",
                              "612fc1d6-94ea-4c74-9513-d11b1f188fdd"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "7de6afce-37b3-475e-a9dd-26a15d52c36b",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a rejected promise `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "9cacfaab-ff58-4051-ab97-9307c0ec3e80",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a rejected promise `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "a8e4ef3e-e9a8-485c-86d1-4f16810a5f90",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "9cacfaab-ff58-4051-ab97-9307c0ec3e80",
                              "a8e4ef3e-e9a8-485c-86d1-4f16810a5f90"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 16,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "3e8da140-5e05-4caf-ac8f-a534a5b1c09d",
                    "title": "2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored.",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                      {
                        "uuid": "9075ac79-dd22-4da9-a4d2-150a4900da5d",
                        "title": "calling `resolvePromise` then `rejectPromise`, both synchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` then `rejectPromise`, both synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 7,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "fd17de8b-b6c4-45fc-b3a5-1b3c6fa8d646",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` then `rejectPromise`, both synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "e93ef31e-6033-4f08-a40e-18cfd959a75a",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "fd17de8b-b6c4-45fc-b3a5-1b3c6fa8d646",
                          "e93ef31e-6033-4f08-a40e-18cfd959a75a"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 11,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "401f2d0f-131f-4f96-ba5f-595879bece64",
                        "title": "calling `resolvePromise` synchronously then `rejectPromise` asynchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` synchronously then `rejectPromise` asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "598a3528-6f20-424d-97f8-509069c05173",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` synchronously then `rejectPromise` asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "dee0f858-017e-41de-b587-6f4ef40bf470",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "598a3528-6f20-424d-97f8-509069c05173",
                          "dee0f858-017e-41de-b587-6f4ef40bf470"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 9,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "6431ddd3-d1a1-42d7-984b-0b0cbf205b6b",
                        "title": "calling `resolvePromise` then `rejectPromise`, both asynchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` then `rejectPromise`, both asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "bcb665fc-5ae7-4e41-af97-2fcec2be1bc0",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` then `rejectPromise`, both asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 7,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "11654934-dfb6-4cf7-acf3-c1699e4e6887",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "bcb665fc-5ae7-4e41-af97-2fcec2be1bc0",
                          "11654934-dfb6-4cf7-acf3-c1699e4e6887"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 13,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "063f68ac-81ab-4fcb-9c22-652e74d85de8",
                        "title": "calling `resolvePromise` with an asynchronously-fulfilled promise, then calling `rejectPromise`, both synchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` with an asynchronously-fulfilled promise, then calling `rejectPromise`, both synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 60,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "93ee9db1-88f6-4b66-85f2-2128da2d945e",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` with an asynchronously-fulfilled promise, then calling `rejectPromise`, both synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 65,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "f1179137-f2c4-407c-8e91-8e2809f29d93",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "93ee9db1-88f6-4b66-85f2-2128da2d945e",
                          "f1179137-f2c4-407c-8e91-8e2809f29d93"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 125,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "06990ed3-b338-4344-bc38-43187ec62acd",
                        "title": "calling `resolvePromise` with an asynchronously-rejected promise, then calling `rejectPromise`, both synchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` with an asynchronously-rejected promise, then calling `rejectPromise`, both synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 58,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "8c5db46f-e249-4e00-a34d-0329659d7d05",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` with an asynchronously-rejected promise, then calling `rejectPromise`, both synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 60,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "0f4ec08d-e85c-4781-aba4-5bf6af794b51",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "8c5db46f-e249-4e00-a34d-0329659d7d05",
                          "0f4ec08d-e85c-4781-aba4-5bf6af794b51"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 118,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "5af6d401-dbc0-45ef-b3da-889978fbbef9",
                        "title": "calling `rejectPromise` then `resolvePromise`, both synchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` then `resolvePromise`, both synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "ec1ca217-2525-42fc-97d8-f2edd5bb25cf",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` then `resolvePromise`, both synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "063a9642-508d-4f2a-846a-6d25fa02e904",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "ec1ca217-2525-42fc-97d8-f2edd5bb25cf",
                          "063a9642-508d-4f2a-846a-6d25fa02e904"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 10,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "1fe624d9-487e-41c3-abb5-677f39a7fc5a",
                        "title": "calling `rejectPromise` synchronously then `resolvePromise` asynchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` synchronously then `resolvePromise` asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "609b609c-e1d4-4335-a849-fd9e092f3c05",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` synchronously then `resolvePromise` asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "ccb766d3-25c9-482e-8ffd-6abbc8784322",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "609b609c-e1d4-4335-a849-fd9e092f3c05",
                          "ccb766d3-25c9-482e-8ffd-6abbc8784322"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 12,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "f5b1eb14-3a59-4ec9-b05f-590e6b263031",
                        "title": "calling `rejectPromise` then `resolvePromise`, both asynchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` then `resolvePromise`, both asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 8,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "e033e225-09bd-44af-9632-87a7406ad558",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` then `resolvePromise`, both asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "42031e43-8887-497d-ad22-44275d31b094",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "e033e225-09bd-44af-9632-87a7406ad558",
                          "42031e43-8887-497d-ad22-44275d31b094"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 13,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "1fe078c6-7712-43af-97bb-5b8a70c6832a",
                        "title": "calling `resolvePromise` twice synchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` twice synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "c2439e25-834e-40ac-97c1-5fe7c7c1e2ce",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` twice synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "fd3c6c17-3e14-4608-a23d-c0b853806c78",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "c2439e25-834e-40ac-97c1-5fe7c7c1e2ce",
                          "fd3c6c17-3e14-4608-a23d-c0b853806c78"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 10,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "8a936260-d2af-4cf8-8cc1-f1626972a141",
                        "title": "calling `resolvePromise` twice, first synchronously then asynchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` twice, first synchronously then asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "9439467d-c55d-47e2-9b13-11648f75cf7a",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` twice, first synchronously then asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "2abcb98b-5ae9-4327-b6fa-7656c0e93123",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "9439467d-c55d-47e2-9b13-11648f75cf7a",
                          "2abcb98b-5ae9-4327-b6fa-7656c0e93123"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 11,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "5b8a7e73-3c55-4813-8e00-4fa0c4286872",
                        "title": "calling `resolvePromise` twice, both times asynchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` twice, both times asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 7,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "945f0d0d-7382-4237-9aee-411b15cb1694",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` twice, both times asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 7,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "b3918d43-4461-488a-8eed-01ecd2428d3d",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "945f0d0d-7382-4237-9aee-411b15cb1694",
                          "b3918d43-4461-488a-8eed-01ecd2428d3d"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 14,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "149666ee-08e6-4ce7-8364-c3132d9335c5",
                        "title": "calling `resolvePromise` with an asynchronously-fulfilled promise, then calling it again, both times synchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` with an asynchronously-fulfilled promise, then calling it again, both times synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 59,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "82064618-0e7a-4cba-ad1f-9635ab67f652",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` with an asynchronously-fulfilled promise, then calling it again, both times synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 59,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "174b2664-0756-413e-bc66-193e98a84ca7",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "82064618-0e7a-4cba-ad1f-9635ab67f652",
                          "174b2664-0756-413e-bc66-193e98a84ca7"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 118,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "c758245d-6cef-4a1b-9012-255753e51e84",
                        "title": "calling `resolvePromise` with an asynchronously-rejected promise, then calling it again, both times synchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` with an asynchronously-rejected promise, then calling it again, both times synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 60,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "e8dd5533-5e17-4e28-897e-e1faaea1f84e",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` with an asynchronously-rejected promise, then calling it again, both times synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 60,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "a10a5b7c-3172-43e9-9af3-0d22587fb6e6",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "e8dd5533-5e17-4e28-897e-e1faaea1f84e",
                          "a10a5b7c-3172-43e9-9af3-0d22587fb6e6"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 120,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "d444f7ec-826d-4175-854e-a3f919f43c69",
                        "title": "calling `rejectPromise` twice synchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` twice synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "e161d536-5539-4921-af90-0178aab6b583",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` twice synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "f8bdd0cb-2f4e-4e64-855d-d40330615a47",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "e161d536-5539-4921-af90-0178aab6b583",
                          "f8bdd0cb-2f4e-4e64-855d-d40330615a47"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 10,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "a9bdf0a8-b1ec-43ad-b24f-10da9168f9a6",
                        "title": "calling `rejectPromise` twice, first synchronously then asynchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` twice, first synchronously then asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "6f6ffa07-eedb-4276-bfa3-fd9e5b5da54e",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` twice, first synchronously then asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "7270e7e8-47d2-4ce7-9268-d014559d5467",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "6f6ffa07-eedb-4276-bfa3-fd9e5b5da54e",
                          "7270e7e8-47d2-4ce7-9268-d014559d5467"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 11,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "6f0db15c-4355-428b-afca-5ea95d7fc968",
                        "title": "calling `rejectPromise` twice, both times asynchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` twice, both times asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 7,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "14a0808c-6d2c-46f0-801c-2cdf1acbb4c8",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` twice, both times asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 8,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "ab896071-6677-47e4-962c-d6415e088a5c",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "14a0808c-6d2c-46f0-801c-2cdf1acbb4c8",
                          "ab896071-6677-47e4-962c-d6415e088a5c"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 15,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "4a510839-72f5-4e78-a92d-169da1c51d20",
                        "title": "saving and abusing `resolvePromise` and `rejectPromise`",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [
                          {
                            "title": "\"before each\" hook",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. saving and abusing `resolvePromise` and `rejectPromise` \"before each\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "code": "savedResolvePromise = null;\nsavedRejectPromise = null;",
                            "err": {},
                            "isRoot": false,
                            "uuid": "3f4cfe85-35aa-4940-a6e2-0ca0bbf567ae",
                            "isHook": true,
                            "skipped": false
                          }
                        ],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. saving and abusing `resolvePromise` and `rejectPromise` via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 101,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "61c00085-da31-45cb-a569-6788ade9d54a",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. saving and abusing `resolvePromise` and `rejectPromise` via return from a rejected promise",
                            "timedOut": false,
                            "duration": 101,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "ff15be59-ee8e-4a65-8e83-1425dd3f1bba",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "61c00085-da31-45cb-a569-6788ade9d54a",
                          "ff15be59-ee8e-4a65-8e83-1425dd3f1bba"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 202,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "626c6a29-1989-4c8e-ad2c-1f0beb77cec8",
                    "title": "2.3.3.3.4: If calling `then` throws an exception `e`,",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                      {
                        "uuid": "755f6b3e-57da-414d-acf4-2e7cf38ff229",
                        "title": "2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it.",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "d89a9442-a890-4477-ae6d-f7658688bdbf",
                            "title": "`resolvePromise` was called with a non-thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `resolvePromise` was called with a non-thenable via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "bacf386f-bb66-4530-b675-81be3b7800d0",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `resolvePromise` was called with a non-thenable via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "5f79e7fc-dd99-411b-ad7a-9c6456f43d06",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "bacf386f-bb66-4530-b675-81be3b7800d0",
                              "5f79e7fc-dd99-411b-ad7a-9c6456f43d06"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "e834448c-a02a-4469-8133-015a3e755d6c",
                            "title": "`resolvePromise` was called with an asynchronously-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `resolvePromise` was called with an asynchronously-fulfilled promise via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 57,
                                "state": "passed",
                                "speed": "medium",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "afb09409-d042-4020-a4c5-baf7e2de8de3",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `resolvePromise` was called with an asynchronously-fulfilled promise via return from a rejected promise",
                                "timedOut": false,
                                "duration": 56,
                                "state": "passed",
                                "speed": "medium",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "f1159abf-f19c-49a4-9d7b-76f92c0109c9",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "afb09409-d042-4020-a4c5-baf7e2de8de3",
                              "f1159abf-f19c-49a4-9d7b-76f92c0109c9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 113,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "150526c0-59b0-447d-9f10-98ebc818ad36",
                            "title": "`resolvePromise` was called with an asynchronously-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `resolvePromise` was called with an asynchronously-rejected promise via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 60,
                                "state": "passed",
                                "speed": "medium",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "970dc59a-f7fe-4497-84ac-04bbe8e1087b",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `resolvePromise` was called with an asynchronously-rejected promise via return from a rejected promise",
                                "timedOut": false,
                                "duration": 61,
                                "state": "passed",
                                "speed": "medium",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "fa8b35dd-33b7-4c72-a992-ebc38ad3409f",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "970dc59a-f7fe-4497-84ac-04bbe8e1087b",
                              "fa8b35dd-33b7-4c72-a992-ebc38ad3409f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 121,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "d953545e-6781-496d-b7c8-3c085c53e9d4",
                            "title": "`rejectPromise` was called",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `rejectPromise` was called via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "b9fa337c-1e47-4917-97bc-8638c25b0a16",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `rejectPromise` was called via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "d2ebda01-cf4d-4411-bbbd-03e15c8e6a29",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "b9fa337c-1e47-4917-97bc-8638c25b0a16",
                              "d2ebda01-cf4d-4411-bbbd-03e15c8e6a29"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "7c0cb71f-2c12-403f-84d2-9e25135286e4",
                            "title": "`resolvePromise` then `rejectPromise` were called",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `resolvePromise` then `rejectPromise` were called via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "cca9309e-9e0f-4d85-9fab-7ff3ebcd28a6",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `resolvePromise` then `rejectPromise` were called via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "f60d8fe0-1e68-404c-8d87-9a5844e5b9bc",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "cca9309e-9e0f-4d85-9fab-7ff3ebcd28a6",
                              "f60d8fe0-1e68-404c-8d87-9a5844e5b9bc"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "c3e0dcf4-744c-42ee-9be0-156b0ba7b3e4",
                            "title": "`rejectPromise` then `resolvePromise` were called",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `rejectPromise` then `resolvePromise` were called via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "e8a1987a-2d2b-4316-bded-e69955367fc4",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `rejectPromise` then `resolvePromise` were called via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "b513d541-1d98-4ec7-aaf8-6f7ef5e35cbb",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "e8a1987a-2d2b-4316-bded-e69955367fc4",
                              "b513d541-1d98-4ec7-aaf8-6f7ef5e35cbb"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "04b89453-d21c-45c9-b020-0efbb8bd823c",
                        "title": "2.3.3.3.4.2: Otherwise, reject `promise` with `e` as the reason.",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "2e4a1f24-4036-4d9b-bac6-eeecf7a54b44",
                            "title": "straightforward case",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.2: Otherwise, reject `promise` with `e` as the reason. straightforward case via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "f86c0cef-19f8-4482-b89e-6d3c8a0e33d0",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.2: Otherwise, reject `promise` with `e` as the reason. straightforward case via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "3ec1ff12-eaa8-417b-b1ec-55081984ba9f",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "f86c0cef-19f8-4482-b89e-6d3c8a0e33d0",
                              "3ec1ff12-eaa8-417b-b1ec-55081984ba9f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "2b201fe6-8df1-4c75-9eab-858fdca3773c",
                            "title": "`resolvePromise` is called asynchronously before the `throw`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.2: Otherwise, reject `promise` with `e` as the reason. `resolvePromise` is called asynchronously before the `throw` via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "6cc7b7ff-f05e-460d-ae81-83605e88e101",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.2: Otherwise, reject `promise` with `e` as the reason. `resolvePromise` is called asynchronously before the `throw` via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "13f1f37a-8318-40d6-8076-6ec8f8db7211",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "6cc7b7ff-f05e-460d-ae81-83605e88e101",
                              "13f1f37a-8318-40d6-8076-6ec8f8db7211"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "6ad24f6d-23af-4ac6-8690-47f1ae89eb6e",
                            "title": "`rejectPromise` is called asynchronously before the `throw`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.2: Otherwise, reject `promise` with `e` as the reason. `rejectPromise` is called asynchronously before the `throw` via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "9fbceb24-6350-4b36-9f79-594564923cdc",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.2: Otherwise, reject `promise` with `e` as the reason. `rejectPromise` is called asynchronously before the `throw` via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "6790aee8-7c92-4495-bec0-3bb28ef628e3",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "9fbceb24-6350-4b36-9f79-594564923cdc",
                              "6790aee8-7c92-4495-bec0-3bb28ef628e3"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "73de31d2-b6a6-4cda-b718-cec59681acf9",
                "title": "2.3.3.4: If `then` is not a function, fulfill promise with `x`",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` \"before each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "x = { then: then };",
                    "err": {},
                    "isRoot": false,
                    "uuid": "80415d2b-5fb6-4667-bad5-9e09079ff03c",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` \"before each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "x = { then: then };",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f4f35a94-bd1e-497a-8ca6-8ff0b65c13f8",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` \"before each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "x = { then: then };",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3a4e0752-62a5-432b-a654-324a8f2de56a",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` \"before each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "x = { then: then };",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9693d76a-395f-45b9-9d3d-98095d328d9d",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` \"before each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "x = { then: then };",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b3a74426-70b8-4410-a90b-f1b2cb89c548",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "43da687e-33bd-4155-bcab-a4f4581b4775",
                    "title": "`then` is `5`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is `5` via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c73bb676-6e40-43df-8190-9d14d76f42d0",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is `5` via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ffd580ad-3b7a-4685-85b5-edc2c301e899",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "c73bb676-6e40-43df-8190-9d14d76f42d0",
                      "ffd580ad-3b7a-4685-85b5-edc2c301e899"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 10,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "4ae70a97-181d-4344-85fd-6b8ed3e880fc",
                    "title": "`then` is an object",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is an object via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b4bc0e72-d8e6-4589-82a5-47783029bfa3",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is an object via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "540fc3d7-31fa-4dd1-8dc6-5a3743495fec",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "b4bc0e72-d8e6-4589-82a5-47783029bfa3",
                      "540fc3d7-31fa-4dd1-8dc6-5a3743495fec"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 11,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "011eef9b-70e5-49d6-bb0b-90afce32dbf0",
                    "title": "`then` is an array containing a function",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is an array containing a function via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "118685c0-6ca4-4c65-9bcd-0ab5c0fe4c51",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is an array containing a function via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a42bf988-b082-4cba-a39b-78887bba4466",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "118685c0-6ca4-4c65-9bcd-0ab5c0fe4c51",
                      "a42bf988-b082-4cba-a39b-78887bba4466"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 12,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "53d3c85f-6364-4c53-85ec-1360bc325b26",
                    "title": "`then` is a regular expression",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is a regular expression via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4ecfe9b8-942d-4cbd-ac37-2ec41f2c7db2",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is a regular expression via return from a rejected promise",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0ae2c347-1859-4ad0-b973-7c9c05907822",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "4ecfe9b8-942d-4cbd-ac37-2ec41f2c7db2",
                      "0ae2c347-1859-4ad0-b973-7c9c05907822"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 14,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "9088682c-985e-4311-af0b-e4fde2797a9d",
                    "title": "`then` is an object inheriting from `Function.prototype`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is an object inheriting from `Function.prototype` via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4c49f085-c44b-41e7-bc92-c0e308fdb4af",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is an object inheriting from `Function.prototype` via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6e4b0bfc-e555-4eb1-b78c-ab32c2effc05",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "4c49f085-c44b-41e7-bc92-c0e308fdb4af",
                      "6e4b0bfc-e555-4eb1-b78c-ab32c2effc05"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 12,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "945c9b07-ad3e-4207-b23a-22620c4ea1c8",
            "title": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x`",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "a61cf17f-0326-4124-8951-ae39b801c9f2",
                "title": "The value is `undefined`",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `undefined` already-fulfilled",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "692c3775-3940-408d-94d5-3dd76d71f1ee",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `undefined` immediately-fulfilled",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7e16132a-0943-4734-b780-5dbb853ccf9c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `undefined` eventually-fulfilled",
                    "timedOut": false,
                    "duration": 59,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c21a8c2d-908b-481f-9316-e3b8312e6a1c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `undefined` already-rejected",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bc3df773-7ee4-407d-a6a6-6d0fc03d196d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `undefined` immediately-rejected",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "723461bb-553d-4f7e-9ddd-c8cbbff83642",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `undefined` eventually-rejected",
                    "timedOut": false,
                    "duration": 57,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bd9468c0-c754-4592-bf82-f47e9ba56fb9",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "692c3775-3940-408d-94d5-3dd76d71f1ee",
                  "7e16132a-0943-4734-b780-5dbb853ccf9c",
                  "c21a8c2d-908b-481f-9316-e3b8312e6a1c",
                  "bc3df773-7ee4-407d-a6a6-6d0fc03d196d",
                  "723461bb-553d-4f7e-9ddd-c8cbbff83642",
                  "bd9468c0-c754-4592-bf82-f47e9ba56fb9"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 143,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "0da985ab-f66d-4d77-b669-1e0978c2ce09",
                "title": "The value is `null`",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `null` already-fulfilled",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e7c22516-9027-40c6-97c2-a22deec3ce10",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `null` immediately-fulfilled",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fbe609ee-92b7-4c05-8bfe-3eeddc11bd7a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `null` eventually-fulfilled",
                    "timedOut": false,
                    "duration": 58,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5d30e48b-76e7-4a38-a892-ef717ba5b49c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `null` already-rejected",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5dab0de1-51f6-4192-a40c-8865bb688b2c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `null` immediately-rejected",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "58217256-9762-4349-81a5-c2cd4b485af2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `null` eventually-rejected",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bd688790-7897-4285-9f3e-f7e399787132",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "e7c22516-9027-40c6-97c2-a22deec3ce10",
                  "fbe609ee-92b7-4c05-8bfe-3eeddc11bd7a",
                  "5d30e48b-76e7-4a38-a892-ef717ba5b49c",
                  "5dab0de1-51f6-4192-a40c-8865bb688b2c",
                  "58217256-9762-4349-81a5-c2cd4b485af2",
                  "bd688790-7897-4285-9f3e-f7e399787132"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 139,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "1259884f-69b6-4b7e-975e-8313322461db",
                "title": "The value is `false`",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `false` already-fulfilled",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "53112d89-0bdc-4b87-87ab-97d7eaaee093",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `false` immediately-fulfilled",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c5ff850d-8962-4ce5-8e92-e1fa4aaa4fd9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `false` eventually-fulfilled",
                    "timedOut": false,
                    "duration": 58,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f7b46021-4fe9-444c-ad37-eb8fbe369b60",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `false` already-rejected",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "38120bb3-e0ea-487b-ba30-5338e4efb27f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `false` immediately-rejected",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0c925cd8-b678-4ed9-9899-827e5c04f46d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `false` eventually-rejected",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4006ae93-30cc-4695-bff1-fc9359a9624d",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "53112d89-0bdc-4b87-87ab-97d7eaaee093",
                  "c5ff850d-8962-4ce5-8e92-e1fa4aaa4fd9",
                  "f7b46021-4fe9-444c-ad37-eb8fbe369b60",
                  "38120bb3-e0ea-487b-ba30-5338e4efb27f",
                  "0c925cd8-b678-4ed9-9899-827e5c04f46d",
                  "4006ae93-30cc-4695-bff1-fc9359a9624d"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 136,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "59f893be-bcbd-4848-af9f-3af440de9a14",
                "title": "The value is `true`",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` already-fulfilled",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "01dac02f-bf63-407d-8c7b-9c402443aad1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` immediately-fulfilled",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "48ae8838-a145-4877-9a93-b02f21adf3fd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` eventually-fulfilled",
                    "timedOut": false,
                    "duration": 59,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b161c444-a0e3-4e7a-a6df-69b1b56beb8e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` already-rejected",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2bce0634-001d-4a06-9ccb-2c867f46a6b0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` immediately-rejected",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2d08fab9-7294-4f27-be10-81f7fb63a125",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` eventually-rejected",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1dd433d2-bfd7-4e18-938a-7d623f904fa3",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "01dac02f-bf63-407d-8c7b-9c402443aad1",
                  "48ae8838-a145-4877-9a93-b02f21adf3fd",
                  "b161c444-a0e3-4e7a-a6df-69b1b56beb8e",
                  "2bce0634-001d-4a06-9ccb-2c867f46a6b0",
                  "2d08fab9-7294-4f27-be10-81f7fb63a125",
                  "1dd433d2-bfd7-4e18-938a-7d623f904fa3"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 136,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "4958fac0-331b-429f-ae28-f9fd6f62d5fe",
                "title": "The value is `0`",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `0` already-fulfilled",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a366ba15-d4a1-4a8b-b1da-ccbf73c11893",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `0` immediately-fulfilled",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bd7d0237-6944-4c1a-9183-9f45f012d16c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `0` eventually-fulfilled",
                    "timedOut": false,
                    "duration": 60,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "96a7d11c-ef59-43f1-a6d1-81258e90bdb1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `0` already-rejected",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d5177d07-a940-42ef-b5a4-0497d48cffd5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `0` immediately-rejected",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "72336468-774d-43f3-a1c4-bf63546e0c0f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `0` eventually-rejected",
                    "timedOut": false,
                    "duration": 57,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4a006a31-c031-4037-bfa3-12cc44b20395",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "a366ba15-d4a1-4a8b-b1da-ccbf73c11893",
                  "bd7d0237-6944-4c1a-9183-9f45f012d16c",
                  "96a7d11c-ef59-43f1-a6d1-81258e90bdb1",
                  "d5177d07-a940-42ef-b5a4-0497d48cffd5",
                  "72336468-774d-43f3-a1c4-bf63546e0c0f",
                  "4a006a31-c031-4037-bfa3-12cc44b20395"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 142,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "33dbf01c-bcdf-4ac4-aa10-c968d543f513",
                "title": "The value is `true` with `Boolean.prototype` modified to have a `then` method",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` with `Boolean.prototype` modified to have a `then` method \"before each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "Boolean.prototype.then = function () {};",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3be1baba-566a-4fda-9e5c-0de463a0da5a",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` with `Boolean.prototype` modified to have a `then` method \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "delete Boolean.prototype.then;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a553634b-5cc3-4e3e-b843-312e24eea2ea",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` with `Boolean.prototype` modified to have a `then` method already-fulfilled",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0b23420b-fd4e-4d8d-ab18-256449c718c4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` with `Boolean.prototype` modified to have a `then` method immediately-fulfilled",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0cd3b96a-a596-4528-9d72-6c12dd571442",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` with `Boolean.prototype` modified to have a `then` method eventually-fulfilled",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9bb7fbc9-f7cf-4fd6-95da-6cb9814de78e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` with `Boolean.prototype` modified to have a `then` method already-rejected",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "be42917c-edf8-41f9-b305-e6ecf44908ab",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` with `Boolean.prototype` modified to have a `then` method immediately-rejected",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c15afe7c-44a0-4543-b1f9-66311e2ec4e1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` with `Boolean.prototype` modified to have a `then` method eventually-rejected",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9e9b4dd7-033e-47e7-8dd4-cdd74e5c8a53",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "0b23420b-fd4e-4d8d-ab18-256449c718c4",
                  "0cd3b96a-a596-4528-9d72-6c12dd571442",
                  "9bb7fbc9-f7cf-4fd6-95da-6cb9814de78e",
                  "be42917c-edf8-41f9-b305-e6ecf44908ab",
                  "c15afe7c-44a0-4543-b1f9-66311e2ec4e1",
                  "9e9b4dd7-033e-47e7-8dd4-cdd74e5c8a53"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 136,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "59fddd84-2bd1-4e0c-a8ea-bdb9691128be",
                "title": "The value is `1` with `Number.prototype` modified to have a `then` method",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `1` with `Number.prototype` modified to have a `then` method \"before each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "Number.prototype.then = function () {};",
                    "err": {},
                    "isRoot": false,
                    "uuid": "43d961e4-2e98-4073-863e-f023c1a6aa7b",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `1` with `Number.prototype` modified to have a `then` method \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "delete Number.prototype.then;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9e0839da-2bbe-44bd-b125-1767d3cf52c0",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `1` with `Number.prototype` modified to have a `then` method already-fulfilled",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7f1958f4-02ff-4515-b4c6-08e2ffecf110",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `1` with `Number.prototype` modified to have a `then` method immediately-fulfilled",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e5879ecb-7030-4b09-8a0d-c9a12424f946",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `1` with `Number.prototype` modified to have a `then` method eventually-fulfilled",
                    "timedOut": false,
                    "duration": 58,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "06ed0948-0f8b-42a4-aef5-ffe1a36b8bfd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `1` with `Number.prototype` modified to have a `then` method already-rejected",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "370d40b7-6e6f-4f00-90ac-51d065f76878",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `1` with `Number.prototype` modified to have a `then` method immediately-rejected",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8acde712-d33a-40ab-b7d1-10bf4ac3db43",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `1` with `Number.prototype` modified to have a `then` method eventually-rejected",
                    "timedOut": false,
                    "duration": 59,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ada657c7-5362-4ce1-b49f-1b80ad3220f3",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "7f1958f4-02ff-4515-b4c6-08e2ffecf110",
                  "e5879ecb-7030-4b09-8a0d-c9a12424f946",
                  "06ed0948-0f8b-42a4-aef5-ffe1a36b8bfd",
                  "370d40b7-6e6f-4f00-90ac-51d065f76878",
                  "8acde712-d33a-40ab-b7d1-10bf4ac3db43",
                  "ada657c7-5362-4ce1-b49f-1b80ad3220f3"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 140,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}