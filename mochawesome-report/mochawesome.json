{
  "stats": {
    "suites": 531,
    "tests": 872,
    "passes": 872,
    "pending": 0,
    "failures": 0,
    "start": "2019-02-20T02:58:09.132Z",
    "end": "2019-02-20T02:58:27.791Z",
    "duration": 18659,
    "testsRegistered": 872,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "f5d83109-5c3c-494f-aebc-723876c18c9d",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "f0cfe42c-4d93-44ac-bf50-3316014cbfa3",
        "title": "Promises/A+ Tests",
        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
        "file": "\\test\\index.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6fd697d5-8638-4075-8e43-74deaa25e3bc",
            "title": "2.1.2.1: When fulfilled, a promise: must not transition to any other state.",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "already-fulfilled",
                "fullTitle": "Promises/A+ Tests 2.1.2.1: When fulfilled, a promise: must not transition to any other state. already-fulfilled",
                "timedOut": false,
                "duration": 103,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "test(resolved(value), done);",
                "err": {},
                "isRoot": false,
                "uuid": "2d01af75-c2d1-465b-a4c4-4cb515e02ffe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "immediately-fulfilled",
                "fullTitle": "Promises/A+ Tests 2.1.2.1: When fulfilled, a promise: must not transition to any other state. immediately-fulfilled",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                "err": {},
                "isRoot": false,
                "uuid": "193f38d4-4b9c-4704-b0f4-103266cb36ef",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "eventually-fulfilled",
                "fullTitle": "Promises/A+ Tests 2.1.2.1: When fulfilled, a promise: must not transition to any other state. eventually-fulfilled",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                "err": {},
                "isRoot": false,
                "uuid": "fb17c106-b3fb-46ff-adb6-54df99703e68",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "trying to fulfill then immediately reject",
                "fullTitle": "Promises/A+ Tests 2.1.2.1: When fulfilled, a promise: must not transition to any other state. trying to fulfill then immediately reject",
                "timedOut": false,
                "duration": 100,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar onFulfilledCalled = false;\nd.promise.then(function onFulfilled() {\n    onFulfilledCalled = true;\n}, function onRejected() {\n    assert.strictEqual(onFulfilledCalled, false);\n    done();\n});\nd.resolve(dummy);\nd.reject(dummy);\nsetTimeout(done, 100);",
                "err": {},
                "isRoot": false,
                "uuid": "2daf789b-8733-4334-9c66-aed21647c524",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "trying to fulfill then reject, delayed",
                "fullTitle": "Promises/A+ Tests 2.1.2.1: When fulfilled, a promise: must not transition to any other state. trying to fulfill then reject, delayed",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar onFulfilledCalled = false;\nd.promise.then(function onFulfilled() {\n    onFulfilledCalled = true;\n}, function onRejected() {\n    assert.strictEqual(onFulfilledCalled, false);\n    done();\n});\nsetTimeout(function () {\n    d.resolve(dummy);\n    d.reject(dummy);\n}, 50);\nsetTimeout(done, 100);",
                "err": {},
                "isRoot": false,
                "uuid": "7ff602e5-b465-4f2a-9181-c925adf31be8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "trying to fulfill immediately then reject delayed",
                "fullTitle": "Promises/A+ Tests 2.1.2.1: When fulfilled, a promise: must not transition to any other state. trying to fulfill immediately then reject delayed",
                "timedOut": false,
                "duration": 102,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar onFulfilledCalled = false;\nd.promise.then(function onFulfilled() {\n    onFulfilledCalled = true;\n}, function onRejected() {\n    assert.strictEqual(onFulfilledCalled, false);\n    done();\n});\nd.resolve(dummy);\nsetTimeout(function () {\n    d.reject(dummy);\n}, 50);\nsetTimeout(done, 100);",
                "err": {},
                "isRoot": false,
                "uuid": "2c63988a-8d6f-4d54-a100-44497818c0a3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2d01af75-c2d1-465b-a4c4-4cb515e02ffe",
              "193f38d4-4b9c-4704-b0f4-103266cb36ef",
              "fb17c106-b3fb-46ff-adb6-54df99703e68",
              "2daf789b-8733-4334-9c66-aed21647c524",
              "7ff602e5-b465-4f2a-9181-c925adf31be8",
              "2c63988a-8d6f-4d54-a100-44497818c0a3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 608,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "c1c9baea-25a1-4781-a43b-b3d63a563e99",
            "title": "2.1.3.1: When rejected, a promise: must not transition to any other state.",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "already-rejected",
                "fullTitle": "Promises/A+ Tests 2.1.3.1: When rejected, a promise: must not transition to any other state. already-rejected",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "test(rejected(reason), done);",
                "err": {},
                "isRoot": false,
                "uuid": "407ebaf6-7218-4cc3-9cb1-c786423e79b0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "immediately-rejected",
                "fullTitle": "Promises/A+ Tests 2.1.3.1: When rejected, a promise: must not transition to any other state. immediately-rejected",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                "err": {},
                "isRoot": false,
                "uuid": "5bb464f3-0767-4ffc-bdc5-fc5820a6c5d1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "eventually-rejected",
                "fullTitle": "Promises/A+ Tests 2.1.3.1: When rejected, a promise: must not transition to any other state. eventually-rejected",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                "err": {},
                "isRoot": false,
                "uuid": "bccb2302-950c-4091-a881-0813d233f09b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "trying to reject then immediately fulfill",
                "fullTitle": "Promises/A+ Tests 2.1.3.1: When rejected, a promise: must not transition to any other state. trying to reject then immediately fulfill",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar onRejectedCalled = false;\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(onRejectedCalled, false);\n    done();\n}, function onRejected() {\n    onRejectedCalled = true;\n});\nd.reject(dummy);\nd.resolve(dummy);\nsetTimeout(done, 100);",
                "err": {},
                "isRoot": false,
                "uuid": "7dfb5e47-9f02-4dbf-a823-75f2c44614b6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "trying to reject then fulfill, delayed",
                "fullTitle": "Promises/A+ Tests 2.1.3.1: When rejected, a promise: must not transition to any other state. trying to reject then fulfill, delayed",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar onRejectedCalled = false;\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(onRejectedCalled, false);\n    done();\n}, function onRejected() {\n    onRejectedCalled = true;\n});\nsetTimeout(function () {\n    d.reject(dummy);\n    d.resolve(dummy);\n}, 50);\nsetTimeout(done, 100);",
                "err": {},
                "isRoot": false,
                "uuid": "a84993bb-c651-4101-b6ea-4763f2a33a31",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "trying to reject immediately then fulfill delayed",
                "fullTitle": "Promises/A+ Tests 2.1.3.1: When rejected, a promise: must not transition to any other state. trying to reject immediately then fulfill delayed",
                "timedOut": false,
                "duration": 100,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar onRejectedCalled = false;\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(onRejectedCalled, false);\n    done();\n}, function onRejected() {\n    onRejectedCalled = true;\n});\nd.reject(dummy);\nsetTimeout(function () {\n    d.resolve(dummy);\n}, 50);\nsetTimeout(done, 100);",
                "err": {},
                "isRoot": false,
                "uuid": "79b2add8-c292-42d2-bab9-62c5fe4ff5a7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "407ebaf6-7218-4cc3-9cb1-c786423e79b0",
              "5bb464f3-0767-4ffc-bdc5-fc5820a6c5d1",
              "bccb2302-950c-4091-a881-0813d233f09b",
              "7dfb5e47-9f02-4dbf-a823-75f2c44614b6",
              "a84993bb-c651-4101-b6ea-4763f2a33a31",
              "79b2add8-c292-42d2-bab9-62c5fe4ff5a7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 605,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "418b0112-50bf-4b32-a210-0e60fc4dc99f",
            "title": "2.2.1: Both `onFulfilled` and `onRejected` are optional arguments.",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "8b6cfeb5-3297-4181-94ce-be371bbd5e2e",
                "title": "2.2.1.1: If `onFulfilled` is not a function, it must be ignored.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "afb5d1f5-d3ff-4eb7-9f61-a3ae90d6a257",
                    "title": "applied to a directly-rejected promise",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "`onFulfilled` is `undefined`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a directly-rejected promise `onFulfilled` is `undefined`",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rejected(dummy).then(nonFunction, function () {\n    done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9f50d99d-36bc-4636-9c1a-53dbbb963ce1",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is `null`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a directly-rejected promise `onFulfilled` is `null`",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rejected(dummy).then(nonFunction, function () {\n    done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "199bbb78-ac5d-47f9-aa42-e872fa3197fa",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is `false`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a directly-rejected promise `onFulfilled` is `false`",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rejected(dummy).then(nonFunction, function () {\n    done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "30270741-aeab-4338-9db1-97a620a3d479",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is `5`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a directly-rejected promise `onFulfilled` is `5`",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rejected(dummy).then(nonFunction, function () {\n    done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4ab47d2b-66bc-4128-8981-47ebc8523fa4",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is an object",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a directly-rejected promise `onFulfilled` is an object",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rejected(dummy).then(nonFunction, function () {\n    done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a2760445-b03b-437d-bdfa-c62e5fe6b8e2",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "9f50d99d-36bc-4636-9c1a-53dbbb963ce1",
                      "199bbb78-ac5d-47f9-aa42-e872fa3197fa",
                      "30270741-aeab-4338-9db1-97a620a3d479",
                      "4ab47d2b-66bc-4128-8981-47ebc8523fa4",
                      "a2760445-b03b-437d-bdfa-c62e5fe6b8e2"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 8,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "4d118ab8-5806-4886-a4bf-f52ca302d0db",
                    "title": "applied to a promise rejected and then chained off of",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "`onFulfilled` is `undefined`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a promise rejected and then chained off of `onFulfilled` is `undefined`",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rejected(dummy).then(function () { }, undefined).then(nonFunction, function () {\n    done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "dcca97f7-e3b6-42f0-8354-855e2c20d7fd",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is `null`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a promise rejected and then chained off of `onFulfilled` is `null`",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rejected(dummy).then(function () { }, undefined).then(nonFunction, function () {\n    done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3e08d484-a09b-4822-8900-a68fb9aabe73",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is `false`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a promise rejected and then chained off of `onFulfilled` is `false`",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rejected(dummy).then(function () { }, undefined).then(nonFunction, function () {\n    done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1bfad30f-6881-452c-847d-1a47b4b21733",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is `5`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a promise rejected and then chained off of `onFulfilled` is `5`",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rejected(dummy).then(function () { }, undefined).then(nonFunction, function () {\n    done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ddb2776a-d754-4777-bb69-6ac3dc6075bd",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is an object",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a promise rejected and then chained off of `onFulfilled` is an object",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "rejected(dummy).then(function () { }, undefined).then(nonFunction, function () {\n    done();\n});",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c20d2e78-4435-4a91-b28b-bdbca40db65e",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "dcca97f7-e3b6-42f0-8354-855e2c20d7fd",
                      "3e08d484-a09b-4822-8900-a68fb9aabe73",
                      "1bfad30f-6881-452c-847d-1a47b4b21733",
                      "ddb2776a-d754-4777-bb69-6ac3dc6075bd",
                      "c20d2e78-4435-4a91-b28b-bdbca40db65e"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 31,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "052c62ab-7516-4fa1-baef-d2249bec79a3",
                "title": "2.2.1.2: If `onRejected` is not a function, it must be ignored.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "5024aa29-eb91-46c6-9f47-2787b850c461",
                    "title": "applied to a directly-fulfilled promise",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "`onRejected` is `undefined`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a directly-fulfilled promise `onRejected` is `undefined`",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "resolved(dummy).then(function () {\n    done();\n}, nonFunction);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1dc520b0-9913-4aa6-b4cd-499a5a543d0f",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onRejected` is `null`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a directly-fulfilled promise `onRejected` is `null`",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "resolved(dummy).then(function () {\n    done();\n}, nonFunction);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1c11b67f-bbe1-4b91-af05-28b369761023",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onRejected` is `false`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a directly-fulfilled promise `onRejected` is `false`",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "resolved(dummy).then(function () {\n    done();\n}, nonFunction);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "72a5a1ff-1f26-4c4e-9f9a-d30d385bbad9",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onRejected` is `5`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a directly-fulfilled promise `onRejected` is `5`",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "resolved(dummy).then(function () {\n    done();\n}, nonFunction);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1c8c03e8-31ec-4734-bbe9-67ffc3ac6d9a",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onRejected` is an object",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a directly-fulfilled promise `onRejected` is an object",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "resolved(dummy).then(function () {\n    done();\n}, nonFunction);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2b30b446-552c-46b8-891c-a701a3cd519f",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "1dc520b0-9913-4aa6-b4cd-499a5a543d0f",
                      "1c11b67f-bbe1-4b91-af05-28b369761023",
                      "72a5a1ff-1f26-4c4e-9f9a-d30d385bbad9",
                      "1c8c03e8-31ec-4734-bbe9-67ffc3ac6d9a",
                      "2b30b446-552c-46b8-891c-a701a3cd519f"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 12,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "ad5142f2-6a4b-46f1-9131-e28d02c17967",
                    "title": "applied to a promise fulfilled and then chained off of",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "`onFulfilled` is `undefined`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a promise fulfilled and then chained off of `onFulfilled` is `undefined`",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "resolved(dummy).then(undefined, function () { }).then(function () {\n    done();\n}, nonFunction);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0a19984d-9472-45b1-8e17-35e5ecb43a64",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is `null`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a promise fulfilled and then chained off of `onFulfilled` is `null`",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "resolved(dummy).then(undefined, function () { }).then(function () {\n    done();\n}, nonFunction);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b4457c32-57b4-40cb-8662-803b97993f6a",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is `false`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a promise fulfilled and then chained off of `onFulfilled` is `false`",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "resolved(dummy).then(undefined, function () { }).then(function () {\n    done();\n}, nonFunction);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7e40dd7e-0ebb-4fb0-b883-6d99c2db34e1",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is `5`",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a promise fulfilled and then chained off of `onFulfilled` is `5`",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "resolved(dummy).then(undefined, function () { }).then(function () {\n    done();\n}, nonFunction);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "83e9bede-9b98-4644-a775-d4d5bfeea978",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "`onFulfilled` is an object",
                        "fullTitle": "Promises/A+ Tests 2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a promise fulfilled and then chained off of `onFulfilled` is an object",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "resolved(dummy).then(undefined, function () { }).then(function () {\n    done();\n}, nonFunction);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8b01a261-860b-4a14-91e0-4daae1583058",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "0a19984d-9472-45b1-8e17-35e5ecb43a64",
                      "b4457c32-57b4-40cb-8662-803b97993f6a",
                      "7e40dd7e-0ebb-4fb0-b883-6d99c2db34e1",
                      "83e9bede-9b98-4644-a775-d4d5bfeea978",
                      "8b01a261-860b-4a14-91e0-4daae1583058"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 28,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "e5858885-2ea4-4954-8d4b-6d44a3a33fe4",
            "title": "2.2.2: If `onFulfilled` is a function,",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "0adbb46c-e73c-43dc-8514-84a4ac0a7552",
                "title": "2.2.2.1: it must be called after `promise` is fulfilled, with `promise`’s fulfillment value as its first argument.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.1: it must be called after `promise` is fulfilled, with `promise`’s fulfillment value as its first argument. already-fulfilled",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5b88f3d8-d407-4329-970f-ac007d08b850",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.1: it must be called after `promise` is fulfilled, with `promise`’s fulfillment value as its first argument. immediately-fulfilled",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d593db8c-247a-470e-aa34-8b27c0d3c837",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.1: it must be called after `promise` is fulfilled, with `promise`’s fulfillment value as its first argument. eventually-fulfilled",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cf3fca10-4ac6-4512-ae5a-c2617e07c255",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "5b88f3d8-d407-4329-970f-ac007d08b850",
                  "d593db8c-247a-470e-aa34-8b27c0d3c837",
                  "cf3fca10-4ac6-4512-ae5a-c2617e07c255"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 59,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "7b80f25c-5ee0-4103-8803-fe879d41f277",
                "title": "2.2.2.2: it must not be called before `promise` is fulfilled",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "fulfilled after a delay",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.2: it must not be called before `promise` is fulfilled fulfilled after a delay",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar isFulfilled = false;\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(isFulfilled, true);\n    done();\n});\nsetTimeout(function () {\n    d.resolve(dummy);\n    isFulfilled = true;\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "09e8d902-e753-421e-bbcf-4c06ae35380a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "never fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.2: it must not be called before `promise` is fulfilled never fulfilled",
                    "timedOut": false,
                    "duration": 152,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar onFulfilledCalled = false;\nd.promise.then(function onFulfilled() {\n    onFulfilledCalled = true;\n    done();\n});\nsetTimeout(function () {\n    assert.strictEqual(onFulfilledCalled, false);\n    done();\n}, 150);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3864b773-7b52-4da9-90ae-9aa6ab894754",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "09e8d902-e753-421e-bbcf-4c06ae35380a",
                  "3864b773-7b52-4da9-90ae-9aa6ab894754"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 206,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "168ec644-a71c-47d7-954b-6abd63c0c01b",
                "title": "2.2.2.3: it must not be called more than once.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.3: it must not be called more than once. already-fulfilled",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var timesCalled = 0;\nresolved(dummy).then(function onFulfilled() {\n    assert.strictEqual(++timesCalled, 1);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6cd54c2c-500b-48d0-9ea9-9c95b22f6a86",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "trying to fulfill a pending promise more than once, immediately",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.3: it must not be called more than once. trying to fulfill a pending promise more than once, immediately",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar timesCalled = 0;\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(++timesCalled, 1);\n    done();\n});\nd.resolve(dummy);\nd.resolve(dummy);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b2f825c5-829f-4951-9a64-7296d69c7cb1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "trying to fulfill a pending promise more than once, delayed",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.3: it must not be called more than once. trying to fulfill a pending promise more than once, delayed",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar timesCalled = 0;\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(++timesCalled, 1);\n    done();\n});\nsetTimeout(function () {\n    d.resolve(dummy);\n    d.resolve(dummy);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b6a3ed52-e15c-4eba-9b81-0b752779f40b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "trying to fulfill a pending promise more than once, immediately then delayed",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.3: it must not be called more than once. trying to fulfill a pending promise more than once, immediately then delayed",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar timesCalled = 0;\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(++timesCalled, 1);\n    done();\n});\nd.resolve(dummy);\nsetTimeout(function () {\n    d.resolve(dummy);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e16aa721-7474-4823-baff-6b0ec3be4463",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when multiple `then` calls are made, spaced apart in time",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.3: it must not be called more than once. when multiple `then` calls are made, spaced apart in time",
                    "timedOut": false,
                    "duration": 156,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar timesCalled = [0, 0, 0];\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(++timesCalled[0], 1);\n});\nsetTimeout(function () {\n    d.promise.then(function onFulfilled() {\n        assert.strictEqual(++timesCalled[1], 1);\n    });\n}, 50);\nsetTimeout(function () {\n    d.promise.then(function onFulfilled() {\n        assert.strictEqual(++timesCalled[2], 1);\n        done();\n    });\n}, 100);\nsetTimeout(function () {\n    d.resolve(dummy);\n}, 150);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cb82251d-205b-488b-ad2d-0f0c3e9593b2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when `then` is interleaved with fulfillment",
                    "fullTitle": "Promises/A+ Tests 2.2.2: If `onFulfilled` is a function, 2.2.2.3: it must not be called more than once. when `then` is interleaved with fulfillment",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar timesCalled = [0, 0];\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(++timesCalled[0], 1);\n});\nd.resolve(dummy);\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(++timesCalled[1], 1);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e2459425-5aec-4f7b-be82-cecad3663d0d",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "6cd54c2c-500b-48d0-9ea9-9c95b22f6a86",
                  "b2f825c5-829f-4951-9a64-7296d69c7cb1",
                  "b6a3ed52-e15c-4eba-9b81-0b752779f40b",
                  "e16aa721-7474-4823-baff-6b0ec3be4463",
                  "cb82251d-205b-488b-ad2d-0f0c3e9593b2",
                  "e2459425-5aec-4f7b-be82-cecad3663d0d"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 220,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "144ec55f-47a1-4057-b221-6e9a67c1f265",
            "title": "2.2.3: If `onRejected` is a function,",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "fcbfb3db-3fcb-4c96-8266-d0d0d8a73538",
                "title": "2.2.3.1: it must be called after `promise` is rejected, with `promise`’s rejection reason as its first argument.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.1: it must be called after `promise` is rejected, with `promise`’s rejection reason as its first argument. already-rejected",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9b732b94-b8e8-4365-ae52-c8b1267c5a29",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.1: it must be called after `promise` is rejected, with `promise`’s rejection reason as its first argument. immediately-rejected",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "93720487-cfed-41b7-9a10-7a28cbf02f2c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.1: it must be called after `promise` is rejected, with `promise`’s rejection reason as its first argument. eventually-rejected",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d8309771-7f7b-4b03-9aa2-f37c4008ab9f",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "9b732b94-b8e8-4365-ae52-c8b1267c5a29",
                  "93720487-cfed-41b7-9a10-7a28cbf02f2c",
                  "d8309771-7f7b-4b03-9aa2-f37c4008ab9f"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 60,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "0433a2ed-a6d0-491a-b1fc-11fdc99f7558",
                "title": "2.2.3.2: it must not be called before `promise` is rejected",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "rejected after a delay",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.2: it must not be called before `promise` is rejected rejected after a delay",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar isRejected = false;\nd.promise.then(null, function onRejected() {\n    assert.strictEqual(isRejected, true);\n    done();\n});\nsetTimeout(function () {\n    d.reject(dummy);\n    isRejected = true;\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a2c3cbba-99cb-4bb6-9cb6-e55706ecb9b7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "never rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.2: it must not be called before `promise` is rejected never rejected",
                    "timedOut": false,
                    "duration": 152,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar onRejectedCalled = false;\nd.promise.then(null, function onRejected() {\n    onRejectedCalled = true;\n    done();\n});\nsetTimeout(function () {\n    assert.strictEqual(onRejectedCalled, false);\n    done();\n}, 150);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ae314c14-0944-4bef-b056-b05bc0bd86f2",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "a2c3cbba-99cb-4bb6-9cb6-e55706ecb9b7",
                  "ae314c14-0944-4bef-b056-b05bc0bd86f2"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 207,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "5f40e6b6-8b33-49fd-82d6-03e8ebc0d245",
                "title": "2.2.3.3: it must not be called more than once.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.3: it must not be called more than once. already-rejected",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var timesCalled = 0;\nrejected(dummy).then(null, function onRejected() {\n    assert.strictEqual(++timesCalled, 1);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0ddd914f-164c-4a69-acca-b9b378b4b3e2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "trying to reject a pending promise more than once, immediately",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.3: it must not be called more than once. trying to reject a pending promise more than once, immediately",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar timesCalled = 0;\nd.promise.then(null, function onRejected() {\n    assert.strictEqual(++timesCalled, 1);\n    done();\n});\nd.reject(dummy);\nd.reject(dummy);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "74064208-9786-4ed6-a7f8-b0782210ce17",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "trying to reject a pending promise more than once, delayed",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.3: it must not be called more than once. trying to reject a pending promise more than once, delayed",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar timesCalled = 0;\nd.promise.then(null, function onRejected() {\n    assert.strictEqual(++timesCalled, 1);\n    done();\n});\nsetTimeout(function () {\n    d.reject(dummy);\n    d.reject(dummy);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e410101b-22e5-4947-b5b1-b2aa07f51b4f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "trying to reject a pending promise more than once, immediately then delayed",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.3: it must not be called more than once. trying to reject a pending promise more than once, immediately then delayed",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar timesCalled = 0;\nd.promise.then(null, function onRejected() {\n    assert.strictEqual(++timesCalled, 1);\n    done();\n});\nd.reject(dummy);\nsetTimeout(function () {\n    d.reject(dummy);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ea489d42-ea4e-49a8-98f8-24b0f29eb29b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when multiple `then` calls are made, spaced apart in time",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.3: it must not be called more than once. when multiple `then` calls are made, spaced apart in time",
                    "timedOut": false,
                    "duration": 154,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar timesCalled = [0, 0, 0];\nd.promise.then(null, function onRejected() {\n    assert.strictEqual(++timesCalled[0], 1);\n});\nsetTimeout(function () {\n    d.promise.then(null, function onRejected() {\n        assert.strictEqual(++timesCalled[1], 1);\n    });\n}, 50);\nsetTimeout(function () {\n    d.promise.then(null, function onRejected() {\n        assert.strictEqual(++timesCalled[2], 1);\n        done();\n    });\n}, 100);\nsetTimeout(function () {\n    d.reject(dummy);\n}, 150);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fcb50081-b10e-4078-9fa5-c77cd6dfd93a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when `then` is interleaved with rejection",
                    "fullTitle": "Promises/A+ Tests 2.2.3: If `onRejected` is a function, 2.2.3.3: it must not be called more than once. when `then` is interleaved with rejection",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar timesCalled = [0, 0];\nd.promise.then(null, function onRejected() {\n    assert.strictEqual(++timesCalled[0], 1);\n});\nd.reject(dummy);\nd.promise.then(null, function onRejected() {\n    assert.strictEqual(++timesCalled[1], 1);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "171de637-aeef-4e37-87a0-11c363175ae4",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "0ddd914f-164c-4a69-acca-b9b378b4b3e2",
                  "74064208-9786-4ed6-a7f8-b0782210ce17",
                  "e410101b-22e5-4947-b5b1-b2aa07f51b4f",
                  "ea489d42-ea4e-49a8-98f8-24b0f29eb29b",
                  "fcb50081-b10e-4078-9fa5-c77cd6dfd93a",
                  "171de637-aeef-4e37-87a0-11c363175ae4"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 218,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "4344afb7-3280-470b-9123-c82dfa24bb2c",
            "title": "2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code.",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "dde6f024-e233-4d04-b669-63c4b5e0dadd",
                "title": "`then` returns before the promise becomes fulfilled or rejected",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. `then` returns before the promise becomes fulfilled or rejected already-fulfilled",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c38751eb-f4a0-4565-a6af-b6a92c95cf47",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. `then` returns before the promise becomes fulfilled or rejected immediately-fulfilled",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3616d506-ca78-44df-97d1-b51cf759b6f0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. `then` returns before the promise becomes fulfilled or rejected eventually-fulfilled",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5c4d08b3-41b1-4faf-b64d-b9f88fee4969",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. `then` returns before the promise becomes fulfilled or rejected already-rejected",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4b926074-50c4-4f3f-893f-5f125724d5df",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. `then` returns before the promise becomes fulfilled or rejected immediately-rejected",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "eb516858-24f6-4df4-86ed-7bd179af3dd2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. `then` returns before the promise becomes fulfilled or rejected eventually-rejected",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dffbc243-5a13-4b14-a2f5-f438051c288b",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "c38751eb-f4a0-4565-a6af-b6a92c95cf47",
                  "3616d506-ca78-44df-97d1-b51cf759b6f0",
                  "5c4d08b3-41b1-4faf-b64d-b9f88fee4969",
                  "4b926074-50c4-4f3f-893f-5f125724d5df",
                  "eb516858-24f6-4df4-86ed-7bd179af3dd2",
                  "dffbc243-5a13-4b14-a2f5-f438051c288b"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 124,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "6e4b2131-ebb3-48e9-9e16-5e48ad7561cc",
                "title": "Clean-stack execution ordering tests (fulfillment case)",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "when `onFulfilled` is added immediately before the promise is fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (fulfillment case) when `onFulfilled` is added immediately before the promise is fulfilled",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar onFulfilledCalled = false;\nd.promise.then(function onFulfilled() {\n    onFulfilledCalled = true;\n});\nd.resolve(dummy);\nassert.strictEqual(onFulfilledCalled, false);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0e84eee2-8dd2-4013-9597-40dea5f468b3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when `onFulfilled` is added immediately after the promise is fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (fulfillment case) when `onFulfilled` is added immediately after the promise is fulfilled",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar onFulfilledCalled = false;\nd.resolve(dummy);\nd.promise.then(function onFulfilled() {\n    onFulfilledCalled = true;\n});\nassert.strictEqual(onFulfilledCalled, false);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4f413607-0d65-49fd-8387-8349e1049ddf",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when one `onFulfilled` is added inside another `onFulfilled`",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (fulfillment case) when one `onFulfilled` is added inside another `onFulfilled`",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved();\nvar firstOnFulfilledFinished = false;\npromise.then(function () {\n    promise.then(function () {\n        assert.strictEqual(firstOnFulfilledFinished, true);\n        done();\n    });\n    firstOnFulfilledFinished = true;\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "425870f7-3ce4-4fe2-8f27-84d0bfba3a31",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when `onFulfilled` is added inside an `onRejected`",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (fulfillment case) when `onFulfilled` is added inside an `onRejected`",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected();\nvar promise2 = resolved();\nvar firstOnRejectedFinished = false;\npromise.then(null, function () {\n    promise2.then(function () {\n        assert.strictEqual(firstOnRejectedFinished, true);\n        done();\n    });\n    firstOnRejectedFinished = true;\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4fa79065-e1db-457f-b0ea-e57346f16c2a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when the promise is fulfilled asynchronously",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (fulfillment case) when the promise is fulfilled asynchronously",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar firstStackFinished = false;\nsetTimeout(function () {\n    d.resolve(dummy);\n    firstStackFinished = true;\n}, 0);\nd.promise.then(function () {\n    assert.strictEqual(firstStackFinished, true);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1be02727-d07b-48c7-a9ce-d7819e3e942a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "0e84eee2-8dd2-4013-9597-40dea5f468b3",
                  "4f413607-0d65-49fd-8387-8349e1049ddf",
                  "425870f7-3ce4-4fe2-8f27-84d0bfba3a31",
                  "4fa79065-e1db-457f-b0ea-e57346f16c2a",
                  "1be02727-d07b-48c7-a9ce-d7819e3e942a"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 13,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "ad9211b8-74eb-4845-bec3-1b39665d5c83",
                "title": "Clean-stack execution ordering tests (rejection case)",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "when `onRejected` is added immediately before the promise is rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (rejection case) when `onRejected` is added immediately before the promise is rejected",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar onRejectedCalled = false;\nd.promise.then(null, function onRejected() {\n    onRejectedCalled = true;\n});\nd.reject(dummy);\nassert.strictEqual(onRejectedCalled, false);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f227168c-106f-43b3-bc53-43aa1d644005",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when `onRejected` is added immediately after the promise is rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (rejection case) when `onRejected` is added immediately after the promise is rejected",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar onRejectedCalled = false;\nd.reject(dummy);\nd.promise.then(null, function onRejected() {\n    onRejectedCalled = true;\n});\nassert.strictEqual(onRejectedCalled, false);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ee4ed52d-2fa2-4935-b904-112fc87bc4d5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when `onRejected` is added inside an `onFulfilled`",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (rejection case) when `onRejected` is added inside an `onFulfilled`",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved();\nvar promise2 = rejected();\nvar firstOnFulfilledFinished = false;\npromise.then(function () {\n    promise2.then(null, function () {\n        assert.strictEqual(firstOnFulfilledFinished, true);\n        done();\n    });\n    firstOnFulfilledFinished = true;\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "387ca65a-67aa-480f-9310-ef76e71b2b7a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when one `onRejected` is added inside another `onRejected`",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (rejection case) when one `onRejected` is added inside another `onRejected`",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected();\nvar firstOnRejectedFinished = false;\npromise.then(null, function () {\n    promise.then(null, function () {\n        assert.strictEqual(firstOnRejectedFinished, true);\n        done();\n    });\n    firstOnRejectedFinished = true;\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "07e92ace-b30c-4752-8f17-1f6e5c852fdb",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "when the promise is rejected asynchronously",
                    "fullTitle": "Promises/A+ Tests 2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (rejection case) when the promise is rejected asynchronously",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\nvar firstStackFinished = false;\nsetTimeout(function () {\n    d.reject(dummy);\n    firstStackFinished = true;\n}, 0);\nd.promise.then(null, function () {\n    assert.strictEqual(firstStackFinished, true);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "df38d948-4056-48e6-9f8e-5beeaa2ec254",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "f227168c-106f-43b3-bc53-43aa1d644005",
                  "ee4ed52d-2fa2-4935-b904-112fc87bc4d5",
                  "387ca65a-67aa-480f-9310-ef76e71b2b7a",
                  "07e92ace-b30c-4752-8f17-1f6e5c852fdb",
                  "df38d948-4056-48e6-9f8e-5beeaa2ec254"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 12,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "572895de-c37d-4096-9b28-50fd6ac94d90",
            "title": "2.2.5 `onFulfilled` and `onRejected` must be called as functions (i.e. with no `this` value).",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "c0ea5079-8193-4f43-a824-e2be4213de55",
                "title": "strict mode",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.5 `onFulfilled` and `onRejected` must be called as functions (i.e. with no `this` value). strict mode fulfilled",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "resolved(dummy).then(function onFulfilled() {\n    \"use strict\";\n    assert.strictEqual(this, undefined);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3e0b9b61-581e-4d8f-96ea-f82c8b0db84b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.5 `onFulfilled` and `onRejected` must be called as functions (i.e. with no `this` value). strict mode rejected",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "rejected(dummy).then(null, function onRejected() {\n    \"use strict\";\n    assert.strictEqual(this, undefined);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e34952d5-8489-4bba-be54-7810c36ffde3",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "3e0b9b61-581e-4d8f-96ea-f82c8b0db84b",
                  "e34952d5-8489-4bba-be54-7810c36ffde3"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 4,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "45b5fdbe-1cc7-434f-9646-726c70b3168e",
                "title": "sloppy mode",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.2.5 `onFulfilled` and `onRejected` must be called as functions (i.e. with no `this` value). sloppy mode fulfilled",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "resolved(dummy).then(function onFulfilled() {\n    assert.strictEqual(this, global);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f303baba-a206-4894-a8ff-33fa39be3eea",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "rejected",
                    "fullTitle": "Promises/A+ Tests 2.2.5 `onFulfilled` and `onRejected` must be called as functions (i.e. with no `this` value). sloppy mode rejected",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "rejected(dummy).then(null, function onRejected() {\n    assert.strictEqual(this, global);\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3a8ba1cc-3f7e-4356-9fe3-c9193c35fed3",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "f303baba-a206-4894-a8ff-33fa39be3eea",
                  "3a8ba1cc-3f7e-4356-9fe3-c9193c35fed3"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 4,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "29690f1e-4e70-4344-a1b4-dc7c790ad2ed",
            "title": "2.2.6: `then` may be called multiple times on the same promise.",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "bb2d62d9-876b-4630-a0d8-d5b7a2ddb425",
                "title": "2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "d50e7eb7-c60a-4731-8c87-f8e2c398adee",
                    "title": "multiple boring fulfillment handlers",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. multiple boring fulfillment handlers already-fulfilled",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "30b6c2f1-9ab5-4e82-99c9-b2cfc0f92b0f",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. multiple boring fulfillment handlers immediately-fulfilled",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "70d734a8-b90e-43b6-8c5f-6e0e5c804558",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. multiple boring fulfillment handlers eventually-fulfilled",
                        "timedOut": false,
                        "duration": 55,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "73ba9f44-c525-45cb-a910-aefab867417c",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "30b6c2f1-9ab5-4e82-99c9-b2cfc0f92b0f",
                      "70d734a8-b90e-43b6-8c5f-6e0e5c804558",
                      "73ba9f44-c525-45cb-a910-aefab867417c"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 63,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "f665d388-8c8c-409e-9438-76788ba20e4b",
                    "title": "multiple fulfillment handlers, one of which throws",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. multiple fulfillment handlers, one of which throws already-fulfilled",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "98194933-4766-4f8f-8777-54767de3b64b",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. multiple fulfillment handlers, one of which throws immediately-fulfilled",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b6ecc284-af7a-43d0-a9fd-58fc9b99daf7",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. multiple fulfillment handlers, one of which throws eventually-fulfilled",
                        "timedOut": false,
                        "duration": 55,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b965945e-4cd7-48e4-b296-2f1eb294f248",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "98194933-4766-4f8f-8777-54767de3b64b",
                      "b6ecc284-af7a-43d0-a9fd-58fc9b99daf7",
                      "b965945e-4cd7-48e4-b296-2f1eb294f248"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 65,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "5ee39b0b-3d26-4267-aace-927a3a45d4fc",
                    "title": "results in multiple branching chains with their own fulfillment values",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. results in multiple branching chains with their own fulfillment values already-fulfilled",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "607bb624-8299-40b3-b325-a360958f5d28",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. results in multiple branching chains with their own fulfillment values immediately-fulfilled",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5dce21b3-70c6-4dd3-a0d8-59604355e95b",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. results in multiple branching chains with their own fulfillment values eventually-fulfilled",
                        "timedOut": false,
                        "duration": 58,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "cc0022ae-cbb6-4f66-9146-59eaa82fd043",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "607bb624-8299-40b3-b325-a360958f5d28",
                      "5dce21b3-70c6-4dd3-a0d8-59604355e95b",
                      "cc0022ae-cbb6-4f66-9146-59eaa82fd043"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 69,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "5f660a18-a2fc-49ed-9612-dd09356aaa18",
                    "title": "`onFulfilled` handlers are called in the original order",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. `onFulfilled` handlers are called in the original order already-fulfilled",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b13b2d1b-0206-4189-9497-18ae878c953b",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. `onFulfilled` handlers are called in the original order immediately-fulfilled",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8aeb4e43-4b16-400f-b098-e11b91c1bcf9",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. `onFulfilled` handlers are called in the original order eventually-fulfilled",
                        "timedOut": false,
                        "duration": 55,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a4c6b8f3-cd99-419f-aa0a-b86e2b42c13d",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [
                      {
                        "uuid": "19f1519f-b3a1-4e72-bd10-75b160722cc1",
                        "title": "even when one handler is added inside another handler",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "already-fulfilled",
                            "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. `onFulfilled` handlers are called in the original order even when one handler is added inside another handler already-fulfilled",
                            "timedOut": false,
                            "duration": 20,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "test(resolved(value), done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "652cdf0e-6306-409d-ab74-a5cfd2539fb9",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "immediately-fulfilled",
                            "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. `onFulfilled` handlers are called in the original order even when one handler is added inside another handler immediately-fulfilled",
                            "timedOut": false,
                            "duration": 20,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "0b696364-1ba3-4b73-bd17-c1214963d0aa",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "eventually-fulfilled",
                            "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. `onFulfilled` handlers are called in the original order even when one handler is added inside another handler eventually-fulfilled",
                            "timedOut": false,
                            "duration": 71,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "61444bf6-3141-437c-ac49-7bd0d6b9b33e",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "652cdf0e-6306-409d-ab74-a5cfd2539fb9",
                          "0b696364-1ba3-4b73-bd17-c1214963d0aa",
                          "61444bf6-3141-437c-ac49-7bd0d6b9b33e"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 111,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      }
                    ],
                    "passes": [
                      "b13b2d1b-0206-4189-9497-18ae878c953b",
                      "8aeb4e43-4b16-400f-b098-e11b91c1bcf9",
                      "a4c6b8f3-cd99-419f-aa0a-b86e2b42c13d"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 60,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "ac10972f-618d-4880-af56-c45f335a7de5",
                "title": "2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "e9f2f852-8591-4674-85a8-700668d4c2e2",
                    "title": "multiple boring rejection handlers",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. multiple boring rejection handlers already-rejected",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "13479e7c-943d-4479-8b49-074ef8076b23",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. multiple boring rejection handlers immediately-rejected",
                        "timedOut": false,
                        "duration": 22,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b32d1a87-e5e7-42ea-9cac-cfa0d247011b",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. multiple boring rejection handlers eventually-rejected",
                        "timedOut": false,
                        "duration": 54,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "49690df4-7780-49d9-b2c0-d9c88664b8b1",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "13479e7c-943d-4479-8b49-074ef8076b23",
                      "b32d1a87-e5e7-42ea-9cac-cfa0d247011b",
                      "49690df4-7780-49d9-b2c0-d9c88664b8b1"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 79,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "9c5b470f-1204-47a3-a180-3d4b4799764b",
                    "title": "multiple rejection handlers, one of which throws",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. multiple rejection handlers, one of which throws already-rejected",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0594cf3b-92e9-4bb4-a25c-972827803bc2",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. multiple rejection handlers, one of which throws immediately-rejected",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6fdee35f-fde0-4391-ad8e-0160128758a7",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. multiple rejection handlers, one of which throws eventually-rejected",
                        "timedOut": false,
                        "duration": 55,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6edcaf0e-2430-47a2-8e26-c316ddd20202",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "0594cf3b-92e9-4bb4-a25c-972827803bc2",
                      "6fdee35f-fde0-4391-ad8e-0160128758a7",
                      "6edcaf0e-2430-47a2-8e26-c316ddd20202"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 62,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "ce1a8fa6-f2f5-4761-ae65-38ba500554b2",
                    "title": "results in multiple branching chains with their own fulfillment values",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. results in multiple branching chains with their own fulfillment values already-rejected",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5ea0dc2d-f119-4f10-9762-745e38cf0deb",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. results in multiple branching chains with their own fulfillment values immediately-rejected",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3968c7bf-100f-41bf-8a59-246db99f0feb",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. results in multiple branching chains with their own fulfillment values eventually-rejected",
                        "timedOut": false,
                        "duration": 58,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8340a036-3429-4224-bdd7-94921536e1f0",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "5ea0dc2d-f119-4f10-9762-745e38cf0deb",
                      "3968c7bf-100f-41bf-8a59-246db99f0feb",
                      "8340a036-3429-4224-bdd7-94921536e1f0"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 70,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "90907752-5afd-4d47-8d55-a05c99c0755d",
                    "title": "`onRejected` handlers are called in the original order",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. `onRejected` handlers are called in the original order already-rejected",
                        "timedOut": false,
                        "duration": 1,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6ea93142-407e-49af-95c2-1dd1e48f9a04",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. `onRejected` handlers are called in the original order immediately-rejected",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5b258bf6-4353-436c-9862-bb7c542df9ea",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. `onRejected` handlers are called in the original order eventually-rejected",
                        "timedOut": false,
                        "duration": 55,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "840149b0-0571-425f-ac3a-91af2c9b4bd5",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [
                      {
                        "uuid": "a3a73099-e709-4597-8252-7b6998ed0b33",
                        "title": "even when one handler is added inside another handler",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "already-rejected",
                            "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. `onRejected` handlers are called in the original order even when one handler is added inside another handler already-rejected",
                            "timedOut": false,
                            "duration": 17,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "test(rejected(reason), done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "d1754171-db25-4e03-97a2-f164934e1c80",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "immediately-rejected",
                            "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. `onRejected` handlers are called in the original order even when one handler is added inside another handler immediately-rejected",
                            "timedOut": false,
                            "duration": 19,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "f2e00e02-6ef3-43bb-941c-58b167298837",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "eventually-rejected",
                            "fullTitle": "Promises/A+ Tests 2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. `onRejected` handlers are called in the original order even when one handler is added inside another handler eventually-rejected",
                            "timedOut": false,
                            "duration": 70,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "4efbc730-fa1d-479b-b788-f15e5a4e62e3",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "d1754171-db25-4e03-97a2-f164934e1c80",
                          "f2e00e02-6ef3-43bb-941c-58b167298837",
                          "4efbc730-fa1d-479b-b788-f15e5a4e62e3"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 106,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      }
                    ],
                    "passes": [
                      "6ea93142-407e-49af-95c2-1dd1e48f9a04",
                      "5b258bf6-4353-436c-9862-bb7c542df9ea",
                      "840149b0-0571-425f-ac3a-91af2c9b4bd5"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 60,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "f7382c8b-e078-4f61-b2f3-386eb7f357d2",
            "title": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)`",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "is a promise",
                "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` is a promise",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var promise1 = deferred().promise;\nvar promise2 = promise1.then();\nassert(typeof promise2 === \"object\" || typeof promise2 === \"function\");\nassert.notStrictEqual(promise2, null);\nassert.strictEqual(typeof promise2.then, \"function\");",
                "err": {},
                "isRoot": false,
                "uuid": "e71cf068-9796-451a-a315-acbcd7e72917",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [
              {
                "uuid": "1e85d063-e4b7-4fdb-a61c-a02fade8faac",
                "title": "2.2.7.1: If either `onFulfilled` or `onRejected` returns a value `x`, run the Promise Resolution Procedure `[[Resolve]](promise2, x)`",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "see separate 3.3 tests",
                    "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.1: If either `onFulfilled` or `onRejected` returns a value `x`, run the Promise Resolution Procedure `[[Resolve]](promise2, x)` see separate 3.3 tests",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "",
                    "err": {},
                    "isRoot": false,
                    "uuid": "72c72573-de61-439e-bd7f-3ad218cf3fca",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "72c72573-de61-439e-bd7f-3ad218cf3fca"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "441f41f1-1058-49f8-bf33-40993e3b5bd0",
                "title": "2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "ba4c745e-9628-45be-995b-15fd8ed1c234",
                    "title": "The reason is `undefined`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `undefined` already-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d5f80c73-f867-4db3-83d9-9d6befd32c65",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `undefined` immediately-fulfilled",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "849999e4-af20-47f2-9437-64b88696f4c1",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `undefined` eventually-fulfilled",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "87555d90-a3ae-408a-9905-ac759c7a37fd",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `undefined` already-rejected",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d3da153d-3f7f-48b4-ad83-4dd830acc094",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `undefined` immediately-rejected",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "af11bb65-f63b-40f0-a9b5-4d89722c5de5",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `undefined` eventually-rejected",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8c7fe8a9-ebbf-48c4-af15-543a0216e0a0",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "d5f80c73-f867-4db3-83d9-9d6befd32c65",
                      "849999e4-af20-47f2-9437-64b88696f4c1",
                      "87555d90-a3ae-408a-9905-ac759c7a37fd",
                      "d3da153d-3f7f-48b4-ad83-4dd830acc094",
                      "af11bb65-f63b-40f0-a9b5-4d89722c5de5",
                      "8c7fe8a9-ebbf-48c4-af15-543a0216e0a0"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 144,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "b05786c4-a2ec-43e7-9b31-84f920618e9b",
                    "title": "The reason is `null`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `null` already-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "13cccbb1-5bb1-4f7c-9d8b-1f54fa20c47f",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `null` immediately-fulfilled",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b8301f36-0302-4414-af87-5cccf78f2add",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `null` eventually-fulfilled",
                        "timedOut": false,
                        "duration": 57,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c36cb627-205e-48b6-926f-8efb0c19c742",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `null` already-rejected",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3abbb625-a6ce-4f0e-a944-e4e204bbf407",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `null` immediately-rejected",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "654a33b4-ece3-4a1b-9646-4291b89bec14",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `null` eventually-rejected",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "37bccc97-c60b-4e4f-9a76-6d768bcb88d0",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "13cccbb1-5bb1-4f7c-9d8b-1f54fa20c47f",
                      "b8301f36-0302-4414-af87-5cccf78f2add",
                      "c36cb627-205e-48b6-926f-8efb0c19c742",
                      "3abbb625-a6ce-4f0e-a944-e4e204bbf407",
                      "654a33b4-ece3-4a1b-9646-4291b89bec14",
                      "37bccc97-c60b-4e4f-9a76-6d768bcb88d0"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 137,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "64ab856a-3ab3-4704-8d65-5c9bc4831050",
                    "title": "The reason is `false`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `false` already-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0db39d3c-b805-4728-8e14-56a2ad56ce3d",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `false` immediately-fulfilled",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4f2f3080-bbd1-4f2c-9c12-542d10a5df66",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `false` eventually-fulfilled",
                        "timedOut": false,
                        "duration": 60,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e5962add-6e77-4fc5-814c-0833ab9b711e",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `false` already-rejected",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ed708d6d-c650-4711-a7f8-4aeccab214ad",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `false` immediately-rejected",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "641633b7-1c6a-4b6a-926d-da249242e547",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `false` eventually-rejected",
                        "timedOut": false,
                        "duration": 57,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "95e1b170-57b4-479f-b897-b301579f02cf",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "0db39d3c-b805-4728-8e14-56a2ad56ce3d",
                      "4f2f3080-bbd1-4f2c-9c12-542d10a5df66",
                      "e5962add-6e77-4fc5-814c-0833ab9b711e",
                      "ed708d6d-c650-4711-a7f8-4aeccab214ad",
                      "641633b7-1c6a-4b6a-926d-da249242e547",
                      "95e1b170-57b4-479f-b897-b301579f02cf"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 142,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "7b0d9bfd-4809-47c7-a260-1c25e3434576",
                    "title": "The reason is `0`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `0` already-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f684c026-4abe-4b0c-a629-1fe782aecba7",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `0` immediately-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "aa128cac-0d12-4171-9243-367db871864c",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `0` eventually-fulfilled",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4a9e32d9-5fb5-4c06-9f1f-2363b1c1707a",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `0` already-rejected",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "fee0c7ea-3b51-4164-853f-28ccb19ab108",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `0` immediately-rejected",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "194fe0fb-d32e-4c22-a5dc-1988641634ed",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `0` eventually-rejected",
                        "timedOut": false,
                        "duration": 56,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "302b4113-7291-4109-add1-8f50be6e810c",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "f684c026-4abe-4b0c-a629-1fe782aecba7",
                      "aa128cac-0d12-4171-9243-367db871864c",
                      "4a9e32d9-5fb5-4c06-9f1f-2363b1c1707a",
                      "fee0c7ea-3b51-4164-853f-28ccb19ab108",
                      "194fe0fb-d32e-4c22-a5dc-1988641634ed",
                      "302b4113-7291-4109-add1-8f50be6e810c"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 138,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "23eb65f7-8c56-48b1-8d28-81027b98543b",
                    "title": "The reason is an error",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error already-fulfilled",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "80aa333d-5ff3-4669-80ed-62b040b45acc",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error immediately-fulfilled",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ff54860c-8a9b-4381-8ec6-4cff185bf55c",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error eventually-fulfilled",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d8f56ef2-de74-43ea-8df7-9cb5e9376263",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error already-rejected",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9108242d-1596-4b79-9dd7-1174d3279a05",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error immediately-rejected",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "611765d0-abdd-46e6-9a50-ce44d5c5465f",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error eventually-rejected",
                        "timedOut": false,
                        "duration": 57,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3ac63ffc-e914-4494-9293-59ce6dc5be46",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "80aa333d-5ff3-4669-80ed-62b040b45acc",
                      "ff54860c-8a9b-4381-8ec6-4cff185bf55c",
                      "d8f56ef2-de74-43ea-8df7-9cb5e9376263",
                      "9108242d-1596-4b79-9dd7-1174d3279a05",
                      "611765d0-abdd-46e6-9a50-ce44d5c5465f",
                      "3ac63ffc-e914-4494-9293-59ce6dc5be46"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 138,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "64fc78e8-6f67-42cd-bc80-fd9a95ac8fa1",
                    "title": "The reason is an error without a stack",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error without a stack already-fulfilled",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ae8ba8eb-bb81-47e6-980e-d6b77a941810",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error without a stack immediately-fulfilled",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7125a95c-c0b6-4bb3-bbb0-7c5cb18d940e",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error without a stack eventually-fulfilled",
                        "timedOut": false,
                        "duration": 56,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "dc0d3bbb-73e5-4f3e-a20c-d24be4128b4f",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error without a stack already-rejected",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3b37a3c1-40c2-4578-8398-ace96c3cf7c7",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error without a stack immediately-rejected",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "cb612b0e-b24d-4cfa-9e3a-0db475995bd0",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error without a stack eventually-rejected",
                        "timedOut": false,
                        "duration": 58,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "212822c1-55dd-42fc-90f0-27badfa7fdf2",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "ae8ba8eb-bb81-47e6-980e-d6b77a941810",
                      "7125a95c-c0b6-4bb3-bbb0-7c5cb18d940e",
                      "dc0d3bbb-73e5-4f3e-a20c-d24be4128b4f",
                      "3b37a3c1-40c2-4578-8398-ace96c3cf7c7",
                      "cb612b0e-b24d-4cfa-9e3a-0db475995bd0",
                      "212822c1-55dd-42fc-90f0-27badfa7fdf2"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 135,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "9fac1aaa-d8b8-43bb-9a03-699e067de8b1",
                    "title": "The reason is a date",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a date already-fulfilled",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c5411039-fbcb-42e1-8521-cf683073a3f1",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a date immediately-fulfilled",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a9fa14cb-da0a-4c61-af2e-ed2745bc6311",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a date eventually-fulfilled",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0568214e-0c03-46c3-ba42-0df470f89205",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a date already-rejected",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "fa70ba23-2b28-4e62-b047-c6b43b41a8b7",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a date immediately-rejected",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7d034a9b-a9a0-45c9-9706-28315ecfe6af",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a date eventually-rejected",
                        "timedOut": false,
                        "duration": 58,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1441abfc-b03a-45b9-b783-83be6b99bb32",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "c5411039-fbcb-42e1-8521-cf683073a3f1",
                      "a9fa14cb-da0a-4c61-af2e-ed2745bc6311",
                      "0568214e-0c03-46c3-ba42-0df470f89205",
                      "fa70ba23-2b28-4e62-b047-c6b43b41a8b7",
                      "7d034a9b-a9a0-45c9-9706-28315ecfe6af",
                      "1441abfc-b03a-45b9-b783-83be6b99bb32"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 140,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "25c92b16-9604-4455-b213-0a55e0e48bdf",
                    "title": "The reason is an object",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an object already-fulfilled",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "135fc13c-33fe-477b-8983-74eeacdf5973",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an object immediately-fulfilled",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "132a83c9-f10b-45de-bef3-1527a584748f",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an object eventually-fulfilled",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4bb69f81-fc3b-46d2-a306-df7e3685c567",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an object already-rejected",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ef3b08f7-9666-4039-b6a5-2e2367f05376",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an object immediately-rejected",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "53cd3fa4-efb2-4dbf-b84b-3100c87e9566",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an object eventually-rejected",
                        "timedOut": false,
                        "duration": 60,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "188e8f07-9e25-44b4-97a7-078d9b6880af",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "135fc13c-33fe-477b-8983-74eeacdf5973",
                      "132a83c9-f10b-45de-bef3-1527a584748f",
                      "4bb69f81-fc3b-46d2-a306-df7e3685c567",
                      "ef3b08f7-9666-4039-b6a5-2e2367f05376",
                      "53cd3fa4-efb2-4dbf-b84b-3100c87e9566",
                      "188e8f07-9e25-44b4-97a7-078d9b6880af"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 143,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "cb087890-e8e0-4419-b9df-e2d43efd1ca0",
                    "title": "The reason is an always-pending thenable",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an always-pending thenable already-fulfilled",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9f370071-acbf-41a3-9271-45053df3b731",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an always-pending thenable immediately-fulfilled",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1d4185d6-6f65-4047-bd31-4460a7e39463",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an always-pending thenable eventually-fulfilled",
                        "timedOut": false,
                        "duration": 54,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f6754760-11f5-48b9-aaa2-a3a34a2b1bf0",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an always-pending thenable already-rejected",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "909a3b90-b05b-433d-b287-9f243e95dca0",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an always-pending thenable immediately-rejected",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "96584ced-4007-4e16-a5ec-625148ea877b",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an always-pending thenable eventually-rejected",
                        "timedOut": false,
                        "duration": 58,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "657bf205-4336-4808-8cdd-44a3c691be2b",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "9f370071-acbf-41a3-9271-45053df3b731",
                      "1d4185d6-6f65-4047-bd31-4460a7e39463",
                      "f6754760-11f5-48b9-aaa2-a3a34a2b1bf0",
                      "909a3b90-b05b-433d-b287-9f243e95dca0",
                      "96584ced-4007-4e16-a5ec-625148ea877b",
                      "657bf205-4336-4808-8cdd-44a3c691be2b"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 134,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "0ee36d96-bc8c-42b9-a14b-cfef5d8d089b",
                    "title": "The reason is a fulfilled promise",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a fulfilled promise already-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e8f52b53-c5d5-437c-bad1-edc13a3e7364",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a fulfilled promise immediately-fulfilled",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "083651e6-f796-4465-84ac-43a4c334c5d1",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a fulfilled promise eventually-fulfilled",
                        "timedOut": false,
                        "duration": 56,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a02a0a1d-16d2-4252-b4dd-bead4e9cb508",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a fulfilled promise already-rejected",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9ce91cd6-ed10-4809-a355-840458b2611e",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a fulfilled promise immediately-rejected",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c946cbb6-91c4-429d-a296-47c0648c6640",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a fulfilled promise eventually-rejected",
                        "timedOut": false,
                        "duration": 56,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "823645a3-e60e-475b-a955-1d43fe5a9a17",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "e8f52b53-c5d5-437c-bad1-edc13a3e7364",
                      "083651e6-f796-4465-84ac-43a4c334c5d1",
                      "a02a0a1d-16d2-4252-b4dd-bead4e9cb508",
                      "9ce91cd6-ed10-4809-a355-840458b2611e",
                      "c946cbb6-91c4-429d-a296-47c0648c6640",
                      "823645a3-e60e-475b-a955-1d43fe5a9a17"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 134,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "43660a51-506e-4e1a-9d41-24220c12a792",
                    "title": "The reason is a rejected promise",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a rejected promise already-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1c660d48-0da0-4203-8ec4-5b05ed6904c6",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a rejected promise immediately-fulfilled",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4f0f6be0-9872-4eb1-b6a3-3e2b71149a73",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a rejected promise eventually-fulfilled",
                        "timedOut": false,
                        "duration": 58,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "cdcb8be5-fb31-4de3-90da-1d060a49e37a",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a rejected promise already-rejected",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9b48ea1c-598a-4bf4-af21-ed3bd9b6d114",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a rejected promise immediately-rejected",
                        "timedOut": false,
                        "duration": 9,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "74a000dc-77f8-4f8b-a6d7-c8224a6722d9",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a rejected promise eventually-rejected",
                        "timedOut": false,
                        "duration": 55,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6dc90ac9-e017-449b-bf44-2b55595688ef",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "1c660d48-0da0-4203-8ec4-5b05ed6904c6",
                      "4f0f6be0-9872-4eb1-b6a3-3e2b71149a73",
                      "cdcb8be5-fb31-4de3-90da-1d060a49e37a",
                      "9b48ea1c-598a-4bf4-af21-ed3bd9b6d114",
                      "74a000dc-77f8-4f8b-a6d7-c8224a6722d9",
                      "6dc90ac9-e017-449b-bf44-2b55595688ef"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 139,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "5c7fd8fb-49be-4ab3-82f5-9a7b6afb67b9",
                "title": "2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "760fa5ed-f067-433c-b1c3-83e9335277b0",
                    "title": "`onFulfilled` is `undefined`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `undefined` already-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b2bcface-0c1d-473d-ab9e-659a5d663ea0",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `undefined` immediately-fulfilled",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "976ad4d6-5093-4dd4-8874-9b2d76d570c8",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `undefined` eventually-fulfilled",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "edece4ad-f0e2-4e24-8978-6f0bbf6cea0c",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "b2bcface-0c1d-473d-ab9e-659a5d663ea0",
                      "976ad4d6-5093-4dd4-8874-9b2d76d570c8",
                      "edece4ad-f0e2-4e24-8978-6f0bbf6cea0c"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 70,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "101089bb-ada0-4d72-bb12-5f327c69f91d",
                    "title": "`onFulfilled` is `null`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `null` already-fulfilled",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0346850f-e3ac-4480-8a7f-4550a0a73bef",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `null` immediately-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f6428edf-e339-484c-8782-2b3fc85ac675",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `null` eventually-fulfilled",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5b244284-0b79-483a-adf9-88c6c9fb4ee8",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "0346850f-e3ac-4480-8a7f-4550a0a73bef",
                      "f6428edf-e339-484c-8782-2b3fc85ac675",
                      "5b244284-0b79-483a-adf9-88c6c9fb4ee8"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 70,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "377b5f16-4252-4ec5-b8dc-d3bf369917ff",
                    "title": "`onFulfilled` is `false`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `false` already-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "dc727495-e8b0-419e-8fef-86445b31d4eb",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `false` immediately-fulfilled",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "dcfdeb8d-4232-46c0-b088-90e58eff1087",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `false` eventually-fulfilled",
                        "timedOut": false,
                        "duration": 56,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3c4b570f-86f3-4e33-ac7d-5a3eb89ae386",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "dc727495-e8b0-419e-8fef-86445b31d4eb",
                      "dcfdeb8d-4232-46c0-b088-90e58eff1087",
                      "3c4b570f-86f3-4e33-ac7d-5a3eb89ae386"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 68,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "f3dddacd-c837-45c2-8e21-892d53392982",
                    "title": "`onFulfilled` is `5`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `5` already-fulfilled",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6cb3f5bd-246e-4473-98bb-f44e7441e4c7",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `5` immediately-fulfilled",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "450fc3ce-d05a-4b38-bcae-838512000fb4",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `5` eventually-fulfilled",
                        "timedOut": false,
                        "duration": 55,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d83bafc9-2465-4cd5-8ee8-b416d4611223",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "6cb3f5bd-246e-4473-98bb-f44e7441e4c7",
                      "450fc3ce-d05a-4b38-bcae-838512000fb4",
                      "d83bafc9-2465-4cd5-8ee8-b416d4611223"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 67,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "04b1d576-42ba-4548-b174-5feaa7147c7b",
                    "title": "`onFulfilled` is an object",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is an object already-fulfilled",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4f513867-5a29-42d6-be68-fc8e990507e8",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is an object immediately-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d5c84b93-3cef-4a6d-a313-a5c0ef290bb2",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is an object eventually-fulfilled",
                        "timedOut": false,
                        "duration": 55,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "de73d4e2-7ec5-4d3b-a563-548717172b09",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "4f513867-5a29-42d6-be68-fc8e990507e8",
                      "d5c84b93-3cef-4a6d-a313-a5c0ef290bb2",
                      "de73d4e2-7ec5-4d3b-a563-548717172b09"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 64,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "879b86f5-4ef0-491d-a722-5892d35a2431",
                    "title": "`onFulfilled` is an array containing a function",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is an array containing a function already-fulfilled",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7f9b6b67-38e5-48c7-8958-31ccc9b782d3",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is an array containing a function immediately-fulfilled",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e9e052d9-d141-4774-821f-889ccc5680ad",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is an array containing a function eventually-fulfilled",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "cf368e4c-0788-4412-b5e7-ec48abbf86de",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "7f9b6b67-38e5-48c7-8958-31ccc9b782d3",
                      "e9e052d9-d141-4774-821f-889ccc5680ad",
                      "cf368e4c-0788-4412-b5e7-ec48abbf86de"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 72,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "9d2406ec-7add-4eb2-950b-640ae6e4aab4",
                "title": "2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "80763fe8-aef5-4341-8c29-c83b8d26a69e",
                    "title": "`onRejected` is `undefined`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `undefined` already-rejected",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "bf14d6c9-cbe1-4798-b674-f558fd3b1957",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `undefined` immediately-rejected",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0d31f429-610f-49d1-ab16-92060b9e8948",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `undefined` eventually-rejected",
                        "timedOut": false,
                        "duration": 56,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4a3a35ff-1dd1-4cff-9a71-2e832847e53e",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "bf14d6c9-cbe1-4798-b674-f558fd3b1957",
                      "0d31f429-610f-49d1-ab16-92060b9e8948",
                      "4a3a35ff-1dd1-4cff-9a71-2e832847e53e"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 69,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "547ca76d-d321-412d-9b68-e406cd29e7f7",
                    "title": "`onRejected` is `null`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `null` already-rejected",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5337e9c9-197e-4118-8ee7-5ac29ace72d7",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `null` immediately-rejected",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "fc35c406-1699-4d53-8ab2-a7e98270a0f2",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `null` eventually-rejected",
                        "timedOut": false,
                        "duration": 58,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e18c970c-6e1f-48b8-a897-b34d60ec1cee",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "5337e9c9-197e-4118-8ee7-5ac29ace72d7",
                      "fc35c406-1699-4d53-8ab2-a7e98270a0f2",
                      "e18c970c-6e1f-48b8-a897-b34d60ec1cee"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 69,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "358f882b-75ff-4707-9fcf-c049548f7190",
                    "title": "`onRejected` is `false`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `false` already-rejected",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e171bbd1-e0c9-4aec-8b04-4b3b524267bf",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `false` immediately-rejected",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "94ec3c2e-ba82-4561-929c-07c2300cf020",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `false` eventually-rejected",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c0adf324-dfc9-4a77-a67e-5d8defce7e4a",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "e171bbd1-e0c9-4aec-8b04-4b3b524267bf",
                      "94ec3c2e-ba82-4561-929c-07c2300cf020",
                      "c0adf324-dfc9-4a77-a67e-5d8defce7e4a"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 73,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "caaf479a-4076-4627-9d6f-f119cda04b00",
                    "title": "`onRejected` is `5`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `5` already-rejected",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4e5046d1-f1d5-4ac2-88e4-6c8b8102c287",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `5` immediately-rejected",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0689a780-521f-4846-a4d7-f8110963e2a9",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `5` eventually-rejected",
                        "timedOut": false,
                        "duration": 58,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "415cc04f-bbed-4144-8f35-04a8e9d42318",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "4e5046d1-f1d5-4ac2-88e4-6c8b8102c287",
                      "0689a780-521f-4846-a4d7-f8110963e2a9",
                      "415cc04f-bbed-4144-8f35-04a8e9d42318"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 70,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "8befe13f-9708-41cc-8285-f31cfb59f279",
                    "title": "`onRejected` is an object",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is an object already-rejected",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "cb6040ec-6cf8-4a59-8864-26976a33ce6a",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is an object immediately-rejected",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "bfcb8098-3fab-4dc0-a84c-3360cc7f8d61",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is an object eventually-rejected",
                        "timedOut": false,
                        "duration": 57,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "cafc954e-fce2-4e54-85aa-51fb16d27148",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "cb6040ec-6cf8-4a59-8864-26976a33ce6a",
                      "bfcb8098-3fab-4dc0-a84c-3360cc7f8d61",
                      "cafc954e-fce2-4e54-85aa-51fb16d27148"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 72,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "bd44ee4e-b630-4300-8181-53653a575374",
                    "title": "`onRejected` is an array containing a function",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is an array containing a function already-rejected",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9891db7c-221a-424e-b0c0-71a9bc14e6f6",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is an array containing a function immediately-rejected",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4e019dc5-14dd-42d6-86f9-fd2a69c71017",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "Promises/A+ Tests 2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is an array containing a function eventually-rejected",
                        "timedOut": false,
                        "duration": 57,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ac0e3b87-0d36-4828-8f2a-10190177d78d",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "9891db7c-221a-424e-b0c0-71a9bc14e6f6",
                      "4e019dc5-14dd-42d6-86f9-fd2a69c71017",
                      "ac0e3b87-0d36-4828-8f2a-10190177d78d"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 66,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [
              "e71cf068-9796-451a-a315-acbcd7e72917"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "c28c97b1-b32c-48a0-8f5e-c5ed43ce6b7c",
            "title": "2.3.1: If `promise` and `x` refer to the same object, reject `promise` with a `TypeError' as the reason.",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "via return from a fulfilled promise",
                "fullTitle": "Promises/A+ Tests 2.3.1: If `promise` and `x` refer to the same object, reject `promise` with a `TypeError' as the reason. via return from a fulfilled promise",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var promise = resolved(dummy).then(function () {\n    return promise;\n});\npromise.then(null, function (reason) {\n    assert(reason instanceof TypeError);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c133d039-e5ed-4840-9249-04af11e5d128",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "via return from a rejected promise",
                "fullTitle": "Promises/A+ Tests 2.3.1: If `promise` and `x` refer to the same object, reject `promise` with a `TypeError' as the reason. via return from a rejected promise",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var promise = rejected(dummy).then(null, function () {\n    return promise;\n});\npromise.then(null, function (reason) {\n    assert(reason instanceof TypeError);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a59a9698-dcf4-4a0a-9ea1-79395ac71b3a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c133d039-e5ed-4840-9249-04af11e5d128",
              "a59a9698-dcf4-4a0a-9ea1-79395ac71b3a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 9,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "61f1de11-5ed6-4879-ba03-546ad43a5759",
            "title": "2.3.2: If `x` is a promise, adopt its state",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "1cc45c56-94e8-410f-b833-dfec23e6ae76",
                "title": "2.3.2.1: If `x` is pending, `promise` must remain pending until `x` is fulfilled or rejected.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "via return from a fulfilled promise",
                    "fullTitle": "Promises/A+ Tests 2.3.2: If `x` is a promise, adopt its state 2.3.2.1: If `x` is pending, `promise` must remain pending until `x` is fulfilled or rejected. via return from a fulfilled promise",
                    "timedOut": false,
                    "duration": 101,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7cbec590-b043-4bba-8699-1c3a18002682",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "via return from a rejected promise",
                    "fullTitle": "Promises/A+ Tests 2.3.2: If `x` is a promise, adopt its state 2.3.2.1: If `x` is pending, `promise` must remain pending until `x` is fulfilled or rejected. via return from a rejected promise",
                    "timedOut": false,
                    "duration": 100,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "05ef2072-5481-4390-b3b8-44a0900e4067",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "7cbec590-b043-4bba-8699-1c3a18002682",
                  "05ef2072-5481-4390-b3b8-44a0900e4067"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 201,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "58600092-d937-488f-807e-e09cbaad5ab5",
                "title": "2.3.2.2: If/when `x` is fulfilled, fulfill `promise` with the same value.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "a2fb6962-de6f-41bd-87b7-1f10c7b96f9a",
                    "title": "`x` is already-fulfilled",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.2: If `x` is a promise, adopt its state 2.3.2.2: If/when `x` is fulfilled, fulfill `promise` with the same value. `x` is already-fulfilled via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "54185e97-c6cf-4488-b065-a314ee61c9d2",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.2: If `x` is a promise, adopt its state 2.3.2.2: If/when `x` is fulfilled, fulfill `promise` with the same value. `x` is already-fulfilled via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "556542b0-8e60-40c6-87f2-18fda8571a9e",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "54185e97-c6cf-4488-b065-a314ee61c9d2",
                      "556542b0-8e60-40c6-87f2-18fda8571a9e"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 13,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "990ffa14-e617-4d28-9bdb-4de07a16654c",
                    "title": "`x` is eventually-fulfilled",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.2: If `x` is a promise, adopt its state 2.3.2.2: If/when `x` is fulfilled, fulfill `promise` with the same value. `x` is eventually-fulfilled via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 62,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d7fb00c8-df1a-49d3-983f-9999e9b815c5",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.2: If `x` is a promise, adopt its state 2.3.2.2: If/when `x` is fulfilled, fulfill `promise` with the same value. `x` is eventually-fulfilled via return from a rejected promise",
                        "timedOut": false,
                        "duration": 60,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "744ec956-3bbb-4449-a032-f058532f21b5",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "d7fb00c8-df1a-49d3-983f-9999e9b815c5",
                      "744ec956-3bbb-4449-a032-f058532f21b5"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 122,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "df17a45f-efc1-400e-8676-a98aa6879b39",
                "title": "2.3.2.3: If/when `x` is rejected, reject `promise` with the same reason.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "3151a961-c05b-4dbc-a075-834b3eb74721",
                    "title": "`x` is already-rejected",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.2: If `x` is a promise, adopt its state 2.3.2.3: If/when `x` is rejected, reject `promise` with the same reason. `x` is already-rejected via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ad5225e5-4108-4042-b22b-6771e87c5b33",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.2: If `x` is a promise, adopt its state 2.3.2.3: If/when `x` is rejected, reject `promise` with the same reason. `x` is already-rejected via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "9c3a484d-0d7d-44ef-9d19-00f525d6640e",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "ad5225e5-4108-4042-b22b-6771e87c5b33",
                      "9c3a484d-0d7d-44ef-9d19-00f525d6640e"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 13,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "ccf5e6da-0cf2-4315-b57f-3cd38257f753",
                    "title": "`x` is eventually-rejected",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.2: If `x` is a promise, adopt its state 2.3.2.3: If/when `x` is rejected, reject `promise` with the same reason. `x` is eventually-rejected via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 59,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d3929570-a1b8-42ab-8ad5-8f594a8cad0b",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.2: If `x` is a promise, adopt its state 2.3.2.3: If/when `x` is rejected, reject `promise` with the same reason. `x` is eventually-rejected via return from a rejected promise",
                        "timedOut": false,
                        "duration": 58,
                        "state": "passed",
                        "speed": "medium",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4f512af8-f814-4cb2-9ec9-5a8cc49508a5",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "d3929570-a1b8-42ab-8ad5-8f594a8cad0b",
                      "4f512af8-f814-4cb2-9ec9-5a8cc49508a5"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 117,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "1c229fde-8423-4de6-9151-be9e613f27c2",
            "title": "2.3.3: Otherwise, if `x` is an object or function,",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "f651cff8-9104-4924-ad61-844d5a36743c",
                "title": "2.3.3.1: Let `then` be `x.then`",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "99469da8-ce33-407f-98ed-b15786f2a153",
                    "title": "`x` is an object with null prototype",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [
                      {
                        "title": "\"before each\" hook",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is an object with null prototype \"before each\" hook",
                        "timedOut": false,
                        "duration": 0,
                        "pass": false,
                        "fail": false,
                        "pending": false,
                        "code": "numberOfTimesThenWasRetrieved = 0;",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f3e7fe9a-0b24-47b6-9f9f-1e4fef46bf34",
                        "isHook": true,
                        "skipped": false
                      }
                    ],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is an object with null prototype via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "65c36260-bfe3-418f-9191-18dd5f69ed0a",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is an object with null prototype via return from a rejected promise",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3bbf07fb-c3bf-42a8-b89f-c5b6eb53b6a9",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "65c36260-bfe3-418f-9191-18dd5f69ed0a",
                      "3bbf07fb-c3bf-42a8-b89f-c5b6eb53b6a9"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 9,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "20e6d400-e2cf-42ba-8179-18d223b66f0b",
                    "title": "`x` is an object with normal Object.prototype",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [
                      {
                        "title": "\"before each\" hook",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is an object with normal Object.prototype \"before each\" hook",
                        "timedOut": false,
                        "duration": 0,
                        "pass": false,
                        "fail": false,
                        "pending": false,
                        "code": "numberOfTimesThenWasRetrieved = 0;",
                        "err": {},
                        "isRoot": false,
                        "uuid": "83532747-48bc-4d7e-b47b-c39657eec930",
                        "isHook": true,
                        "skipped": false
                      }
                    ],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is an object with normal Object.prototype via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e8493943-bc01-4f6d-b87e-22d11e520e45",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is an object with normal Object.prototype via return from a rejected promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5997707e-90ed-4c29-9553-a6a056cc8b13",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "e8493943-bc01-4f6d-b87e-22d11e520e45",
                      "5997707e-90ed-4c29-9553-a6a056cc8b13"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 9,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "30d42121-1866-47f0-b777-c6323bec3ba3",
                    "title": "`x` is a function",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [
                      {
                        "title": "\"before each\" hook",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is a function \"before each\" hook",
                        "timedOut": false,
                        "duration": 0,
                        "pass": false,
                        "fail": false,
                        "pending": false,
                        "code": "numberOfTimesThenWasRetrieved = 0;",
                        "err": {},
                        "isRoot": false,
                        "uuid": "86cbdbb2-e9eb-4293-a832-3a7e786c00b7",
                        "isHook": true,
                        "skipped": false
                      }
                    ],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is a function via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b523f085-3620-407a-b09f-f85602cdb92a",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is a function via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ae1a90b5-4dce-42b3-837e-adc837fc5bd6",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "b523f085-3620-407a-b09f-f85602cdb92a",
                      "ae1a90b5-4dce-42b3-837e-adc837fc5bd6"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 12,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "47fb113a-a7f1-4c88-b3a6-27d796bd2643",
                "title": "2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason.",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "e597eec3-9e00-4a04-bdf3-59b6a332234c",
                    "title": "`e` is `undefined`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is `undefined` via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "30211970-bf77-4e47-a1b4-4b5784a0c19f",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is `undefined` via return from a rejected promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d53a1ff6-7959-456b-b498-2b191e008f0f",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "30211970-bf77-4e47-a1b4-4b5784a0c19f",
                      "d53a1ff6-7959-456b-b498-2b191e008f0f"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 12,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "e8d4ab4b-b437-4c99-80a6-beceac11f60b",
                    "title": "`e` is `null`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is `null` via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e653614a-ab79-4267-b401-bc35d55f8e9f",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is `null` via return from a rejected promise",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a7298c6c-ade8-4ea5-9806-31c295e5402f",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "e653614a-ab79-4267-b401-bc35d55f8e9f",
                      "a7298c6c-ade8-4ea5-9806-31c295e5402f"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 9,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "f42aa8ba-bb26-462b-a391-d0e2964f313c",
                    "title": "`e` is `false`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is `false` via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "53d1658b-5a7a-43d8-b889-6dd19a94eaae",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is `false` via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "98fd5c64-ea97-48e1-9aaf-306315c07e90",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "53d1658b-5a7a-43d8-b889-6dd19a94eaae",
                      "98fd5c64-ea97-48e1-9aaf-306315c07e90"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 11,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "3a02a930-fe6d-4397-995b-ff326d6b7ba6",
                    "title": "`e` is `0`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is `0` via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5f333dc0-474f-40e0-89f0-a7544bde0f52",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is `0` via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "efd36a78-cd2c-45d0-87f1-2a3378460eb3",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "5f333dc0-474f-40e0-89f0-a7544bde0f52",
                      "efd36a78-cd2c-45d0-87f1-2a3378460eb3"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 11,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "35d720fc-8a97-4a3a-aeb9-ba0f30439762",
                    "title": "`e` is an error",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is an error via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "55953603-2f60-429f-942b-01b75557da3b",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is an error via return from a rejected promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b900002a-ba8c-48c9-816f-d03266cb5ba4",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "55953603-2f60-429f-942b-01b75557da3b",
                      "b900002a-ba8c-48c9-816f-d03266cb5ba4"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 11,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "acc77a1c-a7e9-4ab8-a031-3058b1031748",
                    "title": "`e` is an error without a stack",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is an error without a stack via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7d0fda26-1e38-4cb2-81b4-1682b4550fe0",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is an error without a stack via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "950640ad-5cae-43b0-b51a-5684678dbb9b",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "7d0fda26-1e38-4cb2-81b4-1682b4550fe0",
                      "950640ad-5cae-43b0-b51a-5684678dbb9b"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 11,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "8644c2a6-1d68-44ae-a26b-9dda5aeb65c2",
                    "title": "`e` is a date",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is a date via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8df8932f-f847-4a61-bf16-4293127b33c5",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is a date via return from a rejected promise",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1edd1816-d92d-46aa-a46d-1c24d0c53f2b",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "8df8932f-f847-4a61-bf16-4293127b33c5",
                      "1edd1816-d92d-46aa-a46d-1c24d0c53f2b"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 12,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "8dbed586-95c1-43b6-979c-e689cf24f640",
                    "title": "`e` is an object",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is an object via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d2285224-5bc4-45fb-9435-7023f5b560ea",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is an object via return from a rejected promise",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "57898254-e963-4e9b-b268-a3827a6b4a0f",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "d2285224-5bc4-45fb-9435-7023f5b560ea",
                      "57898254-e963-4e9b-b268-a3827a6b4a0f"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 9,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "4ea0cee2-06ff-496a-89a2-43b8874faedf",
                    "title": "`e` is an always-pending thenable",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is an always-pending thenable via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "cbfc8145-0da4-4278-95cd-6585bc0cab2a",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is an always-pending thenable via return from a rejected promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3e5082ae-4a65-403e-8b31-94e4d2e063a5",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "cbfc8145-0da4-4278-95cd-6585bc0cab2a",
                      "3e5082ae-4a65-403e-8b31-94e4d2e063a5"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 10,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "df60dbff-aa8a-4750-b14e-ac4b9b4a2247",
                    "title": "`e` is a fulfilled promise",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is a fulfilled promise via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "32b5cd10-3727-40b8-a56b-3b3964580153",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is a fulfilled promise via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ecd945f8-9163-47de-a8e7-01e4deaa0506",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "32b5cd10-3727-40b8-a56b-3b3964580153",
                      "ecd945f8-9163-47de-a8e7-01e4deaa0506"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 11,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "d3596355-71b2-45b8-b12c-bcf1ba7b5208",
                    "title": "`e` is a rejected promise",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is a rejected promise via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "4c618631-24b1-41bd-9fe8-7dbf106751e7",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is a rejected promise via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1f33b8b0-449a-461a-9b96-3d77e6c795db",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "4c618631-24b1-41bd-9fe8-7dbf106751e7",
                      "1f33b8b0-449a-461a-9b96-3d77e6c795db"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 11,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "cf9fe1ec-1745-48f1-beed-aa4374399f6d",
                "title": "2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise`",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "0d035fd4-8097-4b2e-950b-4d44cd249a27",
                    "title": "Calls with `x` as `this` and two function arguments",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` Calls with `x` as `this` and two function arguments via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8d35aa4e-c81c-4ed1-af61-02aa2e60fad1",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` Calls with `x` as `this` and two function arguments via return from a rejected promise",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "03d52cd1-7d7d-4c2e-93ab-65762c950a8a",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "8d35aa4e-c81c-4ed1-af61-02aa2e60fad1",
                      "03d52cd1-7d7d-4c2e-93ab-65762c950a8a"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 8,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "96741022-928b-41e0-9c05-1d5bde9272f8",
                    "title": "Uses the original value of `then`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [
                      {
                        "title": "\"before each\" hook",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` Uses the original value of `then` \"before each\" hook",
                        "timedOut": false,
                        "duration": 0,
                        "pass": false,
                        "fail": false,
                        "pending": false,
                        "code": "numberOfTimesThenWasRetrieved = 0;",
                        "err": {},
                        "isRoot": false,
                        "uuid": "664b17b5-cb94-49e9-b993-059a86b0d388",
                        "isHook": true,
                        "skipped": false
                      }
                    ],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` Uses the original value of `then` via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8d8d72b6-2c0b-46fd-bafc-70828e308337",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` Uses the original value of `then` via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "bab25fed-a992-4e85-9e54-d42e260399aa",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "8d8d72b6-2c0b-46fd-bafc-70828e308337",
                      "bab25fed-a992-4e85-9e54-d42e260399aa"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 10,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "583f5f98-473f-4456-af18-1344f94f250b",
                    "title": "2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                      {
                        "uuid": "4b967c14-2cf1-46b0-9a74-7c7dce1c3948",
                        "title": "`y` is not a thenable",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "d69f9390-fa6c-45fd-9314-c6653a8e5497",
                            "title": "`y` is `undefined`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "a775e2bc-d488-43a1-b622-ca892f3ea980",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `undefined` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "837a76b5-9fac-443a-8da0-173ce1129bc6",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `undefined` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "bd435caa-b018-4646-ae4c-f7ca6d063cfb",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "837a76b5-9fac-443a-8da0-173ce1129bc6",
                                  "bd435caa-b018-4646-ae4c-f7ca6d063cfb"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "9c19c167-dc4d-4624-8f27-c7615f521585",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `undefined` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6b23e215-3bfd-4ca5-9a53-b1aab27a8620",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `undefined` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6f626f09-bbe2-4a77-8730-6f47812c0e3d",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "6b23e215-3bfd-4ca5-9a53-b1aab27a8620",
                                  "6f626f09-bbe2-4a77-8730-6f47812c0e3d"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "c7128bac-f8ca-45ed-b617-348d7bf675be",
                            "title": "`y` is `null`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "514e1d73-660f-4ba7-be3f-42442d47ff5f",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `null` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7aebf4be-3255-41b2-80e0-df9a3b818a29",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `null` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "89b57c03-c8aa-4ff3-a56e-dbce9bb304e1",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "7aebf4be-3255-41b2-80e0-df9a3b818a29",
                                  "89b57c03-c8aa-4ff3-a56e-dbce9bb304e1"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 9,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "8b2e6475-134d-41ad-9de1-7f5c9cf416d6",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `null` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5826389e-81fb-4b56-90f8-221fd510612b",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `null` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "37d7d758-8ec5-48f2-9442-90e668bc56cc",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "5826389e-81fb-4b56-90f8-221fd510612b",
                                  "37d7d758-8ec5-48f2-9442-90e668bc56cc"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "d9a716d6-8ec5-4f25-989d-055c73a4b196",
                            "title": "`y` is `false`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "4b76e431-9bc5-4223-bea9-0f4626d643d9",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `false` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2925e240-dae6-4537-95dd-1d670974a4a0",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `false` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "689e26c8-759f-4988-8ccd-92a23d152fec",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "2925e240-dae6-4537-95dd-1d670974a4a0",
                                  "689e26c8-759f-4988-8ccd-92a23d152fec"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 9,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "e4454422-fe34-44bc-bb8a-842096c95cd8",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `false` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b69d5769-599b-4316-a839-aedcc2cd3159",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `false` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "73ec2ffc-1daa-47e1-9b7e-6f033f5ea49a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "b69d5769-599b-4316-a839-aedcc2cd3159",
                                  "73ec2ffc-1daa-47e1-9b7e-6f033f5ea49a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "86bac8e5-712d-4e54-b483-564e62f1ea6a",
                            "title": "`y` is `5`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "ba80d622-2909-4170-8a07-24a791fa0aa4",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `5` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "587fe00e-cf48-4151-a22d-a69f68f55250",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `5` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "38732147-ed0b-40c1-8155-42aea7cca58b",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "587fe00e-cf48-4151-a22d-a69f68f55250",
                                  "38732147-ed0b-40c1-8155-42aea7cca58b"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "8f5b1bf5-3e4f-4af4-ac89-29c998ae157a",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `5` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "78cd2cd0-3f3d-4653-9980-e995dcf5963d",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `5` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f920b90f-9494-4316-bd99-9d5e9e14ae44",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "78cd2cd0-3f3d-4653-9980-e995dcf5963d",
                                  "f920b90f-9494-4316-bd99-9d5e9e14ae44"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "af99d12e-16e3-465c-a5b2-dea1d9c94550",
                            "title": "`y` is an object",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "a6d6ae22-18c9-4cbd-bec6-59e99f59ffd8",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is an object `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "92038eb3-26bc-4e2a-8d1f-071e8c9cb1c5",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is an object `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c715b36f-6cd0-4741-bfa1-1188b5b69738",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "92038eb3-26bc-4e2a-8d1f-071e8c9cb1c5",
                                  "c715b36f-6cd0-4741-bfa1-1188b5b69738"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "6da79402-adb0-435f-9e90-26c2d50f365a",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is an object `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1644d533-8218-442c-ab57-664a13d1c696",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is an object `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b0ac6750-3cc5-463b-ac3b-e98ffddf8b35",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "1644d533-8218-442c-ab57-664a13d1c696",
                                  "b0ac6750-3cc5-463b-ac3b-e98ffddf8b35"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "67fd5246-968c-4429-a786-eea84cd1a4dd",
                            "title": "`y` is an array",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "4ad37d56-4c48-489c-9e2d-8e388a43098a",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is an array `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "61d2e57e-2169-432e-b398-b029bfd10018",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is an array `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c33d07ad-e1ad-42f6-89aa-2a541b5b541d",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "61d2e57e-2169-432e-b398-b029bfd10018",
                                  "c33d07ad-e1ad-42f6-89aa-2a541b5b541d"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "864fe976-07ee-4aa4-98cb-37f56b3c173e",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is an array `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f64e0226-f20f-49e2-858c-945750494dd8",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is an array `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "50b18338-6372-409c-9927-2533ee292e18",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "f64e0226-f20f-49e2-858c-945750494dd8",
                                  "50b18338-6372-409c-9927-2533ee292e18"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "0867f4e7-9058-4d47-8ef8-440b3d097173",
                        "title": "`y` is a thenable",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "df2648d7-5559-40f7-bc26-9cd5df905819",
                            "title": "`y` is a synchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "9fb78fdf-4770-43b3-8e90-cb1a8961d024",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "56e41f0a-c66e-4a11-8774-920612eea074",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "12aa6702-9fe2-475c-ac8a-f8d8ce389855",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "56e41f0a-c66e-4a11-8774-920612eea074",
                                  "12aa6702-9fe2-475c-ac8a-f8d8ce389855"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "f93c580f-5daa-40f5-afb4-ac0eb5c34235",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8b582a64-d60f-44d0-a2c0-6ba4f5227013",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2a8cf28a-9744-470c-bdb4-b3f70c7bd33c",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "8b582a64-d60f-44d0-a2c0-6ba4f5227013",
                                  "2a8cf28a-9744-470c-bdb4-b3f70c7bd33c"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "193251f9-6eb3-4abf-bb35-f72b6e1e363d",
                            "title": "`y` is an asynchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "e4918472-41ff-4364-916e-9725316041a0",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "98e82847-8d23-462b-a2be-31346a316d0a",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "887178e1-5b94-4a26-ad40-46f3f458155b",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "98e82847-8d23-462b-a2be-31346a316d0a",
                                  "887178e1-5b94-4a26-ad40-46f3f458155b"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "515d6715-d6b8-4723-9d68-457cfb6ec3ae",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2c8370d1-812b-4336-918c-7b43a930a531",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4daf58ef-26c3-496e-8f2a-50a0db915346",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "2c8370d1-812b-4336-918c-7b43a930a531",
                                  "4daf58ef-26c3-496e-8f2a-50a0db915346"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "603a9a54-fb9a-4c48-99ca-2d924a49e895",
                            "title": "`y` is a synchronously-fulfilled one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "ddc4c09f-2c49-465b-8c52-df113f3f3ccf",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a8387582-1738-4b9b-b2e9-99f90e539d11",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "cfe94b96-f761-4370-8aae-34f01d0d1c46",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "a8387582-1738-4b9b-b2e9-99f90e539d11",
                                  "cfe94b96-f761-4370-8aae-34f01d0d1c46"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 10,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "54230bf0-f37e-469f-99a2-4dfb15689fce",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "32cc1c38-5a65-4a76-a210-d02350f07743",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d1969665-8ce9-4506-b9d4-7aa77cac4d07",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "32cc1c38-5a65-4a76-a210-d02350f07743",
                                  "d1969665-8ce9-4506-b9d4-7aa77cac4d07"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "1a04b227-ad94-4ad1-b074-708d60617db3",
                            "title": "`y` is a thenable that tries to fulfill twice",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "78d61af1-b481-4271-9dd4-4e7f13a66dac",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a0b7f29f-16ad-4bae-9475-418481cc963e",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "65a67941-95f5-4c57-8870-7f602c399244",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "a0b7f29f-16ad-4bae-9475-418481cc963e",
                                  "65a67941-95f5-4c57-8870-7f602c399244"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 9,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "3041143e-3dff-49ab-9497-421c86a164a8",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0ed75f49-7803-4e2b-887a-b98cf890cd19",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d935ee26-cbaf-464f-8c4a-8cc8d9877e2a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "0ed75f49-7803-4e2b-887a-b98cf890cd19",
                                  "d935ee26-cbaf-464f-8c4a-8cc8d9877e2a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "72c53037-5e16-49d2-a7e4-6e0c37507554",
                            "title": "`y` is a thenable that fulfills but then throws",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "c7bb2173-ddb1-4a1d-a8ce-84584cc0bdb6",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4ff8f11b-c1e2-4bf4-8752-c6e79de1ed44",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "dc282fc6-0985-43cb-b17f-02b7d9df94d7",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "4ff8f11b-c1e2-4bf4-8752-c6e79de1ed44",
                                  "dc282fc6-0985-43cb-b17f-02b7d9df94d7"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "4a88aa4d-fd86-4580-bf26-c5d41492c436",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ad008906-192b-4ddf-8063-727ba8a577bc",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "79d4ffec-205a-4170-8624-acc9e6adca61",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ad008906-192b-4ddf-8063-727ba8a577bc",
                                  "79d4ffec-205a-4170-8624-acc9e6adca61"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "0c8659a0-b3a4-42a0-8a47-128b590edf72",
                            "title": "`y` is an already-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "b8d2cf3c-7fc1-4f92-bf4b-8d14995c783e",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "68fe5f81-ca60-46d4-aa3c-3c4364798652",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "52806d2e-d373-4f89-8a72-48a5ee3a853b",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "68fe5f81-ca60-46d4-aa3c-3c4364798652",
                                  "52806d2e-d373-4f89-8a72-48a5ee3a853b"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "6dc2a5c5-d476-496e-ac28-f1f5070dc8d7",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e93b712d-6eda-432a-9f46-e416e34e4270",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c06b229f-e0eb-48f6-9c82-942316c3c20c",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "e93b712d-6eda-432a-9f46-e416e34e4270",
                                  "c06b229f-e0eb-48f6-9c82-942316c3c20c"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "d91267e9-46fb-4e8e-bb69-1cae5b2a5ac1",
                            "title": "`y` is an eventually-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "4b7f54ee-ae4e-4ac3-8a23-6740eff29637",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 57,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8c339b7a-b305-4206-a954-a8aa42795b96",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "aae00ad6-715a-4e29-a471-288565497386",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "8c339b7a-b305-4206-a954-a8aa42795b96",
                                  "aae00ad6-715a-4e29-a471-288565497386"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 117,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "83f7ca88-c478-494d-8c33-f0137d395788",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "15cdfd8e-24de-42ee-9079-36d292ad2de3",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 58,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b384de30-f9de-4281-9343-6299f3a52405",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "15cdfd8e-24de-42ee-9079-36d292ad2de3",
                                  "b384de30-f9de-4281-9343-6299f3a52405"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 119,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "f3c6be5b-1574-4402-80ce-78510e2c2f24",
                            "title": "`y` is a synchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "c8ea769d-b6d7-490b-ae9f-ff3486dafa1d",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "81593fc5-5afa-4046-ac8c-0a71c5624c81",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b3557b33-c6be-4151-ac83-e17ee70443fd",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "81593fc5-5afa-4046-ac8c-0a71c5624c81",
                                  "b3557b33-c6be-4151-ac83-e17ee70443fd"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 6,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "3e643ffe-9d1d-4b29-92c5-ad7f60d2b024",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9986261c-31ba-43db-9746-3a9974818790",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a46246d3-4093-4f7e-9919-ea217b7d6cc7",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "9986261c-31ba-43db-9746-3a9974818790",
                                  "a46246d3-4093-4f7e-9919-ea217b7d6cc7"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 10,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "cfa6236a-f003-44b6-97ff-3e7f8ac1870e",
                            "title": "`y` is an asynchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "11d8139f-f6f8-4949-8cb9-fc9308edbaf4",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "843ea921-ecc1-4125-b7c9-3be545ff839c",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "98269477-5d0e-4428-8a7d-e38a80c4ad07",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "843ea921-ecc1-4125-b7c9-3be545ff839c",
                                  "98269477-5d0e-4428-8a7d-e38a80c4ad07"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "7d006b99-050a-401a-94e3-c787eb4da56f",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b46af3c5-25ba-4ca3-80da-72da5f725819",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "922d6af3-382d-4a1d-9198-5596dc7fff5c",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "b46af3c5-25ba-4ca3-80da-72da5f725819",
                                  "922d6af3-382d-4a1d-9198-5596dc7fff5c"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "2af61dc0-2a16-46eb-a794-ff4c7a42ceaf",
                            "title": "`y` is a synchronously-rejected one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "0937fa24-5db8-457a-9656-d7249b83c825",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b025c799-a6c5-472e-b7a8-f76247d8e03a",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "53bd7609-a58e-4b7d-b64b-079dd1306a9e",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "b025c799-a6c5-472e-b7a8-f76247d8e03a",
                                  "53bd7609-a58e-4b7d-b64b-079dd1306a9e"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 10,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "b0d2422c-50bb-430f-b9a4-7c174c969dab",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a5555876-a0b1-4bf8-b945-223bf461f37b",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "361c41f3-23ab-4f6c-ae0d-4089939dd7cd",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "a5555876-a0b1-4bf8-b945-223bf461f37b",
                                  "361c41f3-23ab-4f6c-ae0d-4089939dd7cd"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "a4ce8d9a-07fb-42dd-abbb-c451aa847635",
                            "title": "`y` is a thenable that immediately throws in `then`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "91942af8-6792-41fc-81de-64314bbe141d",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "01f35c3d-0968-4409-9cad-dbb04ab2582f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4c07ac32-e2a6-456e-9660-943604ce2114",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "01f35c3d-0968-4409-9cad-dbb04ab2582f",
                                  "4c07ac32-e2a6-456e-9660-943604ce2114"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "e1b20713-a69d-4088-82e6-d27c9bdd130b",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "815d9e8b-d15c-420e-94bd-85b2d9537707",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "38b5d93d-e4a6-4eeb-a047-54c314fb86df",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "815d9e8b-d15c-420e-94bd-85b2d9537707",
                                  "38b5d93d-e4a6-4eeb-a047-54c314fb86df"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "5586510b-867c-4fd3-ad57-686b7e969937",
                            "title": "`y` is an object with a throwing `then` accessor",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "cf3f5969-d2c4-41ab-a466-d313c680c3a4",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6d282a18-1370-4545-aabe-f2f4e16feca3",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "11a6ffb3-13a8-4ca2-9df5-5049149221ab",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "6d282a18-1370-4545-aabe-f2f4e16feca3",
                                  "11a6ffb3-13a8-4ca2-9df5-5049149221ab"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "db270a72-fce8-40ed-86df-4d306a54b737",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e08fd32f-3078-407a-b957-f5a6c9305b0f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "674bfa03-4ab8-410f-bc8d-58ebcb873862",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "e08fd32f-3078-407a-b957-f5a6c9305b0f",
                                  "674bfa03-4ab8-410f-bc8d-58ebcb873862"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "d1c1be29-31b4-47ff-9d69-afbdeda20f2b",
                            "title": "`y` is an already-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "b2bcd33d-2d16-444b-973a-dc4f924177a2",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an already-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b073dc17-7aef-4478-8db8-adfdbb3f64b1",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an already-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d46d6aec-767d-4d2e-8717-3dde81f97d72",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "b073dc17-7aef-4478-8db8-adfdbb3f64b1",
                                  "d46d6aec-767d-4d2e-8717-3dde81f97d72"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "98dbc726-2c74-42d6-b1d2-844c80d20327",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "05ddeafe-4447-4520-bb7a-9275020e2604",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ed60d2c6-2957-43d6-8e7b-8f23bb1973d4",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "05ddeafe-4447-4520-bb7a-9275020e2604",
                                  "ed60d2c6-2957-43d6-8e7b-8f23bb1973d4"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "d75affdf-6048-447b-9e3c-ceed63af310b",
                            "title": "`y` is an eventually-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "d96ef8b8-2df8-4eb8-a6ad-15c9cd130386",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 58,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0a2ffabc-1c6e-4d52-8fa3-270afacf027c",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a1de705e-f23f-48f2-b75b-2a6278314ed2",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "0a2ffabc-1c6e-4d52-8fa3-270afacf027c",
                                  "a1de705e-f23f-48f2-b75b-2a6278314ed2"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 118,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "fa9672a7-b67c-4541-b973-c37806c7bab0",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4ceca9fb-6253-46ea-a4c1-7ca80d198386",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6fddb9a1-da8e-4b77-91b8-0fb1408b0128",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "4ceca9fb-6253-46ea-a4c1-7ca80d198386",
                                  "6fddb9a1-da8e-4b77-91b8-0fb1408b0128"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 120,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "a88604cb-4e9c-4206-b45a-9048384ee037",
                        "title": "`y` is a thenable for a thenable",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "9c6a9c5a-6495-4e8a-8431-81144a247603",
                            "title": "`y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "d075d2c8-d7a5-44a5-bfb8-4b1d95a8c883",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2d5087f8-5846-438a-81fc-68aa0d7550b6",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "afb544dd-293e-4397-acd3-fc044a5e17d9",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "2d5087f8-5846-438a-81fc-68aa0d7550b6",
                                  "afb544dd-293e-4397-acd3-fc044a5e17d9"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "39ec9768-f7f4-4f91-9122-d2b2e14da754",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0dd834e9-01c5-47df-a61a-d48c0fabd5e1",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "aabcc433-af51-46d3-85a8-fce90c53b75f",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "0dd834e9-01c5-47df-a61a-d48c0fabd5e1",
                                  "aabcc433-af51-46d3-85a8-fce90c53b75f"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "5ee58b9d-022f-45f4-ba7a-815cac53a41f",
                            "title": "`y` is a synchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "01b49171-c9d1-4768-9566-30c994b7eed1",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7da9a872-f539-4415-82b4-ae5dc8577101",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0497d802-deee-436b-98bb-ad7424d89077",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "7da9a872-f539-4415-82b4-ae5dc8577101",
                                  "0497d802-deee-436b-98bb-ad7424d89077"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "7ecf52a5-ee33-40eb-854c-ff0ed492cffb",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "007a9312-e16c-403f-b8ef-eeb6fc945b5b",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "57f2529b-3834-41c1-b5fe-786fa436d9ab",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "007a9312-e16c-403f-b8ef-eeb6fc945b5b",
                                  "57f2529b-3834-41c1-b5fe-786fa436d9ab"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "c550d878-863d-4045-b6a6-1d610d18cb8d",
                            "title": "`y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "76825e8d-f5c9-482c-9857-0f923b068127",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "be74171a-7cdb-4b12-9a00-32c5ed4b5008",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "86444d09-b874-442a-b34b-b853d0d79943",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "be74171a-7cdb-4b12-9a00-32c5ed4b5008",
                                  "86444d09-b874-442a-b34b-b853d0d79943"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 9,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "734473c0-bd4e-4721-9d09-0d331b43e3d3",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7ae646b5-725f-44cf-8648-5186c5d1c4b9",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f8a8823c-8946-4927-b31d-767e366bfcfb",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "7ae646b5-725f-44cf-8648-5186c5d1c4b9",
                                  "f8a8823c-8946-4927-b31d-767e366bfcfb"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "4c440a4c-54ca-459e-829e-e6a7c614b693",
                            "title": "`y` is a synchronously-fulfilled custom thenable for a thenable that tries to fulfill twice",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "82172e07-b250-48ed-93bb-600810e198a5",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a8523ded-4c52-4c2e-a605-1c7c25438601",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ab0f83ee-645c-4b3c-96aa-2e39ca92f2b8",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "a8523ded-4c52-4c2e-a605-1c7c25438601",
                                  "ab0f83ee-645c-4b3c-96aa-2e39ca92f2b8"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "02f487cf-6460-4cda-842d-8a74f7b2eb89",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "876da6de-e4f4-45b9-a4e3-3880b4482ae0",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "da87aeb9-e348-4423-a0fa-996253f5c394",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "876da6de-e4f4-45b9-a4e3-3880b4482ae0",
                                  "da87aeb9-e348-4423-a0fa-996253f5c394"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "014c5dea-8c83-4e87-ba9e-a8b1448dfd69",
                            "title": "`y` is a synchronously-fulfilled custom thenable for a thenable that fulfills but then throws",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "59706094-1cab-4e65-ab7c-368089c3023a",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "28bcdfd4-6467-4661-ab1b-5756a6cf5be2",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6a9f6284-37ff-4073-945c-e2f5960f3b6e",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "28bcdfd4-6467-4661-ab1b-5756a6cf5be2",
                                  "6a9f6284-37ff-4073-945c-e2f5960f3b6e"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 9,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "c554b962-0f62-4f37-9f78-84d2bd300192",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c0c45265-0769-4c52-bfa6-281660c90a18",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "10130f6e-22c6-4e3a-a897-8f348f0356ff",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "c0c45265-0769-4c52-bfa6-281660c90a18",
                                  "10130f6e-22c6-4e3a-a897-8f348f0356ff"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "5b4c8b94-5923-443d-ac29-56824f355f60",
                            "title": "`y` is a synchronously-fulfilled custom thenable for an already-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "b1a0241d-bcb9-48f2-b57d-0659eb7a7559",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "08d16886-82bf-45aa-99ec-168336863969",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e5800aa9-2806-418c-8ef9-86eadef08f88",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "08d16886-82bf-45aa-99ec-168336863969",
                                  "e5800aa9-2806-418c-8ef9-86eadef08f88"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "334a2554-e76d-4127-ba0a-49f2f3e442c1",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d95dac26-5db8-4940-8d39-cb2e715f908e",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b25438fa-2390-4f6c-a7e6-ce37b0d337b9",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "d95dac26-5db8-4940-8d39-cb2e715f908e",
                                  "b25438fa-2390-4f6c-a7e6-ce37b0d337b9"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "c60b5c20-7178-4a12-96d3-cb9b6c26d599",
                            "title": "`y` is a synchronously-fulfilled custom thenable for an eventually-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "9f9d19a3-76dc-4213-9efa-62249ddcc74d",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "eef432ba-be63-4dc7-b6c0-f861787ebafa",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 58,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "47a89631-181d-4409-b5e7-861d73a2711f",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "eef432ba-be63-4dc7-b6c0-f861787ebafa",
                                  "47a89631-181d-4409-b5e7-861d73a2711f"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 117,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "72ed0328-f55e-4e9d-9a24-5666719ba977",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7117cab6-90f1-4301-ad65-a47ef12475fd",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "43ac70cb-70a1-4639-80e0-70931728eb33",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "7117cab6-90f1-4301-ad65-a47ef12475fd",
                                  "43ac70cb-70a1-4639-80e0-70931728eb33"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 120,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "91a5179c-1333-4d2e-abc5-6d113d6c3d41",
                            "title": "`y` is a synchronously-fulfilled custom thenable for a synchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "bfc48abe-a4c0-43c5-b40b-19248de2f39d",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "98dbb29d-fd28-4d93-842a-9f57710cb9df",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "20162b73-1c1b-4bd9-9301-0db0797bd428",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "98dbb29d-fd28-4d93-842a-9f57710cb9df",
                                  "20162b73-1c1b-4bd9-9301-0db0797bd428"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 10,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "6c163c80-7227-4ea6-a76f-c09a353dff3a",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "517e691e-2b58-46f2-9eef-b7cac41e8df5",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c57e60ce-53ce-4b50-b8e6-657c0c099b08",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "517e691e-2b58-46f2-9eef-b7cac41e8df5",
                                  "c57e60ce-53ce-4b50-b8e6-657c0c099b08"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "28abcd79-49f2-4a0a-8a4c-1204bfe4fe57",
                            "title": "`y` is a synchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "bcd259a4-6710-4f8f-a4e5-a9260d774341",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "67b6a2ce-3da6-4d21-931e-bd62e8dcb781",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f941c7af-4a46-42fe-95ca-f6dbe8188815",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "67b6a2ce-3da6-4d21-931e-bd62e8dcb781",
                                  "f941c7af-4a46-42fe-95ca-f6dbe8188815"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "7755f78e-f430-4a13-a719-1229a73d3735",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0bb9c577-c8ae-40b1-ba9c-4e225ace57c9",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "09f71b4f-e89d-468b-8151-8460235f70e0",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "0bb9c577-c8ae-40b1-ba9c-4e225ace57c9",
                                  "09f71b4f-e89d-468b-8151-8460235f70e0"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "7abc2e03-d7e2-40a3-bd94-acf353238587",
                            "title": "`y` is a synchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "99e54a43-b6b5-4e35-b5cb-27d72d916be4",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "36a56752-6495-4903-a167-8a54a212372d",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f2f2a7b5-025b-4da2-ae33-8533a776a9d8",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "36a56752-6495-4903-a167-8a54a212372d",
                                  "f2f2a7b5-025b-4da2-ae33-8533a776a9d8"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "4ae1504a-b729-403a-9883-faaa171ef029",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8afe8c2a-7a5c-4fb3-85eb-64d45f6b2a09",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "60e09488-3949-49f7-9932-88a0d234e4cf",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "8afe8c2a-7a5c-4fb3-85eb-64d45f6b2a09",
                                  "60e09488-3949-49f7-9932-88a0d234e4cf"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "aa9530ea-001b-430e-8cad-b468c4df3e79",
                            "title": "`y` is a synchronously-fulfilled custom thenable for a thenable that immediately throws in `then`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "c9ce35fa-43cd-4e5b-9bbe-c715c78f2f62",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "19f9b0fd-3234-42fd-9581-646bba14db92",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f3bce73c-b382-4368-abae-1cd812f98e5c",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "19f9b0fd-3234-42fd-9581-646bba14db92",
                                  "f3bce73c-b382-4368-abae-1cd812f98e5c"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "b6d0546b-121b-4004-8bc7-3c57d8c1a70c",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b91a975c-45ab-49d2-b071-a964089583de",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "fe72f52c-542e-499d-8006-3b413027e708",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "b91a975c-45ab-49d2-b071-a964089583de",
                                  "fe72f52c-542e-499d-8006-3b413027e708"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "fb9be20d-c61d-4593-a93a-a350ba8396b5",
                            "title": "`y` is a synchronously-fulfilled custom thenable for an object with a throwing `then` accessor",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "d43e1088-3479-45fd-b478-8a696847f15c",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3fe35a78-8abc-417b-90fe-90d8514516e0",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d5208fff-9a7d-4ecf-8198-c2954128d579",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "3fe35a78-8abc-417b-90fe-90d8514516e0",
                                  "d5208fff-9a7d-4ecf-8198-c2954128d579"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 10,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "dac81e34-c152-468d-92ca-c846c10ba33b",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7f116be0-b58d-4649-a5e9-7a7a96532644",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d971d4a3-1d74-4f1a-bcb8-1929499e6473",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "7f116be0-b58d-4649-a5e9-7a7a96532644",
                                  "d971d4a3-1d74-4f1a-bcb8-1929499e6473"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "6818c3fd-ba34-465a-a6c6-263c0cb81637",
                            "title": "`y` is a synchronously-fulfilled custom thenable for an already-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "28a44b14-24d8-4d23-98a3-62e8e36490cd",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "023c3bcd-b51b-4ca5-aadd-4f0e33e7ce48",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f799170c-2ef7-47ee-a970-2440ffa63fe4",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "023c3bcd-b51b-4ca5-aadd-4f0e33e7ce48",
                                  "f799170c-2ef7-47ee-a970-2440ffa63fe4"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "b2a48db2-1873-4676-ba7f-b16553f258b0",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9ad4196e-ac60-4ca3-af3d-04ee42605a32",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6094f3f4-ef72-49c2-aa78-e4ccdbab2e32",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "9ad4196e-ac60-4ca3-af3d-04ee42605a32",
                                  "6094f3f4-ef72-49c2-aa78-e4ccdbab2e32"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 21,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "e1342d85-d5e1-45cd-9011-8cdf9a65e8fc",
                            "title": "`y` is a synchronously-fulfilled custom thenable for an eventually-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "0f5a742b-b435-4ceb-b361-6acaa60bdbce",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3c9d4e54-65cd-4d7e-ae80-dd1ce806567b",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1c634e4b-aa2a-4dce-baf0-ff51e7723c55",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "3c9d4e54-65cd-4d7e-ae80-dd1ce806567b",
                                  "1c634e4b-aa2a-4dce-baf0-ff51e7723c55"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 120,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "a52181e4-0162-4fb9-a246-af7ca11ae64f",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "33745a7b-732c-4e13-9c90-bdf012cf2f0f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8f3628f3-d6ad-4a4e-8891-bc238654ec38",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "33745a7b-732c-4e13-9c90-bdf012cf2f0f",
                                  "8f3628f3-d6ad-4a4e-8891-bc238654ec38"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 121,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "06365e2f-0986-49d7-9770-8105a3b0a788",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "bfec75a0-ce9c-4761-8924-775b90e81c42",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ec3bc441-bac8-4675-9669-ecc2a59bff43",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "17aa7a81-b062-46cd-ba38-6d36b66246bd",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ec3bc441-bac8-4675-9669-ecc2a59bff43",
                                  "17aa7a81-b062-46cd-ba38-6d36b66246bd"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "c4039d0f-8644-4604-95f2-d64bb99ebb17",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "26cc879a-9803-4579-9f41-67f31550be64",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b675cb85-7eef-45b3-b921-2675858c5b6b",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "26cc879a-9803-4579-9f41-67f31550be64",
                                  "b675cb85-7eef-45b3-b921-2675858c5b6b"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "9617c3d0-ebea-4d54-9ab8-e464c7d4c1a8",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "278d2358-a09f-40b5-bd34-b2fee6dd4e71",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f5dca77e-9982-483c-b632-023a4afe670c",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "686a91ad-1a35-4c67-8408-457a8e2d07ed",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "f5dca77e-9982-483c-b632-023a4afe670c",
                                  "686a91ad-1a35-4c67-8408-457a8e2d07ed"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "a482add6-fb25-4766-a335-c13f9fa53d68",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b6d347f3-9c45-4304-aa41-b21983bdab81",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9d378010-f8ad-4eae-af39-bd30be7904b7",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "b6d347f3-9c45-4304-aa41-b21983bdab81",
                                  "9d378010-f8ad-4eae-af39-bd30be7904b7"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 20,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "f86d04c9-c1fc-47fe-8d71-339e83c1f95c",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "d91e288b-d1c6-45a9-803a-49d49d7c8bf3",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "adef65f8-7465-4512-9d29-779963059b31",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c5061190-8a3f-425d-8c1c-0dd8814997a6",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "adef65f8-7465-4512-9d29-779963059b31",
                                  "c5061190-8a3f-425d-8c1c-0dd8814997a6"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "ae4c46ae-465b-49cf-b5dd-f20fd0e9a7d8",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "44620223-fe70-4891-b409-aafba0f898e9",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "cae148f9-27d4-4a6f-9551-f8c3031ae8d6",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "44620223-fe70-4891-b409-aafba0f898e9",
                                  "cae148f9-27d4-4a6f-9551-f8c3031ae8d6"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "fb160846-59e5-432c-9351-b6270ff26a1e",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for a thenable that tries to fulfill twice",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "419c2c25-6915-483e-aeb1-a3d59c3d841b",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "11fd6138-8b41-4774-a58c-b0a9455fbcc5",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "844f71b7-644e-4509-adb2-6deaa329641c",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "11fd6138-8b41-4774-a58c-b0a9455fbcc5",
                                  "844f71b7-644e-4509-adb2-6deaa329641c"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "a3f9d7da-eb92-465b-ac03-8979faee96b1",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "aefb8d8b-41fe-4455-be02-cbd6be1e66a1",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "618d1d01-d726-4e9b-9b14-f4be50c4cbf7",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "aefb8d8b-41fe-4455-be02-cbd6be1e66a1",
                                  "618d1d01-d726-4e9b-9b14-f4be50c4cbf7"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 22,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "46bca733-1caf-4d9a-aaa6-2e756873b05d",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for a thenable that fulfills but then throws",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "d3d40d42-5207-4768-b0b8-52fca7614a4a",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9cfa30a6-1cd4-4c01-8300-f4ac61ad8e35",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b75bcaea-3665-49c4-ba02-98699289e776",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "9cfa30a6-1cd4-4c01-8300-f4ac61ad8e35",
                                  "b75bcaea-3665-49c4-ba02-98699289e776"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "d5c1ff48-923d-4888-bc59-2f73ef2314ff",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5558ed6b-d723-4fbe-bb88-7308db8fc536",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b6c761f5-edd8-48de-89b7-77f12b785103",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "5558ed6b-d723-4fbe-bb88-7308db8fc536",
                                  "b6c761f5-edd8-48de-89b7-77f12b785103"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "5864bf2d-f65c-4b91-927d-917b73475df0",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for an already-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "3e68cfac-d800-41c7-b7f4-8d4a9d0f1fa1",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1adcd8c7-e767-4942-84ac-eb1941d1a5fb",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9ae833db-608e-4049-9444-ffccf95c7f31",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "1adcd8c7-e767-4942-84ac-eb1941d1a5fb",
                                  "9ae833db-608e-4049-9444-ffccf95c7f31"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "174c3947-a6ff-41f3-b955-7dd75e4a80d3",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4bedd6f8-5e46-4b83-b82d-cb62cc7505fe",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "fae3381b-073b-45a7-89c4-6ae4957e1ef1",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "4bedd6f8-5e46-4b83-b82d-cb62cc7505fe",
                                  "fae3381b-073b-45a7-89c4-6ae4957e1ef1"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 22,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "3f3590c3-256a-4ba4-9d41-478b0603bdd2",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for an eventually-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "e93b3352-4043-4c48-a1f7-5de622b08c96",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "97c07d18-a0ea-4f09-bb6f-31fae58b0728",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "35986fb8-94ec-4916-96f2-32c09f8e6d57",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "97c07d18-a0ea-4f09-bb6f-31fae58b0728",
                                  "35986fb8-94ec-4916-96f2-32c09f8e6d57"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 122,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "57742980-16a6-4924-a736-14cd45cc9a8b",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "68a0a4f0-f0de-4961-b000-853240203530",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "590d46e8-0705-4ad7-b5e8-a4ac15ea397d",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "68a0a4f0-f0de-4961-b000-853240203530",
                                  "590d46e8-0705-4ad7-b5e8-a4ac15ea397d"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 123,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "c35c83ce-56c9-400b-9d2c-2cd17a33d88f",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "04ee1220-f704-4b4f-9827-71d538a6894b",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6e20bb75-2dbd-4ede-9133-9602474d320c",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0e51f3bf-08ff-4b83-b9fb-c384bb9ba19d",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "6e20bb75-2dbd-4ede-9133-9602474d320c",
                                  "0e51f3bf-08ff-4b83-b9fb-c384bb9ba19d"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "7521ada0-3a05-4d44-accf-6f33b5c3af3b",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d40ba9bf-bd57-4355-9985-104184970093",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b7acee03-31e2-4eaa-ae48-81592ea28a78",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "d40ba9bf-bd57-4355-9985-104184970093",
                                  "b7acee03-31e2-4eaa-ae48-81592ea28a78"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "ee4a5faa-2601-4bbf-b9d9-905bcba4a1c9",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "aae80f9e-509d-43ce-8ac5-a8fa8f1089ac",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b228e1aa-5378-4cc8-93d1-2a0007db335f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ec35deba-8c36-41ef-b516-7ef875013331",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "b228e1aa-5378-4cc8-93d1-2a0007db335f",
                                  "ec35deba-8c36-41ef-b516-7ef875013331"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "3d10a960-0df9-4843-b02d-49cabe965a61",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f0f7baae-d681-4de3-9aed-8cd3ee5b9cca",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1a559348-19f3-405b-8b50-c00208d7023a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "f0f7baae-d681-4de3-9aed-8cd3ee5b9cca",
                                  "1a559348-19f3-405b-8b50-c00208d7023a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 20,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "72ad4bee-337d-4574-b03c-1ae41d271bd9",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "2d3ae81d-9df5-4485-8fdf-fa1aba5988d5",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a897ae87-5aee-4799-8d38-b624bd54d85f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "31fa3c00-951b-4451-9fc0-dcf877d5bf6a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "a897ae87-5aee-4799-8d38-b624bd54d85f",
                                  "31fa3c00-951b-4451-9fc0-dcf877d5bf6a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "ac495512-383f-4991-a078-564717125a43",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ef4a6b5f-2412-4a64-bce4-558039a6bfc2",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f9e7a41d-dd91-4f6a-9f5e-9a2c197ceb6f",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ef4a6b5f-2412-4a64-bce4-558039a6bfc2",
                                  "f9e7a41d-dd91-4f6a-9f5e-9a2c197ceb6f"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 20,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "cd12667b-2363-446b-8569-34d195060e68",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for a thenable that immediately throws in `then`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "cf5c7b46-752b-41a1-ae33-2f3830b22e10",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4a41259c-afa6-4f76-aa06-d1f8ccf52ec6",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "91ca401b-2661-442b-8dd7-24c261567bbc",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "4a41259c-afa6-4f76-aa06-d1f8ccf52ec6",
                                  "91ca401b-2661-442b-8dd7-24c261567bbc"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "92fa1e6e-3397-41b8-acfb-45a860ab2e07",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7868fa9c-d195-417e-9789-8811b3fa1bde",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1b6d9148-43b5-4085-9697-779c2cc4bd15",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "7868fa9c-d195-417e-9789-8811b3fa1bde",
                                  "1b6d9148-43b5-4085-9697-779c2cc4bd15"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "4ab89223-7de0-4140-a31f-d0bb77891293",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for an object with a throwing `then` accessor",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "53038428-4110-46ba-ba4f-af175ee6f0d2",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "87c33584-9e3f-4f2a-b28f-a286037a16de",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "82ee699d-d581-43db-99ed-370682406fcc",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "87c33584-9e3f-4f2a-b28f-a286037a16de",
                                  "82ee699d-d581-43db-99ed-370682406fcc"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "c6e21ff5-bdec-4fda-85dc-d5ae8b488e2f",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2e0ab10c-3e7e-4c49-841b-ff20450b118b",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d2e2f501-3660-410c-bc2c-4dae2c4f88e7",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "2e0ab10c-3e7e-4c49-841b-ff20450b118b",
                                  "d2e2f501-3660-410c-bc2c-4dae2c4f88e7"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "48fe4a00-b32a-4d09-9fac-1b121202c59d",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for an already-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "218cce1f-535f-43d0-821a-3dd9fffbe40c",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "cb7228b7-c3c3-4bf2-a0fb-b50122ec77b2",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f997aa21-8392-4811-aa20-0acd065f5406",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "cb7228b7-c3c3-4bf2-a0fb-b50122ec77b2",
                                  "f997aa21-8392-4811-aa20-0acd065f5406"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 19,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "9e49e34c-214f-4b75-98e9-ca925e895dbf",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "909ab6ce-5798-4129-bf1b-5b906d27ffea",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a29cd800-3315-4d64-b9b7-e2467b150984",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "909ab6ce-5798-4129-bf1b-5b906d27ffea",
                                  "a29cd800-3315-4d64-b9b7-e2467b150984"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 20,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "8d0589b4-2277-40ff-89a6-fbf342f3bb11",
                            "title": "`y` is an asynchronously-fulfilled custom thenable for an eventually-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "aa99df62-d84f-49d6-ace2-e9bc7494f4b4",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1c479c7d-3674-4904-864c-5f381b0bee2b",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 58,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3a9e1669-7e5e-4914-bbaf-b3e2d1457a75",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "1c479c7d-3674-4904-864c-5f381b0bee2b",
                                  "3a9e1669-7e5e-4914-bbaf-b3e2d1457a75"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 119,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "3c2f81af-db4b-41f2-9af9-a3812c25a347",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2a4a2ad3-5f75-4cf8-8c21-66d61e748b82",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "87ed7ef8-9dda-4f0b-adf7-133ee8358dc4",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "2a4a2ad3-5f75-4cf8-8c21-66d61e748b82",
                                  "87ed7ef8-9dda-4f0b-adf7-133ee8358dc4"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 122,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "b13308dc-8ed9-41b5-90ac-018dd5f8ff1d",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "08664610-53a7-4b1f-a9ac-e97103b539f4",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "559da4b8-8e83-4f59-a5be-74e3d49f20ed",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "adb3a839-65b8-4518-bd33-a3ed13515414",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "559da4b8-8e83-4f59-a5be-74e3d49f20ed",
                                  "adb3a839-65b8-4518-bd33-a3ed13515414"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 9,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "9bbb7350-fdd6-4fd0-8bfd-3de46bc691f8",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "16275cb2-be9d-47db-b1da-c59a2fd8f6ad",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "280cba8c-4e22-44f1-ae76-0371b8592469",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "16275cb2-be9d-47db-b1da-c59a2fd8f6ad",
                                  "280cba8c-4e22-44f1-ae76-0371b8592469"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "6a3730c5-5c4d-47b3-b658-e881f6497e6a",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for an asynchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "c2d43e6a-6ab0-4f26-b6af-9e18e26abb3d",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "da605111-0564-4bda-926a-a441570a7287",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0e33850f-34d3-491c-9ddc-ecb834b8345f",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "da605111-0564-4bda-926a-a441570a7287",
                                  "0e33850f-34d3-491c-9ddc-ecb834b8345f"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "b7ed7c54-2e41-4a5d-8858-6866a2dc3d03",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d02d0f3d-8d3b-4e65-a1fa-53978cf3ab07",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "38d91de1-1a37-4b4b-9d07-9e269de81c43",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "d02d0f3d-8d3b-4e65-a1fa-53978cf3ab07",
                                  "38d91de1-1a37-4b4b-9d07-9e269de81c43"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "dd92c4f1-76e9-4a20-9bfe-9543c447c430",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "89144b0a-a0ce-463a-b6f2-9327ff985a29",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c22ab68d-9cc1-472f-85ad-b0f02eafbf16",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "961be568-2426-40c4-89fd-dd3ebc755235",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "c22ab68d-9cc1-472f-85ad-b0f02eafbf16",
                                  "961be568-2426-40c4-89fd-dd3ebc755235"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "5901b220-6c16-4026-873b-dd139a148bfd",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1bd865ad-5aaa-4152-84b1-1d85b01cf361",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7a4c8a70-0c94-4962-8e4a-66717f05f47b",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "1bd865ad-5aaa-4152-84b1-1d85b01cf361",
                                  "7a4c8a70-0c94-4962-8e4a-66717f05f47b"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "63c88426-4563-43c5-9c35-fbd3bb627754",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for a thenable that tries to fulfill twice",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "748c9eda-679b-4566-8659-afd8c84065cd",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f0177f3d-8e9e-42aa-b043-607ff4dfcac6",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e034d109-f56e-4d1d-842f-a3be1ea0c43a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "f0177f3d-8e9e-42aa-b043-607ff4dfcac6",
                                  "e034d109-f56e-4d1d-842f-a3be1ea0c43a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "50a166e6-2b21-41b7-8992-6fbf0ff3fab3",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "216eb65a-57a6-4af5-b5d9-2228c7149a4f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "57cfbe77-cfb4-4b2c-9a49-3de7695333f5",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "216eb65a-57a6-4af5-b5d9-2228c7149a4f",
                                  "57cfbe77-cfb4-4b2c-9a49-3de7695333f5"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "ee7e5d3b-f5d4-4df2-b0ea-89392ca79879",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for a thenable that fulfills but then throws",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "47858338-fa85-4552-adf0-12c508dfd9df",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "706c571f-77a3-405c-9b03-3bf4b836c64f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0148f6fa-f61c-44f9-a011-218bde420e25",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "706c571f-77a3-405c-9b03-3bf4b836c64f",
                                  "0148f6fa-f61c-44f9-a011-218bde420e25"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 10,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "e0c039b9-99ef-49c4-ac1b-eb200b103ffd",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "13057aff-6902-4d15-addf-ef1ded0fc1bc",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "18ec3cd1-3437-4325-9709-07d00d234c65",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "13057aff-6902-4d15-addf-ef1ded0fc1bc",
                                  "18ec3cd1-3437-4325-9709-07d00d234c65"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "04f29d1b-c614-410e-9762-4a2e06030376",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for an already-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "93443aa8-bffd-4bbd-9ed7-8c83dfe91747",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0069187d-a9e4-45bf-a85c-d3e489faf729",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "00fbf326-6183-413e-8ca7-63161126f6b9",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "0069187d-a9e4-45bf-a85c-d3e489faf729",
                                  "00fbf326-6183-413e-8ca7-63161126f6b9"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "d8cd14e9-7677-40f6-821b-ce99cb0f6714",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f0516440-e7fa-46d9-aafe-9536d3ece57b",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "23f17a81-96bc-41d8-895e-7a2b5f995f3b",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "f0516440-e7fa-46d9-aafe-9536d3ece57b",
                                  "23f17a81-96bc-41d8-895e-7a2b5f995f3b"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "6640eec8-cfe2-41dd-b041-67723d010f6f",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for an eventually-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "90a2ad7d-5436-4a4c-9629-c1680447f6e1",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8ce0443d-9939-47ac-8ade-6cf263af1ff4",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e6ef9f08-5722-433a-b399-a996431eaaf6",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "8ce0443d-9939-47ac-8ade-6cf263af1ff4",
                                  "e6ef9f08-5722-433a-b399-a996431eaaf6"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 121,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "ca1c2429-e3dc-4f89-87ab-6365fdcc0b23",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "209d0981-de13-4981-b2b8-097748f1ff27",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a3c393c8-9536-4d2b-8325-095c80c8c30a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "209d0981-de13-4981-b2b8-097748f1ff27",
                                  "a3c393c8-9536-4d2b-8325-095c80c8c30a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 123,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "68004bda-56f1-4988-85b1-8889b4975755",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "9744c271-23b6-4ae4-b48e-1b69bb299e82",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a61d910e-a5e4-48ad-ad5f-61b3ec34325f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e76ac6a2-ca62-4a2f-9339-b94646d017ae",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "a61d910e-a5e4-48ad-ad5f-61b3ec34325f",
                                  "e76ac6a2-ca62-4a2f-9339-b94646d017ae"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "9e300015-5bd9-42fd-89f8-88baf6067402",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "db9e84e7-f1cf-40df-85ed-7466795d0699",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0f7f3e9e-5527-40e7-b3f2-ac436f24c6c9",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "db9e84e7-f1cf-40df-85ed-7466795d0699",
                                  "0f7f3e9e-5527-40e7-b3f2-ac436f24c6c9"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "ba4ed8d4-b5d1-4133-8824-7fd81592211c",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for an asynchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "5b586f5c-1bc3-4152-85a1-6066258fe748",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6920ff65-0927-4c89-a7aa-cfd95c1d90dd",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "18616a4f-a186-40ce-8aa5-7ba377419e7a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "6920ff65-0927-4c89-a7aa-cfd95c1d90dd",
                                  "18616a4f-a186-40ce-8aa5-7ba377419e7a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "99147ed0-2f0b-4008-9d1d-e20f7e01c10e",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1c01dccf-cdb8-46ae-8a00-5a1d70c2cc58",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "91860f0e-ee6b-4b43-8ef8-6fc5b6dc5ef5",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "1c01dccf-cdb8-46ae-8a00-5a1d70c2cc58",
                                  "91860f0e-ee6b-4b43-8ef8-6fc5b6dc5ef5"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 19,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "5613174f-4631-4b51-897e-1d081f00f845",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "47c43971-b024-4ca9-a009-f4dd48c95a14",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "34b55a6f-2768-4196-ade1-bd803bce8d59",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9d6f64e4-46c7-4fa5-84fd-60d206ebf985",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "34b55a6f-2768-4196-ade1-bd803bce8d59",
                                  "9d6f64e4-46c7-4fa5-84fd-60d206ebf985"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "78252bc5-04b3-48a2-a33d-ba4a8f0483aa",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0e981a2d-1ecc-4130-bc67-857d285631f2",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "099d5842-0c9b-41eb-b6f1-9b2daa9f524c",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "0e981a2d-1ecc-4130-bc67-857d285631f2",
                                  "099d5842-0c9b-41eb-b6f1-9b2daa9f524c"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "f9481598-b99f-4256-8650-4a582b9207fa",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for a thenable that immediately throws in `then`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "ac63ae46-ea09-476a-a47b-ab2fe23b51f4",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "81035f31-6451-4621-99a2-e48159233860",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9a808b59-4d69-43f2-bad7-5198fb31fa08",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "81035f31-6451-4621-99a2-e48159233860",
                                  "9a808b59-4d69-43f2-bad7-5198fb31fa08"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "0f0d69b0-e6fc-4580-bf2d-1c47e8240a39",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5f89aa38-0d8e-4b7b-85e8-f4bb494525ce",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9e3b6a7a-009e-48a5-be56-1abe00f51d7f",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "5f89aa38-0d8e-4b7b-85e8-f4bb494525ce",
                                  "9e3b6a7a-009e-48a5-be56-1abe00f51d7f"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "cdfb758b-8371-4926-aa2f-6d08c6faf765",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for an object with a throwing `then` accessor",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "a621291a-240b-4f3b-ace4-0f687c662e67",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "90dfe60f-18d0-4140-86cb-dc11f06543d2",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a5d00da1-4c83-4ede-928d-a84b5536cb1e",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "90dfe60f-18d0-4140-86cb-dc11f06543d2",
                                  "a5d00da1-4c83-4ede-928d-a84b5536cb1e"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "4c11b028-0fa9-4173-9a62-11c538adce8c",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "53a4fcc9-a7e6-47cf-a3af-7c899be86bf3",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "56ee2f1b-3509-43e4-836f-dc0b5d2bc5bb",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "53a4fcc9-a7e6-47cf-a3af-7c899be86bf3",
                                  "56ee2f1b-3509-43e4-836f-dc0b5d2bc5bb"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "3a86a12b-d2c0-4867-b9f0-23e0bb82d933",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for an already-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "00b2abbd-8dc0-4450-8bb4-6d5b71ed50b8",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "17a211f9-1208-4dd2-9a60-cbc6a25b9c16",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "211075d0-0bab-4faa-b20a-a36608a31ce3",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "17a211f9-1208-4dd2-9a60-cbc6a25b9c16",
                                  "211075d0-0bab-4faa-b20a-a36608a31ce3"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "235311f5-34b6-4cb1-9445-dbe4fefc5b4e",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "702a7801-e324-40a8-a640-8ae60b5a3797",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1af70f52-45ff-43b0-9891-8b74a6dc3305",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "702a7801-e324-40a8-a640-8ae60b5a3797",
                                  "1af70f52-45ff-43b0-9891-8b74a6dc3305"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "2a74af8b-1190-4d4b-8fb5-41f2ceea3186",
                            "title": "`y` is a synchronously-fulfilled one-time thenable for an eventually-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "fec4cc16-079b-44ec-9e29-725f36ff9498",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "96d0a736-58ae-4f91-9e41-eb16889d51ee",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e99be316-f12a-436f-a1a6-b8653fa5836f",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "96d0a736-58ae-4f91-9e41-eb16889d51ee",
                                  "e99be316-f12a-436f-a1a6-b8653fa5836f"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 119,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "1c1da723-d8be-4b8c-9540-53348373d2e9",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 80,
                                    "state": "passed",
                                    "speed": "slow",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "665d37b7-bafd-4d63-ad6e-5f8ad5c766e3",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "32ed289e-6852-4296-be76-1c2ba41668df",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "665d37b7-bafd-4d63-ad6e-5f8ad5c766e3",
                                  "32ed289e-6852-4296-be76-1c2ba41668df"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 141,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "128a4c0c-fd7a-4173-a6b2-d175ec814dcb",
                            "title": "`y` is a thenable that tries to fulfill twice for a synchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "34daf2f5-4c8b-4712-89e6-b8b32fd7372a",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a72a5e68-0708-4d9b-a812-d35400f48ccd",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c664e500-28b2-4f2a-a267-ad099c92da31",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "a72a5e68-0708-4d9b-a812-d35400f48ccd",
                                  "c664e500-28b2-4f2a-a267-ad099c92da31"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "fdba8207-1795-4160-9da1-05743dbe20c0",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3f2b50dc-3bc2-4b1f-a95b-ba93b834e255",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ec0f57f1-0c0f-4e02-8909-073b82cd464d",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "3f2b50dc-3bc2-4b1f-a95b-ba93b834e255",
                                  "ec0f57f1-0c0f-4e02-8909-073b82cd464d"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "5cfe869d-2c5d-4f18-811b-8250d36ab8fc",
                            "title": "`y` is a thenable that tries to fulfill twice for an asynchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "490655bf-8f18-4960-a8c8-c45df28cddfb",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7e5d415d-30f4-49b9-9b25-7d017b5b5a46",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "afeac9ab-409a-4991-9646-eeabe9c17a41",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "7e5d415d-30f4-49b9-9b25-7d017b5b5a46",
                                  "afeac9ab-409a-4991-9646-eeabe9c17a41"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "2427cf45-ec2e-4286-b661-441bee8c7998",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f7e60f17-14f0-4bf4-9b20-26daaf30fdec",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a1e84714-f105-45ae-a05d-af7c644f45d2",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "f7e60f17-14f0-4bf4-9b20-26daaf30fdec",
                                  "a1e84714-f105-45ae-a05d-af7c644f45d2"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "cfad9d0c-025f-4308-bac7-3ddd0fe94869",
                            "title": "`y` is a thenable that tries to fulfill twice for a synchronously-fulfilled one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "5538f991-0d0c-4cd9-a190-e73644b3fd69",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "341e2dbf-e70f-4762-ae65-69c460b18c4b",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a4ac0bf5-bd71-496f-b497-dd478a4a9788",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "341e2dbf-e70f-4762-ae65-69c460b18c4b",
                                  "a4ac0bf5-bd71-496f-b497-dd478a4a9788"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "465a284e-9800-447d-8978-b0783d38a3fc",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a361af51-28f3-4f18-9c35-5f7e50051ebf",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "cb6d62c0-003f-4e8f-ab82-d500dfc11052",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "a361af51-28f3-4f18-9c35-5f7e50051ebf",
                                  "cb6d62c0-003f-4e8f-ab82-d500dfc11052"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "32f38abf-f0d5-4b40-99e2-b403d32dde0c",
                            "title": "`y` is a thenable that tries to fulfill twice for a thenable that tries to fulfill twice",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "1c7cd9dd-ea7e-49be-98d2-14eca133efe2",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 3,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3947c416-b0ba-437e-aabe-d681a811b5a6",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f4eba861-cd7c-4232-aef0-be6df00ecc91",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "3947c416-b0ba-437e-aabe-d681a811b5a6",
                                  "f4eba861-cd7c-4232-aef0-be6df00ecc91"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 8,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "66667095-e651-474e-86d7-f54b368fadd6",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "07df0c91-57bd-468b-beb8-7937f989721a",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4120afc7-29a6-4707-b9d2-4c6ac399c743",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "07df0c91-57bd-468b-beb8-7937f989721a",
                                  "4120afc7-29a6-4707-b9d2-4c6ac399c743"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "b05b68f5-32f2-4ed6-a81f-7a56741b2f86",
                            "title": "`y` is a thenable that tries to fulfill twice for a thenable that fulfills but then throws",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "895d3fbe-5dd0-47a0-81b5-e35c27c05788",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a7d1a7e4-5711-4edb-a7aa-173e654955a8",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "df42d5bb-e288-4ffd-886e-5fca1a10b30e",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "a7d1a7e4-5711-4edb-a7aa-173e654955a8",
                                  "df42d5bb-e288-4ffd-886e-5fca1a10b30e"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 10,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "024dab35-3d18-4629-bef1-acdec06fb663",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ea739a7b-c487-46b0-bbcd-46ea30aa70a0",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "667f2fbe-181b-44d9-b1f3-994b22036186",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ea739a7b-c487-46b0-bbcd-46ea30aa70a0",
                                  "667f2fbe-181b-44d9-b1f3-994b22036186"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "9eeb30df-1443-42d6-a8c6-37a9337ae3c2",
                            "title": "`y` is a thenable that tries to fulfill twice for an already-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "b6025269-a974-45a6-9b85-8a08f1057d6a",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1df19e64-ad53-4f98-974b-53c7bc0ae5c7",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d5a44166-8352-46cd-9e09-8b494ffeff59",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "1df19e64-ad53-4f98-974b-53c7bc0ae5c7",
                                  "d5a44166-8352-46cd-9e09-8b494ffeff59"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "52b89b6d-b056-4dc9-b312-7bd7926243c2",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "946a89b0-6408-4f35-9bb0-9626c0cc5c08",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "cc001be5-4e9b-4a83-b7ae-334a0e406b70",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "946a89b0-6408-4f35-9bb0-9626c0cc5c08",
                                  "cc001be5-4e9b-4a83-b7ae-334a0e406b70"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 19,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "f5334089-3436-464f-acc6-5c60b7560695",
                            "title": "`y` is a thenable that tries to fulfill twice for an eventually-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "612382f0-88ec-4e0b-9d2b-040bf7fcff64",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 57,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b77058aa-3aad-4e48-9f49-f2cb56ad6c16",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2cd6a953-d80d-4bc8-b5c6-5d88ed75f48a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "b77058aa-3aad-4e48-9f49-f2cb56ad6c16",
                                  "2cd6a953-d80d-4bc8-b5c6-5d88ed75f48a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 116,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "5314c3f1-9002-433e-8759-020bc32d135a",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "92d41560-f1dc-4bbe-8ad7-0837647c9ff4",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "218795c0-87fc-433d-ae08-3ba9ec615fb7",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "92d41560-f1dc-4bbe-8ad7-0837647c9ff4",
                                  "218795c0-87fc-433d-ae08-3ba9ec615fb7"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 122,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "a4e824b0-bbaa-40d5-8883-27feefbdaa78",
                            "title": "`y` is a thenable that tries to fulfill twice for a synchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "02d709c8-8b54-4a77-b66a-895441203d53",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d80f190e-3e28-4b11-84c3-6bbc438858d1",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8a185dcc-e9ec-40af-a24f-01da32e607d7",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "d80f190e-3e28-4b11-84c3-6bbc438858d1",
                                  "8a185dcc-e9ec-40af-a24f-01da32e607d7"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "7769a003-6587-4f3c-9f58-057388a01da8",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "db7a14bf-c1fa-4afc-b80b-33acdb2eb3ce",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b1f82986-8124-4e18-8510-2f2f7bebd23a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "db7a14bf-c1fa-4afc-b80b-33acdb2eb3ce",
                                  "b1f82986-8124-4e18-8510-2f2f7bebd23a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "6ef30b41-5617-4b86-b072-e80cf0c65ff2",
                            "title": "`y` is a thenable that tries to fulfill twice for an asynchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "1cd4ecb4-4d86-4e57-b45e-005625c349b1",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5c376b81-1605-4d39-9c3b-d5fd2a7e3510",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "fc96f29b-b60a-49a7-966b-b8bb2da3c857",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "5c376b81-1605-4d39-9c3b-d5fd2a7e3510",
                                  "fc96f29b-b60a-49a7-966b-b8bb2da3c857"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "907b6595-26b4-485b-82a6-327b808e6dff",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8a661d0d-735c-4142-98c7-5416963f0336",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e0a55749-848d-4586-a1ca-49f82dc0a384",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "8a661d0d-735c-4142-98c7-5416963f0336",
                                  "e0a55749-848d-4586-a1ca-49f82dc0a384"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "7e00c075-b73b-446b-a677-d7dd39f9e669",
                            "title": "`y` is a thenable that tries to fulfill twice for a synchronously-rejected one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "d3daa9a9-a163-4dbb-9c66-c581f64b3815",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d33edc2f-5396-4898-9801-e37f475ced0b",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "95ed461b-148f-44f6-8320-99be1d49c560",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "d33edc2f-5396-4898-9801-e37f475ced0b",
                                  "95ed461b-148f-44f6-8320-99be1d49c560"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 10,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "e8564c5c-6da4-42cb-a77c-5d10e6b69320",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6ffdc3af-1e52-4c93-9e8c-e3b6cb4e25ec",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6a2c5bcc-6efc-485c-bad7-331c2eebb279",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "6ffdc3af-1e52-4c93-9e8c-e3b6cb4e25ec",
                                  "6a2c5bcc-6efc-485c-bad7-331c2eebb279"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "a47c53cc-a8ed-483d-a2e0-cbe3f89b5fb7",
                            "title": "`y` is a thenable that tries to fulfill twice for a thenable that immediately throws in `then`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "e417c4b8-9328-442b-95d7-ad344937fefb",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1419d43a-70c8-4555-9acb-79f63145d870",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "790bd593-5db3-4167-ab2d-d3103dc9f84a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "1419d43a-70c8-4555-9acb-79f63145d870",
                                  "790bd593-5db3-4167-ab2d-d3103dc9f84a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 10,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "a69f7234-4abf-46a0-83ae-df4fd1f99da0",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6d2ebd8c-1d21-4f1e-98a2-83d04ae404e5",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "38336920-59d6-4269-aab9-99f62ea2d975",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "6d2ebd8c-1d21-4f1e-98a2-83d04ae404e5",
                                  "38336920-59d6-4269-aab9-99f62ea2d975"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "b5a393e6-1ff8-4adf-b1cf-8db2c6f72394",
                            "title": "`y` is a thenable that tries to fulfill twice for an object with a throwing `then` accessor",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "b9b7bb80-0cfc-4456-bf02-9fb6f4025d92",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f3c90770-5e16-4f1f-a21f-8ac33604dd85",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "13efb9cf-652b-488f-8072-07be8a08f8a9",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "f3c90770-5e16-4f1f-a21f-8ac33604dd85",
                                  "13efb9cf-652b-488f-8072-07be8a08f8a9"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 10,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "dc1a291e-f992-43b7-b427-484c53eb24a9",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6c1bbb12-f89c-4483-b644-b586afabfb04",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0d275cb3-f5e3-4bcc-a440-8beec1d318ac",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "6c1bbb12-f89c-4483-b644-b586afabfb04",
                                  "0d275cb3-f5e3-4bcc-a440-8beec1d318ac"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "7defba54-779e-40c6-aa26-62680ff1341a",
                            "title": "`y` is a thenable that tries to fulfill twice for an already-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "33100960-b7be-4a81-bdca-972e706574d8",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "be0aaf63-841d-4d7a-8dc8-45e7553ff41f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a402f71a-f42e-457e-9831-29f6ca339b5a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "be0aaf63-841d-4d7a-8dc8-45e7553ff41f",
                                  "a402f71a-f42e-457e-9831-29f6ca339b5a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "99ba9e3c-9d75-4799-8855-9c3792bb57fc",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "231ecdab-f06e-43d0-bd08-9157cc755263",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "03bb6894-1ad1-497b-a7cc-fa3d988b0313",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "231ecdab-f06e-43d0-bd08-9157cc755263",
                                  "03bb6894-1ad1-497b-a7cc-fa3d988b0313"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 20,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "62ca0a5d-bc01-4371-a735-5e67025314a5",
                            "title": "`y` is a thenable that tries to fulfill twice for an eventually-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "e5c82579-55d4-47ca-8276-2bb665aa51ab",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 58,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "489b5d68-90c1-4a46-8e3e-9c76ae0e481f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 57,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c8cadafc-6e1e-4fd9-91a7-6f89ee25c451",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "489b5d68-90c1-4a46-8e3e-9c76ae0e481f",
                                  "c8cadafc-6e1e-4fd9-91a7-6f89ee25c451"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 115,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "f3dd3511-784e-4088-a627-5dbcb5735235",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0d3e7242-8426-4c2e-a29f-199001b38425",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9b53c7c5-33cd-48a1-91e4-f0228eca364f",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "0d3e7242-8426-4c2e-a29f-199001b38425",
                                  "9b53c7c5-33cd-48a1-91e4-f0228eca364f"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 121,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "374c170b-d5c1-48c7-b70c-6636c88b3f50",
                            "title": "`y` is a thenable that fulfills but then throws for a synchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "f043f5fd-64fd-4460-91da-849b0ded93ea",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "52b25347-5af9-4cf2-84de-22cd6c15b71c",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "eb00a281-dd42-461e-8059-0ac2f4b0de13",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "52b25347-5af9-4cf2-84de-22cd6c15b71c",
                                  "eb00a281-dd42-461e-8059-0ac2f4b0de13"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "3663d6a5-e1a3-4cc8-b656-585240f92e57",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0c1acda3-a840-4cdd-8f6c-3a58167d8404",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e7834a37-26c3-45b8-8f1a-f6fd589dbd76",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "0c1acda3-a840-4cdd-8f6c-3a58167d8404",
                                  "e7834a37-26c3-45b8-8f1a-f6fd589dbd76"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "e6010b8f-4124-4dad-89b9-f4f0977ea7a6",
                            "title": "`y` is a thenable that fulfills but then throws for an asynchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "b385cc91-9be5-4500-8902-f3f86baaf850",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8c60a29f-0fe6-4110-91cb-8820ab4afcff",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ba3a71fe-0874-4dc2-a6ec-477286016b5b",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "8c60a29f-0fe6-4110-91cb-8820ab4afcff",
                                  "ba3a71fe-0874-4dc2-a6ec-477286016b5b"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "1cdfcb37-263f-4a17-a549-c93e620bb1e5",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a4350870-5927-44db-a52d-74a29c7f44c9",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "38153c23-2f0f-4ffe-a38d-042ae73fa588",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "a4350870-5927-44db-a52d-74a29c7f44c9",
                                  "38153c23-2f0f-4ffe-a38d-042ae73fa588"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "c31d69d6-a739-42cc-b698-fe3ed1a96d17",
                            "title": "`y` is a thenable that fulfills but then throws for a synchronously-fulfilled one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "83c76447-2739-458c-872d-c20940d7c489",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "155e5268-3c39-4f7f-bca3-0efe2d416fcd",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "8bf83d29-cf53-4d30-b94e-cb250772559d",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "155e5268-3c39-4f7f-bca3-0efe2d416fcd",
                                  "8bf83d29-cf53-4d30-b94e-cb250772559d"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 10,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "22ea747b-d5d0-4355-9c67-904181c716a4",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d85d89a9-f340-47f5-96a4-112f8bc8ea38",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5a95a818-75b0-4c5f-8921-cef3e3291a54",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "d85d89a9-f340-47f5-96a4-112f8bc8ea38",
                                  "5a95a818-75b0-4c5f-8921-cef3e3291a54"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "7562c1bc-9fb0-4c20-8dd7-be32d9922335",
                            "title": "`y` is a thenable that fulfills but then throws for a thenable that tries to fulfill twice",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "72a89650-eeb6-46d8-8f2d-8c168b770f66",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ece8c608-f1a9-4850-93f1-ebfa4c9bbd72",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a119fc87-061c-4a24-969f-71d9ca2cc529",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ece8c608-f1a9-4850-93f1-ebfa4c9bbd72",
                                  "a119fc87-061c-4a24-969f-71d9ca2cc529"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 10,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "f73f97e2-90d6-46f7-a271-8a3f03b9c78f",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e341a4bc-74f8-42be-b4d8-71d0522a737c",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "70055228-f950-4ba5-b3a8-fa2ab21967b3",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "e341a4bc-74f8-42be-b4d8-71d0522a737c",
                                  "70055228-f950-4ba5-b3a8-fa2ab21967b3"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "ae0f91b1-379b-47bc-a44b-278bf8ea4bf4",
                            "title": "`y` is a thenable that fulfills but then throws for a thenable that fulfills but then throws",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "624563c7-cc48-4241-8d8f-c3687df20fad",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5e2bffcb-6054-4a73-8aed-3b28306719c4",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "07edcff9-dbda-40af-95f7-ec31043a9e2f",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "5e2bffcb-6054-4a73-8aed-3b28306719c4",
                                  "07edcff9-dbda-40af-95f7-ec31043a9e2f"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "7180d577-374e-4d9d-8b39-5ca928c168d7",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "cd1afcc2-e4aa-4d7f-9d4e-07d36f8178da",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "229127a2-eb20-404d-81ef-e19132ab3d99",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "cd1afcc2-e4aa-4d7f-9d4e-07d36f8178da",
                                  "229127a2-eb20-404d-81ef-e19132ab3d99"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "6bad76bb-6ba1-4fbc-860d-d3a7276e7b97",
                            "title": "`y` is a thenable that fulfills but then throws for an already-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "c065c444-60c0-4e7d-bdc6-f91c0b9f0d80",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "59462042-bf5f-4adb-a46b-95adae690949",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3da7f5fb-7ef3-4bf3-be3f-58753b9cab79",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "59462042-bf5f-4adb-a46b-95adae690949",
                                  "3da7f5fb-7ef3-4bf3-be3f-58753b9cab79"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "94d25e94-8a6b-4538-9f0b-669b73024831",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c246cfb4-4f72-4418-8ea1-aba451776ab1",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e840db42-a288-4d55-a735-9a6e10d4e7f2",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "c246cfb4-4f72-4418-8ea1-aba451776ab1",
                                  "e840db42-a288-4d55-a735-9a6e10d4e7f2"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "d0b59fce-f28c-4f57-84ef-9a5a8f6a1a58",
                            "title": "`y` is a thenable that fulfills but then throws for an eventually-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "b2b03b37-5236-4159-b411-b8e6450ea447",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "218d133a-5a03-421f-a8d9-316317188d0e",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1912e993-36e3-4e47-9f34-d477387ce5ae",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "218d133a-5a03-421f-a8d9-316317188d0e",
                                  "1912e993-36e3-4e47-9f34-d477387ce5ae"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 121,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "166b0209-a855-4174-b51c-b6bffc715055",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0da4548a-644b-4065-a7eb-ba5059521487",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "88d86c60-1e6c-4099-b427-d62024558f2f",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "0da4548a-644b-4065-a7eb-ba5059521487",
                                  "88d86c60-1e6c-4099-b427-d62024558f2f"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 120,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "45f03966-45ea-461e-93af-e3072b120b02",
                            "title": "`y` is a thenable that fulfills but then throws for a synchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "830275b5-18ad-4649-962f-42b3348ce8de",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "03eb4b6e-1523-42ba-a10a-aecbdbfae4d8",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 4,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9673129a-84fa-4ee2-942c-a0cdda36fcaf",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "03eb4b6e-1523-42ba-a10a-aecbdbfae4d8",
                                  "9673129a-84fa-4ee2-942c-a0cdda36fcaf"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 9,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "3a9af843-539e-49a0-ae15-80b5e3532ff8",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "97f3bb5b-6af8-49f4-a18c-9ecf82022953",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "db78da2f-34c6-42ae-8275-28506ca972fb",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "97f3bb5b-6af8-49f4-a18c-9ecf82022953",
                                  "db78da2f-34c6-42ae-8275-28506ca972fb"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "a47195fe-d3c7-4fbd-930a-899402ee4673",
                            "title": "`y` is a thenable that fulfills but then throws for an asynchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "dda96360-b504-4f10-bed7-0a0d4a94c822",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a7260245-7b78-4f93-88b0-a5addbc2ca9c",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3c536f64-a0ea-4107-84bc-67a116c3f4e6",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "a7260245-7b78-4f93-88b0-a5addbc2ca9c",
                                  "3c536f64-a0ea-4107-84bc-67a116c3f4e6"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 16,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "c44b30f0-5288-439b-8332-eac3a93bd4c3",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0a43e69c-c186-4472-83ec-70e59b4b27ba",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2ed0bedd-487c-421b-ab6b-f4cbc915375e",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "0a43e69c-c186-4472-83ec-70e59b4b27ba",
                                  "2ed0bedd-487c-421b-ab6b-f4cbc915375e"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "6844286f-1a58-4bdd-bc29-c462211b7144",
                            "title": "`y` is a thenable that fulfills but then throws for a synchronously-rejected one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "057de3c3-fb1c-455a-a60c-c13a5a555fff",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c43583bf-f48f-45e8-9b9b-2c570d3ab4b3",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "cdbc4fc1-8f18-472d-8ac4-057bc813b203",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "c43583bf-f48f-45e8-9b9b-2c570d3ab4b3",
                                  "cdbc4fc1-8f18-472d-8ac4-057bc813b203"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "52c8270b-faf4-4e71-b61f-35501cd480af",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1d11a8f5-8689-4894-a52c-00e47e9ba81f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a8980743-d3eb-47a8-bd84-b0d630cba325",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "1d11a8f5-8689-4894-a52c-00e47e9ba81f",
                                  "a8980743-d3eb-47a8-bd84-b0d630cba325"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "cf54faac-c1b5-4d33-b110-d57f146bef12",
                            "title": "`y` is a thenable that fulfills but then throws for a thenable that immediately throws in `then`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "b7b09f70-0501-411d-bac0-a19f4e545efa",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "73630c56-9dfa-4a7f-9fd8-a09c7e0666d2",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7bfa773c-e2ed-4e1b-ab68-133f5d9eb7ff",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "73630c56-9dfa-4a7f-9fd8-a09c7e0666d2",
                                  "7bfa773c-e2ed-4e1b-ab68-133f5d9eb7ff"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "27fae444-a2bb-46fa-8e60-d08a7266636e",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "24afa4a4-a94d-49bc-9416-583ce76e1c28",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "867b7d88-1033-4206-8c0e-e54f71e457fa",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "24afa4a4-a94d-49bc-9416-583ce76e1c28",
                                  "867b7d88-1033-4206-8c0e-e54f71e457fa"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "873c1e27-73ee-437e-83a8-e355047b5d52",
                            "title": "`y` is a thenable that fulfills but then throws for an object with a throwing `then` accessor",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "b4360838-128d-4b8b-83c4-11ed799553f5",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "33890ba7-3677-4ea7-9a2e-8316c013d803",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b8cdd314-88ae-409e-8227-75007b56546c",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "33890ba7-3677-4ea7-9a2e-8316c013d803",
                                  "b8cdd314-88ae-409e-8227-75007b56546c"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "b69dea75-fa54-41da-ae34-a9444aa91254",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "925ea508-2991-4b56-99d6-666b9ad89728",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d163e3d2-58c4-4c64-b66d-19ba827b6bbf",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "925ea508-2991-4b56-99d6-666b9ad89728",
                                  "d163e3d2-58c4-4c64-b66d-19ba827b6bbf"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "ffebe474-4d9c-44e5-a863-982598689522",
                            "title": "`y` is a thenable that fulfills but then throws for an already-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "e60778fd-1844-4467-8b6d-edd10411325b",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6e412521-cf7f-4c43-859f-2aa73c99a385",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "238f9083-9a8b-4db4-bd0b-51c03ecb8b5a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "6e412521-cf7f-4c43-859f-2aa73c99a385",
                                  "238f9083-9a8b-4db4-bd0b-51c03ecb8b5a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "7f408013-e06c-44e7-91f5-bee90a19e2d2",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "24b7ad48-d248-4329-ad4c-1a03de17cbe0",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "cee28d0f-23e3-476c-a7da-41b3066b3f9b",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "24b7ad48-d248-4329-ad4c-1a03de17cbe0",
                                  "cee28d0f-23e3-476c-a7da-41b3066b3f9b"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "cc30323d-d3f8-4496-808d-d1101128a10d",
                            "title": "`y` is a thenable that fulfills but then throws for an eventually-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "b42de91d-7b2b-4ec4-a013-d81c5fbacf54",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "895c4cd0-ac28-4ddb-a070-5c35b594b32a",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d52b857a-bdbe-4b32-b859-d0d33b12a4aa",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "895c4cd0-ac28-4ddb-a070-5c35b594b32a",
                                  "d52b857a-bdbe-4b32-b859-d0d33b12a4aa"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 121,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "f7fdaa1a-5bf8-4bcc-a426-d030f5de4781",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1033c170-ddad-404e-a405-52479427bdf9",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0284af1c-5c7d-45f6-9347-709c08aa1756",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "1033c170-ddad-404e-a405-52479427bdf9",
                                  "0284af1c-5c7d-45f6-9347-709c08aa1756"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 121,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "2d806710-7276-4dff-8976-c988a84967d2",
                            "title": "`y` is an already-fulfilled promise for a synchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "1ba2812e-ea37-4008-900c-64d733efa044",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0434d129-957b-409f-9f07-865d73955e80",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "45751a9f-6bd2-4d89-b1a7-d619ccf6a84a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "0434d129-957b-409f-9f07-865d73955e80",
                                  "45751a9f-6bd2-4d89-b1a7-d619ccf6a84a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "bebd4f61-eb8c-4acc-a4b1-0be1844b4516",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1bd69106-a5b4-440d-8617-c53c975fd404",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f81a41bf-77e2-4dab-ba6e-8db0a0059e91",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "1bd69106-a5b4-440d-8617-c53c975fd404",
                                  "f81a41bf-77e2-4dab-ba6e-8db0a0059e91"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 19,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "7bc231ed-c0ce-4339-bb32-0e210b37b6ce",
                            "title": "`y` is an already-fulfilled promise for an asynchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "9e4f84c4-9924-4c87-998e-014850438d3a",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d6106e6a-bca8-416c-8714-095bf43cd2ff",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "11d51631-7478-438e-afef-c88d8d6d61ae",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "d6106e6a-bca8-416c-8714-095bf43cd2ff",
                                  "11d51631-7478-438e-afef-c88d8d6d61ae"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 20,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "fe1328c4-a76c-4427-8eaa-045465056831",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5bc2f9ed-df21-444e-a290-3d5e872db66a",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "34797942-0026-4001-9c3c-77a419f9cc49",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "5bc2f9ed-df21-444e-a290-3d5e872db66a",
                                  "34797942-0026-4001-9c3c-77a419f9cc49"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 23,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "4716cc93-557d-4142-8071-e5b854e9dc1c",
                            "title": "`y` is an already-fulfilled promise for a synchronously-fulfilled one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "e61ba16d-810e-4ec7-86f3-23cfff902655",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "573d4e0f-b454-44b7-abf3-e0e64edd821d",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ca379361-3aa2-4b0c-8b09-92ffa7edaf52",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "573d4e0f-b454-44b7-abf3-e0e64edd821d",
                                  "ca379361-3aa2-4b0c-8b09-92ffa7edaf52"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "04140a03-52c3-42b3-9dbb-57175f403e38",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b4a2ac49-6960-49f7-9769-2699e7f0ba5d",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c920517e-598b-479e-9bd6-08cda7477725",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "b4a2ac49-6960-49f7-9769-2699e7f0ba5d",
                                  "c920517e-598b-479e-9bd6-08cda7477725"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 19,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "948268b1-3494-4f20-afe2-6918cb85ada1",
                            "title": "`y` is an already-fulfilled promise for a thenable that tries to fulfill twice",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "86ca3f7c-5fa6-48dd-ab35-5135c45c5523",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "bf0a7e4d-c572-4a70-870f-608982d190c3",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "a66b3128-c114-4770-bb5a-5bf208f969af",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "bf0a7e4d-c572-4a70-870f-608982d190c3",
                                  "a66b3128-c114-4770-bb5a-5bf208f969af"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "8c4df704-4f2c-48e2-9749-8d2e80044bac",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "64d7eb27-3ffd-43ba-8541-845f9fd5407f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "00a4c054-b584-4992-8c9d-8d125830972b",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "64d7eb27-3ffd-43ba-8541-845f9fd5407f",
                                  "00a4c054-b584-4992-8c9d-8d125830972b"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "47fc183d-3491-4594-8b3b-7cd261b597d9",
                            "title": "`y` is an already-fulfilled promise for a thenable that fulfills but then throws",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "8b82460c-e7d4-4083-accf-a0238964208f",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ba6ed852-80d7-4fe3-bea7-9ed7f650ca34",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "eb7b8fd3-83f3-498a-92ca-53699427b9b1",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ba6ed852-80d7-4fe3-bea7-9ed7f650ca34",
                                  "eb7b8fd3-83f3-498a-92ca-53699427b9b1"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "4de7ad1c-ca13-4a31-8cbc-047327e2a4b3",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4e347eb3-f741-4d39-a58d-e98fc3cd3d59",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6052f4a4-b0ce-4980-bb58-81cf276e3c9e",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "4e347eb3-f741-4d39-a58d-e98fc3cd3d59",
                                  "6052f4a4-b0ce-4980-bb58-81cf276e3c9e"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "df4f7016-ccac-4740-9e12-22e1950f0a86",
                            "title": "`y` is an already-fulfilled promise for an already-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "e33b747a-cf74-441d-9413-1eaad8692ab7",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7d27faea-1269-4182-b547-6f65ca8e97f2",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "fc0f4069-d07f-4a56-b768-6c057ae14166",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "7d27faea-1269-4182-b547-6f65ca8e97f2",
                                  "fc0f4069-d07f-4a56-b768-6c057ae14166"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 13,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "224a9798-17f9-48e1-806f-4a7fa82249e7",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "441bb9bb-180e-43f8-a2ad-088fe9f23d10",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "62a0a19e-9697-473a-b190-495f22050b05",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "441bb9bb-180e-43f8-a2ad-088fe9f23d10",
                                  "62a0a19e-9697-473a-b190-495f22050b05"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 19,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "fb89d4f6-efe5-47c2-b534-19e9fe90332d",
                            "title": "`y` is an already-fulfilled promise for an eventually-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "ad17c35f-b136-4512-89e3-37e7f55ec7ce",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c2a4c358-5a05-433a-842b-b6c80dc53872",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 57,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "52ed14c6-5586-4990-8a18-be1d626b090f",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "c2a4c358-5a05-433a-842b-b6c80dc53872",
                                  "52ed14c6-5586-4990-8a18-be1d626b090f"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 117,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "82ca0e3d-69d6-4582-a69c-12c1e92e0caf",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "3a871328-c8e0-451b-86aa-35193e691063",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4711c6f3-8bb4-4f91-9fa9-be7d4eb97285",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "3a871328-c8e0-451b-86aa-35193e691063",
                                  "4711c6f3-8bb4-4f91-9fa9-be7d4eb97285"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 124,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "6c2c703e-9162-4cdd-8fcb-7af33592d634",
                            "title": "`y` is an already-fulfilled promise for a synchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "38a9541f-ecd4-408f-96bc-d6905fc25736",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 5,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "babb5164-e304-4113-8f9d-d1c84aeb0c07",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "64a2a6e3-8622-4bde-a0be-0d5d6ec61474",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "babb5164-e304-4113-8f9d-d1c84aeb0c07",
                                  "64a2a6e3-8622-4bde-a0be-0d5d6ec61474"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 11,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "4d15a4d7-fded-42d9-b67c-1b7ab1f90eb7",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "01dbf259-ae31-4bf3-ae94-3744e1c737be",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 10,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2c751726-b571-46ed-b8f8-0edefceb4bf9",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "01dbf259-ae31-4bf3-ae94-3744e1c737be",
                                  "2c751726-b571-46ed-b8f8-0edefceb4bf9"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 19,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "ef43b863-6322-48cf-83ce-25e3b4f2844e",
                            "title": "`y` is an already-fulfilled promise for an asynchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "5c8e2563-413c-49d3-8a46-6fc28387d868",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 11,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c4b5bc1e-49e3-4a70-8659-8cd9eced59ad",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 12,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "0a0043a7-8a0f-4bf0-b7ca-80f92bf1067f",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "c4b5bc1e-49e3-4a70-8659-8cd9eced59ad",
                                  "0a0043a7-8a0f-4bf0-b7ca-80f92bf1067f"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 23,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "3a48196c-cbee-4417-8025-68cf658b99dd",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 13,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "dbce0877-bae8-4414-8490-ea7033a53acc",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 14,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ab665e18-270f-48db-9bb7-89f4807fc6d5",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "dbce0877-bae8-4414-8490-ea7033a53acc",
                                  "ab665e18-270f-48db-9bb7-89f4807fc6d5"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 27,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "5d865376-501b-4dd5-9e78-022057b070ac",
                            "title": "`y` is an already-fulfilled promise for a synchronously-rejected one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "4cc50720-c57e-4881-8e23-a57c7b3f62c2",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ff069d8d-454b-4d55-8fe4-46223c67d153",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "815c9899-f2d8-4f6c-905c-bb38d26fe2b4",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ff069d8d-454b-4d55-8fe4-46223c67d153",
                                  "815c9899-f2d8-4f6c-905c-bb38d26fe2b4"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "6efb09b5-9395-4379-a4e9-ad12d6497553",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "09c96af9-e161-4d69-928e-3d3caceb1c41",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d4874e07-77ce-4100-a491-a76d0c7e1033",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "09c96af9-e161-4d69-928e-3d3caceb1c41",
                                  "d4874e07-77ce-4100-a491-a76d0c7e1033"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "bfe0c518-7481-4a3c-ac75-96bbfd270c1b",
                            "title": "`y` is an already-fulfilled promise for a thenable that immediately throws in `then`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "23ff3cac-453d-4090-a372-37a5b6c899d4",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1a238901-6435-459f-8499-9f4ee9ebf1a5",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7a729ad6-1f82-486e-ba2d-0a75bcbbfb91",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "1a238901-6435-459f-8499-9f4ee9ebf1a5",
                                  "7a729ad6-1f82-486e-ba2d-0a75bcbbfb91"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 15,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "44e5c96a-0f17-4418-86a3-6d21e8aab9d1",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "049b9c2e-04f2-4674-a611-842912598cc7",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "23a789da-e2cd-4312-b6cd-82e8ef3698b1",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "049b9c2e-04f2-4674-a611-842912598cc7",
                                  "23a789da-e2cd-4312-b6cd-82e8ef3698b1"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "96e7b2c1-9b8f-4c0b-894a-83058c91ca7b",
                            "title": "`y` is an already-fulfilled promise for an object with a throwing `then` accessor",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "c7fced48-9bf9-4d7f-8e78-2cfd5fe7be88",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5bbe29d3-1b05-4226-a4fb-9a76a192a55f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 7,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9042a5d3-45e0-4326-bb7e-df7432e1aa4e",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "5bbe29d3-1b05-4226-a4fb-9a76a192a55f",
                                  "9042a5d3-45e0-4326-bb7e-df7432e1aa4e"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 14,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "f13a32f3-65d4-4d7e-8c75-edac57ff133a",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 8,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f6cb3f2b-2b60-4b65-ba3c-9a616e424d8b",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "345305bb-931d-4aa1-bdf7-bf0b0a9f90c2",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "f6cb3f2b-2b60-4b65-ba3c-9a616e424d8b",
                                  "345305bb-931d-4aa1-bdf7-bf0b0a9f90c2"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 17,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "c93dc152-09a0-4001-a7ca-9aac3bb00cbe",
                            "title": "`y` is an already-fulfilled promise for an already-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "a6d4be8b-e922-4fae-bc28-559ee22e13a6",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9c490334-50ed-4c12-8f99-f63011b7680a",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 6,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4130fdb7-3683-4f2a-b5b1-cc4240a1898e",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "9c490334-50ed-4c12-8f99-f63011b7680a",
                                  "4130fdb7-3683-4f2a-b5b1-cc4240a1898e"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 12,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "bd8e9f7a-8de1-4613-9622-9cba43529f8e",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "68ed03cd-9d9e-41e9-bc2a-69404384d800",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 9,
                                    "state": "passed",
                                    "speed": "fast",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "413fe51f-64b3-4fe5-a62f-0b4f696946c8",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "68ed03cd-9d9e-41e9-bc2a-69404384d800",
                                  "413fe51f-64b3-4fe5-a62f-0b4f696946c8"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 18,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "4b1529bc-f750-41c3-a36f-ca086d9e21fb",
                            "title": "`y` is an already-fulfilled promise for an eventually-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "46b3d824-7b7f-46f5-aa9a-324778c7ec76",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6ec581da-7cb4-4938-beb7-1d05139b6269",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "942bde12-4bdf-4ca6-b5f4-2dfa74afb321",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "6ec581da-7cb4-4938-beb7-1d05139b6269",
                                  "942bde12-4bdf-4ca6-b5f4-2dfa74afb321"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 120,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "14150084-83f0-42a5-b68d-705887df56f4",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "96808b40-f9fe-4237-a925-b2398dd1d800",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4412d068-db50-454b-bd24-206e9127358f",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "96808b40-f9fe-4237-a925-b2398dd1d800",
                                  "4412d068-db50-454b-bd24-206e9127358f"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 121,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "3fb6df0d-200a-4a3d-b45f-58a883900f3e",
                            "title": "`y` is an eventually-fulfilled promise for a synchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "3231961f-49bf-4c7c-96bb-c5506d989692",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "915dfa6c-907a-4c6e-aa2f-7f5e1d154c61",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "fc1bad0d-25cf-4302-864b-e83fe8694f5a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "915dfa6c-907a-4c6e-aa2f-7f5e1d154c61",
                                  "fc1bad0d-25cf-4302-864b-e83fe8694f5a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 118,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "10f312d1-7db5-45f2-aa32-df91dd8ac87a",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2e2d940a-afd4-447f-bf75-2b80b5239c1d",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "97e98f22-18be-4398-a3b7-d8e6b97e0a47",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "2e2d940a-afd4-447f-bf75-2b80b5239c1d",
                                  "97e98f22-18be-4398-a3b7-d8e6b97e0a47"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 121,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "abbd3e85-16e4-4f68-8626-62423826f2e4",
                            "title": "`y` is an eventually-fulfilled promise for an asynchronously-fulfilled custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "37dc6492-a6f1-442c-b4f6-fe71316f3b3d",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "7c000bb6-d8aa-4137-afb2-4eb4b9f6fe25",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9e775aa5-3f36-4ef5-8c0f-96521eab5087",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "7c000bb6-d8aa-4137-afb2-4eb4b9f6fe25",
                                  "9e775aa5-3f36-4ef5-8c0f-96521eab5087"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 118,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "5f0868a0-0a41-4048-b7f6-90f16527b82d",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 64,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c70f0ae7-c1fa-4e53-b66e-484131dbb3f9",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "259bfb43-39a2-49ff-9e93-1aead1463028",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "c70f0ae7-c1fa-4e53-b66e-484131dbb3f9",
                                  "259bfb43-39a2-49ff-9e93-1aead1463028"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 126,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "93a8aa0a-a10e-43f3-89a2-8576527089b2",
                            "title": "`y` is an eventually-fulfilled promise for a synchronously-fulfilled one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "3687daa0-07f6-49aa-9de9-6600d10dbffc",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2e23a9b3-3c86-406e-90c8-cc5f0c75f263",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1407064e-30e9-42ce-afbd-89eb494562c9",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "2e23a9b3-3c86-406e-90c8-cc5f0c75f263",
                                  "1407064e-30e9-42ce-afbd-89eb494562c9"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 119,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "e09bf24d-cc5a-48e4-8d24-b74d8e970868",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "20eefaa1-a230-480e-982c-4c12d2f31bdc",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "069ada91-70ab-4b99-973f-4b1023e75e0a",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "20eefaa1-a230-480e-982c-4c12d2f31bdc",
                                  "069ada91-70ab-4b99-973f-4b1023e75e0a"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 121,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "5dc4a5a8-dbd1-47e9-8491-22e280dd141f",
                            "title": "`y` is an eventually-fulfilled promise for a thenable that tries to fulfill twice",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "789ec92d-f905-4221-af4e-f78d0f31c4be",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e6dca3c3-2989-4001-a8f8-92dc170ee68f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 58,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "21a97541-6d04-47b2-a588-ec5c8724dbe6",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "e6dca3c3-2989-4001-a8f8-92dc170ee68f",
                                  "21a97541-6d04-47b2-a588-ec5c8724dbe6"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 117,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "d05500b0-db89-41ac-b86a-e6c09c22506a",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "83b17e46-eba4-4b99-ab30-978a9e9c46a3",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "21801daf-b1cf-4f44-9533-1233ea8a5721",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "83b17e46-eba4-4b99-ab30-978a9e9c46a3",
                                  "21801daf-b1cf-4f44-9533-1233ea8a5721"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 123,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "e4ce5260-8f03-44b3-9f62-4e69451a9547",
                            "title": "`y` is an eventually-fulfilled promise for a thenable that fulfills but then throws",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "64833864-500c-4e35-9e5b-3ccd2a47b823",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2acabc79-0f36-4733-b471-3079ec20673b",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "690bbca3-0bac-42a2-b0c8-4c9404b1d17b",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "2acabc79-0f36-4733-b471-3079ec20673b",
                                  "690bbca3-0bac-42a2-b0c8-4c9404b1d17b"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 119,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "eee24cf3-84bc-4efb-bc84-8c3abd246d23",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "648b1af1-108e-40b3-80f0-893f75d94413",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "f1741ed0-c96e-4792-9605-9983b96a3b57",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "648b1af1-108e-40b3-80f0-893f75d94413",
                                  "f1741ed0-c96e-4792-9605-9983b96a3b57"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 122,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "83ad49ae-76d9-497d-b24c-ad561771d928",
                            "title": "`y` is an eventually-fulfilled promise for an already-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "9fa0edf9-4cd5-4e42-859a-3c0cb4c54fe2",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6a8fe958-a5cc-4397-aa30-7f495f90769c",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 64,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e44cf2a3-3fa3-4b83-9ec4-c9b8f2c32fe3",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "6a8fe958-a5cc-4397-aa30-7f495f90769c",
                                  "e44cf2a3-3fa3-4b83-9ec4-c9b8f2c32fe3"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 125,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "3f5e3f2d-6cf4-432b-8ff3-0f7e1be18a7b",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ca7d333f-a038-4336-9a51-9d785dd0aa64",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "486ba26c-bce7-4c37-9873-41b1fe10dc86",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ca7d333f-a038-4336-9a51-9d785dd0aa64",
                                  "486ba26c-bce7-4c37-9873-41b1fe10dc86"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 124,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "609de66e-6865-4545-94b6-b6570f733642",
                            "title": "`y` is an eventually-fulfilled promise for an eventually-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "90b0c57f-1251-42a3-a20d-d2f3763180b2",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c9b1f9e5-6191-41ac-9571-4f8f1f43ba05",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b2bc80a6-b960-4c4c-886a-0a20c500d156",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "c9b1f9e5-6191-41ac-9571-4f8f1f43ba05",
                                  "b2bc80a6-b960-4c4c-886a-0a20c500d156"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 124,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "ba63578f-5081-4838-b4ae-ce032fcae0c9",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 64,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5767fdb6-c988-4833-a332-ed1e5075ce84",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "87108e18-360c-4071-be0e-68bd96a89a8d",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "5767fdb6-c988-4833-a332-ed1e5075ce84",
                                  "87108e18-360c-4071-be0e-68bd96a89a8d"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 127,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "45f7daf8-cbe3-45c8-9664-0b78977bde8d",
                            "title": "`y` is an eventually-fulfilled promise for a synchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "13082ebf-f2b8-47ed-bf8a-eec2d88020a1",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1ff001d5-97e0-47c2-80fb-c0954281c620",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 58,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "cdd62007-630d-4874-9c1b-792920d70b6d",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "1ff001d5-97e0-47c2-80fb-c0954281c620",
                                  "cdd62007-630d-4874-9c1b-792920d70b6d"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 119,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "6e1782e5-fab3-4f4e-9359-377ec3863295",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b1811875-7675-4292-9995-b1206d779801",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5c6fc2f3-f141-4101-af29-0b9d3dc10c00",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "b1811875-7675-4292-9995-b1206d779801",
                                  "5c6fc2f3-f141-4101-af29-0b9d3dc10c00"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 122,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "fd4a689b-7b10-4f2c-bb43-9dee45962f3e",
                            "title": "`y` is an eventually-fulfilled promise for an asynchronously-rejected custom thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "75d941f5-7559-4f96-8b2b-5d728d5a6cd5",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "818f30f1-3b46-4b09-86bf-266f442cb019",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "d27ab314-934e-4a4e-b2e5-a7a529bf349e",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "818f30f1-3b46-4b09-86bf-266f442cb019",
                                  "d27ab314-934e-4a4e-b2e5-a7a529bf349e"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 120,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "0bd20b11-1a42-490b-92ca-8a5458df2a5d",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "bad7222b-7855-42ff-833e-4db97208728f",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "2eb1c04c-34d5-4fdf-a849-752ae8429cc3",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "bad7222b-7855-42ff-833e-4db97208728f",
                                  "2eb1c04c-34d5-4fdf-a849-752ae8429cc3"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 125,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "8026ce1a-cc0a-40af-b510-ff696daf0dfb",
                            "title": "`y` is an eventually-fulfilled promise for a synchronously-rejected one-time thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "1dea9f79-2990-4a4d-be81-c4552fcb0d6e",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "515ebfd5-df21-411f-a798-9cfe86b08e18",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "b8518b18-d456-420f-9cab-16b32dc8b57e",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "515ebfd5-df21-411f-a798-9cfe86b08e18",
                                  "b8518b18-d456-420f-9cab-16b32dc8b57e"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 119,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "53fe072f-d59f-4a4b-bf6d-38558479895f",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1fe3f2ce-de3b-41f3-aa94-18590b9766c0",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 64,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "5c2c7353-92a7-475e-8f0c-39534b29878f",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "1fe3f2ce-de3b-41f3-aa94-18590b9766c0",
                                  "5c2c7353-92a7-475e-8f0c-39534b29878f"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 125,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "786d41ce-6857-4e8c-87f9-e7303d392b28",
                            "title": "`y` is an eventually-fulfilled promise for a thenable that immediately throws in `then`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "ce6b2509-287f-45e5-958c-6bd78bff71d0",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "50c889d4-e0ba-4c83-8856-8bc5a15dcffb",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "4e07c074-328e-45b8-9e83-8cfaa55235c5",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "50c889d4-e0ba-4c83-8856-8bc5a15dcffb",
                                  "4e07c074-328e-45b8-9e83-8cfaa55235c5"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 118,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "eb9925e4-b6d0-465b-aa94-e35e80f19c54",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "bef9af6f-9878-4fe6-80ca-8f5715c6f3c2",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 61,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c9ed50d5-b41f-4dec-a790-f93f23a482db",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "bef9af6f-9878-4fe6-80ca-8f5715c6f3c2",
                                  "c9ed50d5-b41f-4dec-a790-f93f23a482db"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 121,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "e648d09b-b9a5-448c-adc9-2c9974caef33",
                            "title": "`y` is an eventually-fulfilled promise for an object with a throwing `then` accessor",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "dabcf5cf-6811-484c-98fb-026d86507d00",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c659a756-d001-45f5-bce3-8ee0f1e314d1",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 59,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "17764a73-f8e9-4682-b266-abe1315de35e",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "c659a756-d001-45f5-bce3-8ee0f1e314d1",
                                  "17764a73-f8e9-4682-b266-abe1315de35e"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 119,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "f1592554-a127-45c0-a8d5-9a0e3eefc929",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "9f070c5c-a706-45b2-9848-23d63e96a19a",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 60,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1fa7f235-3b54-48b9-bff0-e29058162606",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "9f070c5c-a706-45b2-9848-23d63e96a19a",
                                  "1fa7f235-3b54-48b9-bff0-e29058162606"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 120,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "bdfc274f-e826-426d-8eec-7891911a0b82",
                            "title": "`y` is an eventually-fulfilled promise for an already-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "a654bdd9-5d3e-4de2-90a2-8ecd6e85efdb",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "c2468c6f-9e23-40b4-90d5-7b3f38b094bb",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "1b02af66-972c-4974-8ec3-0235b7b68bd0",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "c2468c6f-9e23-40b4-90d5-7b3f38b094bb",
                                  "1b02af66-972c-4974-8ec3-0235b7b68bd0"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 125,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "46436a79-69f9-41e7-98ac-e356e017cb9c",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "ac2abfbb-8e70-49a0-90a6-95338b738c1d",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "fe24b5b7-4cfd-4a8d-a528-4bac8b57ea6e",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "ac2abfbb-8e70-49a0-90a6-95338b738c1d",
                                  "fe24b5b7-4cfd-4a8d-a528-4bac8b57ea6e"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 125,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "71de20fe-f2e6-45c4-88eb-563a4c9a9229",
                            "title": "`y` is an eventually-fulfilled promise for an eventually-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [],
                            "suites": [
                              {
                                "uuid": "eeabf1ff-77b4-4026-9c0e-1f5be2c8508b",
                                "title": "`then` calls `resolvePromise` synchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 64,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "101af21c-4e2d-4065-852b-99cf790ce793",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "e63a0ce5-0244-466d-98c2-3fd00d0c4713",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "101af21c-4e2d-4065-852b-99cf790ce793",
                                  "e63a0ce5-0244-466d-98c2-3fd00d0c4713"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 126,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              },
                              {
                                "uuid": "e9f4000a-7779-4ad7-b7a4-fc8ad6d07eb0",
                                "title": "`then` calls `resolvePromise` asynchronously",
                                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                                "file": "\\test\\index.js",
                                "beforeHooks": [],
                                "afterHooks": [],
                                "tests": [
                                  {
                                    "title": "via return from a fulfilled promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                    "timedOut": false,
                                    "duration": 63,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "6f6e410e-4db9-40e5-90c2-1df50b711153",
                                    "isHook": false,
                                    "skipped": false
                                  },
                                  {
                                    "title": "via return from a rejected promise",
                                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                    "timedOut": false,
                                    "duration": 62,
                                    "state": "passed",
                                    "speed": "medium",
                                    "pass": true,
                                    "fail": false,
                                    "pending": false,
                                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                    "err": {},
                                    "isRoot": false,
                                    "uuid": "66cd5abc-ab3c-4916-8d4f-28c6e2240a76",
                                    "isHook": false,
                                    "skipped": false
                                  }
                                ],
                                "suites": [],
                                "passes": [
                                  "6f6e410e-4db9-40e5-90c2-1df50b711153",
                                  "66cd5abc-ab3c-4916-8d4f-28c6e2240a76"
                                ],
                                "failures": [],
                                "pending": [],
                                "skipped": [],
                                "duration": 125,
                                "root": false,
                                "rootEmpty": false,
                                "_timeout": 2000
                              }
                            ],
                            "passes": [],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 0,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "06d8cf75-f76f-4b76-9c26-c8714b31cef3",
                    "title": "2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                      {
                        "uuid": "2968f211-77d0-4269-ab2d-7df8b493ff5e",
                        "title": "`r` is `undefined`",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "7b73a43b-b262-411b-a02e-5840ae95e598",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `undefined` `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "b70e44f8-fe78-4dcb-a03d-87becb48cf9a",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `undefined` `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "6b75c70d-ea5a-4e3d-b5f6-eade85c6cfad",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "b70e44f8-fe78-4dcb-a03d-87becb48cf9a",
                              "6b75c70d-ea5a-4e3d-b5f6-eade85c6cfad"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "40fc4021-2b7e-4d14-b4b4-a856fdcdd206",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `undefined` `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "976cce01-d2f5-416e-9a44-fcc202960897",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `undefined` `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "9e17095e-e359-450a-a82b-4959569f6085",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "976cce01-d2f5-416e-9a44-fcc202960897",
                              "9e17095e-e359-450a-a82b-4959569f6085"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "7e5082dd-a585-4fea-9480-16fefbbee71c",
                        "title": "`r` is `null`",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "0224d126-eb15-4c86-a22c-d17e20b1f121",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `null` `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "52b9670a-c045-46f7-ae72-1189de1c1214",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `null` `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "ac14ee83-f6c1-42a8-af67-1a55414fec2f",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "52b9670a-c045-46f7-ae72-1189de1c1214",
                              "ac14ee83-f6c1-42a8-af67-1a55414fec2f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "42b180a5-80c2-4351-a372-9316f7b0ee91",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `null` `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "c38f3c02-3dad-41ab-8297-d5807ca8fb32",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `null` `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "d7376023-0a7e-415c-8ee5-7d90c851cfc3",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "c38f3c02-3dad-41ab-8297-d5807ca8fb32",
                              "d7376023-0a7e-415c-8ee5-7d90c851cfc3"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "3fb02b65-5113-4af6-9c10-1c378c65a90a",
                        "title": "`r` is `false`",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "69df54c4-a094-4a49-ae89-50e57737723d",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `false` `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "f17ca93f-c4a7-4281-9c96-1a0dd2ba3445",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `false` `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "9ffc7c32-fd34-4c44-9413-ab05ab7d44a0",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "f17ca93f-c4a7-4281-9c96-1a0dd2ba3445",
                              "9ffc7c32-fd34-4c44-9413-ab05ab7d44a0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "897eeb5a-c89f-4617-a310-5f845cb7cdd6",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `false` `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "080073c1-abed-4664-be07-022ded56c554",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `false` `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "219b309c-6080-48b5-844a-0504b1aa3b4d",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "080073c1-abed-4664-be07-022ded56c554",
                              "219b309c-6080-48b5-844a-0504b1aa3b4d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "e625f316-7718-4402-a066-1e9631c2427c",
                        "title": "`r` is `0`",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "279981ec-01a0-4ebf-912f-9d586a8b2a70",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `0` `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "548f5a27-def9-4371-8ca0-5a4f933e27f9",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `0` `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "5fe67d1f-85a4-4630-9518-bf3f87c5e9f6",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "548f5a27-def9-4371-8ca0-5a4f933e27f9",
                              "5fe67d1f-85a4-4630-9518-bf3f87c5e9f6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "e2b681bf-c356-478f-90bd-ab6571e1be1f",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `0` `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "6f791302-b371-4686-bfaf-40995e924fd2",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `0` `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "175d7f7d-aee9-4f41-a2fb-9c1d19085938",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "6f791302-b371-4686-bfaf-40995e924fd2",
                              "175d7f7d-aee9-4f41-a2fb-9c1d19085938"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "f4c40f80-7533-49b3-bea1-1b83544e986b",
                        "title": "`r` is an error",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "ea6cd55a-bd7a-45b4-9978-3f1788e0f048",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an error `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "781710c6-5ee8-4cfe-9511-ebc085a9d794",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an error `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "0a39f8f1-918f-469c-baf2-4ff82504944d",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "781710c6-5ee8-4cfe-9511-ebc085a9d794",
                              "0a39f8f1-918f-469c-baf2-4ff82504944d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "5779765d-41b6-4e16-b885-bbee7ba27c55",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an error `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "4a24943b-f656-4d1c-9b44-f6f0b485380d",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an error `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "e699fd98-49ca-4acb-8ea1-259bc06f3621",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "4a24943b-f656-4d1c-9b44-f6f0b485380d",
                              "e699fd98-49ca-4acb-8ea1-259bc06f3621"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "5cad41e4-d024-470b-9ec2-0d473cee8ee3",
                        "title": "`r` is an error without a stack",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "05a64f9e-a244-41d5-a58e-63aca0dd5efc",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an error without a stack `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "a00305f8-b5d3-4796-bbab-f815e751d73f",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an error without a stack `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "cebf5dad-d109-42cf-8dea-90c33931013e",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "a00305f8-b5d3-4796-bbab-f815e751d73f",
                              "cebf5dad-d109-42cf-8dea-90c33931013e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "775d30cf-8b06-4e57-b0d6-86424e4025f5",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an error without a stack `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "9b5c03c4-7a15-49a3-bda6-0dc0967b3ceb",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an error without a stack `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "d1ebd428-e471-4eaf-9716-064f8da0bfe0",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "9b5c03c4-7a15-49a3-bda6-0dc0967b3ceb",
                              "d1ebd428-e471-4eaf-9716-064f8da0bfe0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "1b39b99b-e84d-438f-a355-55da9ffc7ebf",
                        "title": "`r` is a date",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "d3d0602e-f24f-4d5c-8416-1499721b67fb",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a date `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "f8c577c9-96f6-425d-a9b2-921d146c61dc",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a date `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "94ae9ce7-5b30-4a2c-9b5f-b3c923f4e07f",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "f8c577c9-96f6-425d-a9b2-921d146c61dc",
                              "94ae9ce7-5b30-4a2c-9b5f-b3c923f4e07f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "0cf73b97-c6fa-4585-829e-51ebd63719be",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a date `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "05db27fc-776a-48ae-8ae2-79a11781aa7e",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a date `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "253095ef-3a6c-4ab7-ba9e-5006f046278c",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "05db27fc-776a-48ae-8ae2-79a11781aa7e",
                              "253095ef-3a6c-4ab7-ba9e-5006f046278c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "ca965a60-7277-41d0-b700-860be1e802e6",
                        "title": "`r` is an object",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "896050a6-f6c6-428f-a12a-f843d0a57d80",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an object `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "573c459e-acd4-4093-98eb-3282c35678a2",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an object `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "d50cced0-9791-41b5-a065-b04014edb452",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "573c459e-acd4-4093-98eb-3282c35678a2",
                              "d50cced0-9791-41b5-a065-b04014edb452"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "ad11c05b-fe35-407f-ae93-53eef84a0841",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an object `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "0ac8de7c-2cc5-42c1-8329-43f8550535b7",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an object `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "00547e91-7562-40b5-8d01-e27d23360fea",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "0ac8de7c-2cc5-42c1-8329-43f8550535b7",
                              "00547e91-7562-40b5-8d01-e27d23360fea"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "7044c34b-5998-4aa6-a39c-5afa286ee46c",
                        "title": "`r` is an always-pending thenable",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "f72caa45-3c65-4be6-a14b-da3c278647cd",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an always-pending thenable `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "13e3e0e8-1c56-4595-b176-252143f61674",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an always-pending thenable `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "ff9fe933-1b63-4ddb-bb3f-cfa8ed27d63c",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "13e3e0e8-1c56-4595-b176-252143f61674",
                              "ff9fe933-1b63-4ddb-bb3f-cfa8ed27d63c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "0220551f-a0ac-403d-b0a1-24798fd9c7ed",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an always-pending thenable `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "e00dc2cf-2563-4862-974c-b74883cf765b",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an always-pending thenable `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "12d6a24c-ce88-4773-9ae8-ec4133789bfb",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "e00dc2cf-2563-4862-974c-b74883cf765b",
                              "12d6a24c-ce88-4773-9ae8-ec4133789bfb"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "e286b575-9f9c-4b8c-863c-3cd3e7f89170",
                        "title": "`r` is a fulfilled promise",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "5788ab5e-71fa-44d9-b72d-b22425ffaa57",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a fulfilled promise `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "011b5f2b-3a3c-407f-bfbc-2cc52f162b90",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a fulfilled promise `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "cb3dc3af-1b39-4961-a67b-18727d8dfbcc",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "011b5f2b-3a3c-407f-bfbc-2cc52f162b90",
                              "cb3dc3af-1b39-4961-a67b-18727d8dfbcc"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "f1549855-4611-4293-bba5-ecf826ac285e",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a fulfilled promise `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "a3a239f7-3fde-46d7-b8d1-48d294df2b3c",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a fulfilled promise `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "f5ce637d-4085-4d5d-a87c-830fcc77ce3f",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "a3a239f7-3fde-46d7-b8d1-48d294df2b3c",
                              "f5ce637d-4085-4d5d-a87c-830fcc77ce3f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "70b4b6a2-e287-497a-b3ba-d01ed107b52b",
                        "title": "`r` is a rejected promise",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "60ed8df4-3eef-4f0d-9959-91eadfda2a90",
                            "title": "`then` calls `rejectPromise` synchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a rejected promise `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "8983df26-d2e5-4473-97fa-2efc3d93050d",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a rejected promise `then` calls `rejectPromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "be73bc44-2eed-4e15-9bdf-ef853805985e",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "8983df26-d2e5-4473-97fa-2efc3d93050d",
                              "be73bc44-2eed-4e15-9bdf-ef853805985e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "aa97e6a1-484b-462c-9b7e-a030408c0b11",
                            "title": "`then` calls `rejectPromise` asynchronously",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a rejected promise `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "d21dc6c2-ce6e-4bc1-81f2-1eeb313f575e",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a rejected promise `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "8e5f782e-37b3-41a6-9d15-a56ba75982ee",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "d21dc6c2-ce6e-4bc1-81f2-1eeb313f575e",
                              "8e5f782e-37b3-41a6-9d15-a56ba75982ee"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "c6c7a49b-6b2b-45e1-be55-800a2c5f6957",
                    "title": "2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored.",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                      {
                        "uuid": "c664b0b7-7e89-493a-b67d-61326db4f6a9",
                        "title": "calling `resolvePromise` then `rejectPromise`, both synchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` then `rejectPromise`, both synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "21fe7d95-a294-4c85-9b6f-514b1ad664e0",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` then `rejectPromise`, both synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "61dd2075-aa99-4a5e-99da-98905027deaa",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "21fe7d95-a294-4c85-9b6f-514b1ad664e0",
                          "61dd2075-aa99-4a5e-99da-98905027deaa"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 12,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "94bc82cc-b65e-44a4-a6cf-bd62fc292f25",
                        "title": "calling `resolvePromise` synchronously then `rejectPromise` asynchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` synchronously then `rejectPromise` asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "73b68a6c-e610-4e9f-a81c-a40e00046086",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` synchronously then `rejectPromise` asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "25dfadf1-d461-4796-a257-9dd709dd5dd2",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "73b68a6c-e610-4e9f-a81c-a40e00046086",
                          "25dfadf1-d461-4796-a257-9dd709dd5dd2"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 12,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "38950588-cd2d-44ee-9380-66a0a3d1d736",
                        "title": "calling `resolvePromise` then `rejectPromise`, both asynchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` then `rejectPromise`, both asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 9,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "6dcb35d9-0ff4-4fc4-abf5-3296814cedb1",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` then `rejectPromise`, both asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 8,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "1559a885-4dc0-4d32-9d85-3a9c216a4b85",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "6dcb35d9-0ff4-4fc4-abf5-3296814cedb1",
                          "1559a885-4dc0-4d32-9d85-3a9c216a4b85"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 17,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "c3d3f4ac-e80b-4030-bb16-d8a9cc0aa3ee",
                        "title": "calling `resolvePromise` with an asynchronously-fulfilled promise, then calling `rejectPromise`, both synchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` with an asynchronously-fulfilled promise, then calling `rejectPromise`, both synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 59,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "8351c266-2116-4db4-bb03-cef2e69ca42c",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` with an asynchronously-fulfilled promise, then calling `rejectPromise`, both synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 59,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "32b590f3-d75d-4e43-afe6-7e3b173f28d8",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "8351c266-2116-4db4-bb03-cef2e69ca42c",
                          "32b590f3-d75d-4e43-afe6-7e3b173f28d8"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 118,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "2d494b8d-023b-46d6-82c9-8bf7f36b2182",
                        "title": "calling `resolvePromise` with an asynchronously-rejected promise, then calling `rejectPromise`, both synchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` with an asynchronously-rejected promise, then calling `rejectPromise`, both synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 59,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "b7836257-eb51-4bc1-ac5f-c8d608f24ecd",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` with an asynchronously-rejected promise, then calling `rejectPromise`, both synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 61,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "4675e759-cf44-42a2-8965-0e5e88761a96",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "b7836257-eb51-4bc1-ac5f-c8d608f24ecd",
                          "4675e759-cf44-42a2-8965-0e5e88761a96"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 120,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "eb3c022c-2942-4ca4-8e73-15fa9c1db27f",
                        "title": "calling `rejectPromise` then `resolvePromise`, both synchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` then `resolvePromise`, both synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "9cb7f641-8654-4727-8c26-b5d4d7b2eacf",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` then `resolvePromise`, both synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "283121a4-92b7-45b3-93df-737606382cd3",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "9cb7f641-8654-4727-8c26-b5d4d7b2eacf",
                          "283121a4-92b7-45b3-93df-737606382cd3"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 10,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "99f22076-23e6-427d-999c-ff856ffbe016",
                        "title": "calling `rejectPromise` synchronously then `resolvePromise` asynchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` synchronously then `resolvePromise` asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "47002544-c6db-48c4-972f-5bc1742dcffd",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` synchronously then `resolvePromise` asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "ab7aeb9a-98dc-40cb-b69f-382367b4eb3a",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "47002544-c6db-48c4-972f-5bc1742dcffd",
                          "ab7aeb9a-98dc-40cb-b69f-382367b4eb3a"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 9,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "a744aaa8-a18a-4e01-a4fe-3b3d70a62c70",
                        "title": "calling `rejectPromise` then `resolvePromise`, both asynchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` then `resolvePromise`, both asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "14311615-2084-41b0-bc9b-16ce162848e6",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` then `resolvePromise`, both asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 7,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "5e5259bc-4cac-4f0a-92ab-fcd635addcda",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "14311615-2084-41b0-bc9b-16ce162848e6",
                          "5e5259bc-4cac-4f0a-92ab-fcd635addcda"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 13,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "3e1443b8-7c2c-46f2-98fa-93054a815138",
                        "title": "calling `resolvePromise` twice synchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` twice synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "32e3fbd1-691f-4748-bfe3-e6a38bf9f0bc",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` twice synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "a93c3522-34b6-45c1-a72a-842f13094edf",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "32e3fbd1-691f-4748-bfe3-e6a38bf9f0bc",
                          "a93c3522-34b6-45c1-a72a-842f13094edf"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 11,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "dbc6ad7a-85c1-4e4b-a49a-78e6a88926b1",
                        "title": "calling `resolvePromise` twice, first synchronously then asynchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` twice, first synchronously then asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "d91243c3-b04a-449d-a9de-bf9b8eeec3f6",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` twice, first synchronously then asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "bed007ec-baef-4790-a560-b4e7050085c8",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "d91243c3-b04a-449d-a9de-bf9b8eeec3f6",
                          "bed007ec-baef-4790-a560-b4e7050085c8"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 12,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "4c448ab9-c51b-49d2-9554-0e797acf9f94",
                        "title": "calling `resolvePromise` twice, both times asynchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` twice, both times asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 8,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "3d279d06-80d4-4728-8e3a-36f5d72f324d",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` twice, both times asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 7,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "9d66af26-c5cb-445e-b816-b75e12a1deea",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "3d279d06-80d4-4728-8e3a-36f5d72f324d",
                          "9d66af26-c5cb-445e-b816-b75e12a1deea"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 15,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "9c1b6205-0047-4596-86c0-5e0f8b31e226",
                        "title": "calling `resolvePromise` with an asynchronously-fulfilled promise, then calling it again, both times synchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` with an asynchronously-fulfilled promise, then calling it again, both times synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 59,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "237b0616-4832-44e9-960d-63c9e312ea72",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` with an asynchronously-fulfilled promise, then calling it again, both times synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 60,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "631ab10d-080d-48d9-a31c-87a589af8512",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "237b0616-4832-44e9-960d-63c9e312ea72",
                          "631ab10d-080d-48d9-a31c-87a589af8512"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 119,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "f01f493d-7596-403a-9364-1f8282755e6b",
                        "title": "calling `resolvePromise` with an asynchronously-rejected promise, then calling it again, both times synchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` with an asynchronously-rejected promise, then calling it again, both times synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 60,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "3f714964-c5a9-4ba7-8c5e-97331039828a",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` with an asynchronously-rejected promise, then calling it again, both times synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 59,
                            "state": "passed",
                            "speed": "medium",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "df81599f-cd05-403b-8a97-5e2c8701d95b",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "3f714964-c5a9-4ba7-8c5e-97331039828a",
                          "df81599f-cd05-403b-8a97-5e2c8701d95b"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 119,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "c97a3235-9f95-4749-ab1d-b5a2ff487858",
                        "title": "calling `rejectPromise` twice synchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` twice synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "bdfe2361-cc17-472e-a57a-0d4c3691477b",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` twice synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "f3248af9-bd6a-4869-b551-5c0bd3d14db7",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "bdfe2361-cc17-472e-a57a-0d4c3691477b",
                          "f3248af9-bd6a-4869-b551-5c0bd3d14db7"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 10,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "0a8ef811-121e-4a9d-84a7-af4b3feb9f64",
                        "title": "calling `rejectPromise` twice, first synchronously then asynchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` twice, first synchronously then asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 7,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "646f170f-84d0-4baf-9167-7c5b3a64c66a",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` twice, first synchronously then asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "8f9a4dda-cfd4-48b8-a443-a2b607abe7e7",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "646f170f-84d0-4baf-9167-7c5b3a64c66a",
                          "8f9a4dda-cfd4-48b8-a443-a2b607abe7e7"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 12,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "8680782e-dbdd-4887-befc-f20d3c286c98",
                        "title": "calling `rejectPromise` twice, both times asynchronously",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` twice, both times asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 7,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "23ce29a0-07c1-4879-a3cd-589c97b2edab",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` twice, both times asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 8,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "73ae638d-eac6-4e51-a5bd-3a5e7e5dcd50",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "23ce29a0-07c1-4879-a3cd-589c97b2edab",
                          "73ae638d-eac6-4e51-a5bd-3a5e7e5dcd50"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 15,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "2bdd37d6-7471-4942-84d5-d2b074afadc9",
                        "title": "saving and abusing `resolvePromise` and `rejectPromise`",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [
                          {
                            "title": "\"before each\" hook",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. saving and abusing `resolvePromise` and `rejectPromise` \"before each\" hook",
                            "timedOut": false,
                            "duration": 0,
                            "pass": false,
                            "fail": false,
                            "pending": false,
                            "code": "savedResolvePromise = null;\nsavedRejectPromise = null;",
                            "err": {},
                            "isRoot": false,
                            "uuid": "420db1fe-6add-4e2b-b3c1-1134243f445c",
                            "isHook": true,
                            "skipped": false
                          }
                        ],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. saving and abusing `resolvePromise` and `rejectPromise` via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 101,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "145ed46b-49a6-4925-bbd6-dcff3b24a9b0",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. saving and abusing `resolvePromise` and `rejectPromise` via return from a rejected promise",
                            "timedOut": false,
                            "duration": 100,
                            "state": "passed",
                            "speed": "slow",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "0f885618-cfa5-486f-af0a-bed6a16f2d65",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "145ed46b-49a6-4925-bbd6-dcff3b24a9b0",
                          "0f885618-cfa5-486f-af0a-bed6a16f2d65"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 201,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "b7541c04-6a80-485d-b38b-cfdf6886ce40",
                    "title": "2.3.3.3.4: If calling `then` throws an exception `e`,",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                      {
                        "uuid": "1bce5ae7-0679-450c-b2dc-4966cafd9469",
                        "title": "2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it.",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "5a349e7a-c7a6-4c16-a85e-092e337f12a5",
                            "title": "`resolvePromise` was called with a non-thenable",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `resolvePromise` was called with a non-thenable via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "d170adb6-a922-442b-8975-c2eb021c5905",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `resolvePromise` was called with a non-thenable via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "614ff10e-e610-47bd-8b5d-d2b58c49dce9",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "d170adb6-a922-442b-8975-c2eb021c5905",
                              "614ff10e-e610-47bd-8b5d-d2b58c49dce9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "76021aa0-af1f-4b84-a37a-ddcdc0db16e6",
                            "title": "`resolvePromise` was called with an asynchronously-fulfilled promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `resolvePromise` was called with an asynchronously-fulfilled promise via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 60,
                                "state": "passed",
                                "speed": "medium",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "f0b1689f-278f-4911-8f3d-06beb924c57d",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `resolvePromise` was called with an asynchronously-fulfilled promise via return from a rejected promise",
                                "timedOut": false,
                                "duration": 58,
                                "state": "passed",
                                "speed": "medium",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "6fb82087-684a-42a8-9e82-8ce73a5e2108",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "f0b1689f-278f-4911-8f3d-06beb924c57d",
                              "6fb82087-684a-42a8-9e82-8ce73a5e2108"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 118,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "14e11b8c-3e57-42fb-a5bf-bf7d4673d433",
                            "title": "`resolvePromise` was called with an asynchronously-rejected promise",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `resolvePromise` was called with an asynchronously-rejected promise via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 61,
                                "state": "passed",
                                "speed": "medium",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "cdaa594b-cd95-436f-9b85-201755129da3",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `resolvePromise` was called with an asynchronously-rejected promise via return from a rejected promise",
                                "timedOut": false,
                                "duration": 61,
                                "state": "passed",
                                "speed": "medium",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "fffa8c71-dd93-49bc-9925-bd84ae30da5e",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "cdaa594b-cd95-436f-9b85-201755129da3",
                              "fffa8c71-dd93-49bc-9925-bd84ae30da5e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 122,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "a70e1f72-7ca5-42bf-a746-ef9817bdf4b6",
                            "title": "`rejectPromise` was called",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `rejectPromise` was called via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "8318a857-68db-436e-aca7-78f4a8848db7",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `rejectPromise` was called via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "e7f6c3d3-5b23-420d-9b63-00cbe2aa7658",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "8318a857-68db-436e-aca7-78f4a8848db7",
                              "e7f6c3d3-5b23-420d-9b63-00cbe2aa7658"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "189858c6-f947-46d4-bb0c-6094a8ec6706",
                            "title": "`resolvePromise` then `rejectPromise` were called",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `resolvePromise` then `rejectPromise` were called via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "725bc711-defa-440b-b512-21d0ddad9e7d",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `resolvePromise` then `rejectPromise` were called via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "e15a62f0-7028-4f23-8855-c2272be82763",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "725bc711-defa-440b-b512-21d0ddad9e7d",
                              "e15a62f0-7028-4f23-8855-c2272be82763"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "5beaac0e-9a9f-46bc-a6f0-9680024c3bd9",
                            "title": "`rejectPromise` then `resolvePromise` were called",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `rejectPromise` then `resolvePromise` were called via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "c88b2f5a-68ab-4f7e-b580-e913160b390f",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `rejectPromise` then `resolvePromise` were called via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "24a14d7a-cc4e-4e73-bee3-957f52112407",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "c88b2f5a-68ab-4f7e-b580-e913160b390f",
                              "24a14d7a-cc4e-4e73-bee3-957f52112407"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      },
                      {
                        "uuid": "5588d53d-2e0f-48e6-aa68-dc684c77f84e",
                        "title": "2.3.3.3.4.2: Otherwise, reject `promise` with `e` as the reason.",
                        "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                        "file": "\\test\\index.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "0d32deb1-eb92-479e-816e-614eabbfb8dd",
                            "title": "straightforward case",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.2: Otherwise, reject `promise` with `e` as the reason. straightforward case via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "5e2c8177-5192-4c48-b618-a80249cf79fb",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.2: Otherwise, reject `promise` with `e` as the reason. straightforward case via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "6828d286-6d65-43f5-b18d-6c54671953a3",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "5e2c8177-5192-4c48-b618-a80249cf79fb",
                              "6828d286-6d65-43f5-b18d-6c54671953a3"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "c0c35dc0-33bd-450e-94d2-6bade43492c7",
                            "title": "`resolvePromise` is called asynchronously before the `throw`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.2: Otherwise, reject `promise` with `e` as the reason. `resolvePromise` is called asynchronously before the `throw` via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "27163964-e657-4a0c-aefb-9298c640304b",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.2: Otherwise, reject `promise` with `e` as the reason. `resolvePromise` is called asynchronously before the `throw` via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "e9a859a3-670d-4cda-af22-ff33337620ae",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "27163964-e657-4a0c-aefb-9298c640304b",
                              "e9a859a3-670d-4cda-af22-ff33337620ae"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          },
                          {
                            "uuid": "02fa3154-aaa5-43c4-99b9-2b958757e6c4",
                            "title": "`rejectPromise` is called asynchronously before the `throw`",
                            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                            "file": "\\test\\index.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.2: Otherwise, reject `promise` with `e` as the reason. `rejectPromise` is called asynchronously before the `throw` via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "c947063c-9f7b-4339-9755-77cedd062cf5",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.2: Otherwise, reject `promise` with `e` as the reason. `rejectPromise` is called asynchronously before the `throw` via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "ef9c18fb-9150-428b-a71a-4ece702c0b44",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "c947063c-9f7b-4339-9755-77cedd062cf5",
                              "ef9c18fb-9150-428b-a71a-4ece702c0b44"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 2000
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 2000
                      }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "aba7ac68-380b-40bc-a017-ea6f75364b6e",
                "title": "2.3.3.4: If `then` is not a function, fulfill promise with `x`",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` \"before each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "x = { then: then };",
                    "err": {},
                    "isRoot": false,
                    "uuid": "32253f3e-edc4-42c6-a637-7bc791005e2f",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` \"before each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "x = { then: then };",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f6782f2d-39ae-4256-8f9d-bed3aa1ba883",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` \"before each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "x = { then: then };",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9000bf9e-50a9-453f-b5f7-3b00f003e23a",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` \"before each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "x = { then: then };",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7d8416e9-90f1-45de-a38e-fdce4123f741",
                    "isHook": true,
                    "skipped": false
                  },
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` \"before each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "x = { then: then };",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9b97a3bf-647a-47d6-9279-6d31eca27d7e",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "725106cb-3cc2-4232-84e6-4e751ea04b16",
                    "title": "`then` is `5`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is `5` via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e4617e63-40e9-4501-a210-b61df5ef6164",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is `5` via return from a rejected promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "05144a2b-b705-4f4b-a85c-31f19f6ce19f",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "e4617e63-40e9-4501-a210-b61df5ef6164",
                      "05144a2b-b705-4f4b-a85c-31f19f6ce19f"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 10,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "7b59b94e-1d9b-4bb8-a4b4-7fe0b26d4bb9",
                    "title": "`then` is an object",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is an object via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8958258b-3c3c-44f4-8c8e-fe9c4f3c0192",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is an object via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "683808c1-42b8-40ae-91db-bccb01fff014",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "8958258b-3c3c-44f4-8c8e-fe9c4f3c0192",
                      "683808c1-42b8-40ae-91db-bccb01fff014"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 11,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "954261cf-157e-48db-b145-9ff1e13a3d86",
                    "title": "`then` is an array containing a function",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is an array containing a function via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a49b4c44-af91-4ec3-92cb-b807ebb83c87",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is an array containing a function via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "39df409e-9159-4196-afd4-9eb35411b6f6",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "a49b4c44-af91-4ec3-92cb-b807ebb83c87",
                      "39df409e-9159-4196-afd4-9eb35411b6f6"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 11,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "d01a357f-80a7-4629-a6bc-ad2ee0b076ba",
                    "title": "`then` is a regular expression",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is a regular expression via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d2bb8a9c-ba66-4d09-960d-026bf36027a3",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is a regular expression via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7fd79264-9032-4d9e-bce0-ad90c052a1e1",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "d2bb8a9c-ba66-4d09-960d-026bf36027a3",
                      "7fd79264-9032-4d9e-bce0-ad90c052a1e1"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 11,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "555d817b-bdad-4f8a-ab13-74c2667bbbd5",
                    "title": "`then` is an object inheriting from `Function.prototype`",
                    "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                    "file": "\\test\\index.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is an object inheriting from `Function.prototype` via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "cfa4962e-ce14-42b8-a2ad-61996cecc285",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "Promises/A+ Tests 2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is an object inheriting from `Function.prototype` via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "38cfb483-fc41-4246-9112-3f8369252d06",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "cfa4962e-ce14-42b8-a2ad-61996cecc285",
                      "38cfb483-fc41-4246-9112-3f8369252d06"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 10,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "28f64ed0-b2e4-42a7-9a6e-748aaea1ba08",
            "title": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x`",
            "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
            "file": "\\test\\index.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "d3e97074-7dc3-4b12-b170-99c36e55e47e",
                "title": "The value is `undefined`",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `undefined` already-fulfilled",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6b92f068-9f44-4575-9eb8-aba1b687601a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `undefined` immediately-fulfilled",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "48813d5a-40ec-4b52-a306-a7783533319d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `undefined` eventually-fulfilled",
                    "timedOut": false,
                    "duration": 59,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9354ebf3-8d9a-4243-abe1-232a6d815a09",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `undefined` already-rejected",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e7686f35-a0b2-401d-bb10-1216fdff013f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `undefined` immediately-rejected",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "865c33fe-86fd-415b-b700-f9ada122796a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `undefined` eventually-rejected",
                    "timedOut": false,
                    "duration": 59,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d95900cf-edfc-4c9f-83d2-284c4cab66e5",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "6b92f068-9f44-4575-9eb8-aba1b687601a",
                  "48813d5a-40ec-4b52-a306-a7783533319d",
                  "9354ebf3-8d9a-4243-abe1-232a6d815a09",
                  "e7686f35-a0b2-401d-bb10-1216fdff013f",
                  "865c33fe-86fd-415b-b700-f9ada122796a",
                  "d95900cf-edfc-4c9f-83d2-284c4cab66e5"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 142,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "538a84ae-5dbb-4e24-ac5e-72302e2e2bc0",
                "title": "The value is `null`",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `null` already-fulfilled",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "256793fb-0711-4a0a-889d-e8fa2d950632",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `null` immediately-fulfilled",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "98a9dd9b-5bf3-4b7d-8423-ed4ba683b4be",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `null` eventually-fulfilled",
                    "timedOut": false,
                    "duration": 58,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ea536a5b-672c-4021-b1dc-fb3d9a0c6169",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `null` already-rejected",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0f9e4312-dfe5-4e0e-a5c0-0ae490b46b30",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `null` immediately-rejected",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "134d5420-2fb2-4ae3-9653-22fedeac6645",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `null` eventually-rejected",
                    "timedOut": false,
                    "duration": 57,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e1c72f2c-e77b-4612-827f-54eca3fd76e6",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "256793fb-0711-4a0a-889d-e8fa2d950632",
                  "98a9dd9b-5bf3-4b7d-8423-ed4ba683b4be",
                  "ea536a5b-672c-4021-b1dc-fb3d9a0c6169",
                  "0f9e4312-dfe5-4e0e-a5c0-0ae490b46b30",
                  "134d5420-2fb2-4ae3-9653-22fedeac6645",
                  "e1c72f2c-e77b-4612-827f-54eca3fd76e6"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 140,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "a104ea10-f5ef-458d-87a5-d1af456ac97a",
                "title": "The value is `false`",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `false` already-fulfilled",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "97c4c432-09c6-4ceb-988d-ae1e1c83d6bc",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `false` immediately-fulfilled",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e6cbe073-ce3d-4987-a4e2-1961fb7e1a40",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `false` eventually-fulfilled",
                    "timedOut": false,
                    "duration": 58,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b45f1925-9a67-43dd-a362-24afce9ae443",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `false` already-rejected",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "11c7e314-8ac8-4988-8bf4-a3f74528ab44",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `false` immediately-rejected",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b36b1658-f727-40d0-be94-b1b89d9b1e99",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `false` eventually-rejected",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "091890b2-ab46-45ae-92e2-6cf7d85cd042",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "97c4c432-09c6-4ceb-988d-ae1e1c83d6bc",
                  "e6cbe073-ce3d-4987-a4e2-1961fb7e1a40",
                  "b45f1925-9a67-43dd-a362-24afce9ae443",
                  "11c7e314-8ac8-4988-8bf4-a3f74528ab44",
                  "b36b1658-f727-40d0-be94-b1b89d9b1e99",
                  "091890b2-ab46-45ae-92e2-6cf7d85cd042"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 139,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "478e2287-3ba5-4259-91df-2c6a197c8ae3",
                "title": "The value is `true`",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` already-fulfilled",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "82261793-e707-4298-bbfb-416d92f5d0c6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` immediately-fulfilled",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e91172e6-9d4f-4e31-9491-e38930a408ea",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` eventually-fulfilled",
                    "timedOut": false,
                    "duration": 58,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3ef02659-b2de-4e7c-8ace-fa5314dea837",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` already-rejected",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fda4e77f-eaf3-455b-8f5e-70473d3a7dee",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` immediately-rejected",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6ec34b6a-fd7e-4b80-9b48-bdfff13bd8dd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` eventually-rejected",
                    "timedOut": false,
                    "duration": 57,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e74f452b-22e7-465f-981e-bc31f1948aa8",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "82261793-e707-4298-bbfb-416d92f5d0c6",
                  "e91172e6-9d4f-4e31-9491-e38930a408ea",
                  "3ef02659-b2de-4e7c-8ace-fa5314dea837",
                  "fda4e77f-eaf3-455b-8f5e-70473d3a7dee",
                  "6ec34b6a-fd7e-4b80-9b48-bdfff13bd8dd",
                  "e74f452b-22e7-465f-981e-bc31f1948aa8"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 141,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "cec387a7-2208-4b7b-ad95-4f309af10068",
                "title": "The value is `0`",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `0` already-fulfilled",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "31fb85a0-dfe6-4449-8567-7cb4fa178947",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `0` immediately-fulfilled",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3d4fb899-23da-4c1e-9998-1196f303ac20",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `0` eventually-fulfilled",
                    "timedOut": false,
                    "duration": 59,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d5210828-2ac1-4be5-ac8e-d4b2ee5e491d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `0` already-rejected",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1eb6cd07-1673-4b5f-908d-fe8f594fb1a6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `0` immediately-rejected",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b613d3ad-5f82-4d39-9aed-3d2d73d8b751",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `0` eventually-rejected",
                    "timedOut": false,
                    "duration": 58,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c1edfcf4-7006-4d86-b838-5735d4b11f43",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "31fb85a0-dfe6-4449-8567-7cb4fa178947",
                  "3d4fb899-23da-4c1e-9998-1196f303ac20",
                  "d5210828-2ac1-4be5-ac8e-d4b2ee5e491d",
                  "1eb6cd07-1673-4b5f-908d-fe8f594fb1a6",
                  "b613d3ad-5f82-4d39-9aed-3d2d73d8b751",
                  "c1edfcf4-7006-4d86-b838-5735d4b11f43"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 141,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "3a22260e-9b98-4ec9-9f81-9144d85e8568",
                "title": "The value is `true` with `Boolean.prototype` modified to have a `then` method",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` with `Boolean.prototype` modified to have a `then` method \"before each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "Boolean.prototype.then = function () {};",
                    "err": {},
                    "isRoot": false,
                    "uuid": "61efab34-2f97-4a60-8641-1a606e7419ef",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` with `Boolean.prototype` modified to have a `then` method \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "delete Boolean.prototype.then;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cd19ad72-5a6e-4822-a82b-f45f1cc51e79",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` with `Boolean.prototype` modified to have a `then` method already-fulfilled",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ca58d7ff-be14-447e-8464-3aa1237e2cc0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` with `Boolean.prototype` modified to have a `then` method immediately-fulfilled",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7266683f-8a60-40ac-92c0-2fea486c454d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` with `Boolean.prototype` modified to have a `then` method eventually-fulfilled",
                    "timedOut": false,
                    "duration": 57,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "714acf40-c647-42f6-8adc-b5c13a0a26b2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` with `Boolean.prototype` modified to have a `then` method already-rejected",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7218a5f3-42b1-40ca-b23a-2866c49b12e8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` with `Boolean.prototype` modified to have a `then` method immediately-rejected",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "93c46d51-42d3-4065-9ae3-c12605fd2c43",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` with `Boolean.prototype` modified to have a `then` method eventually-rejected",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6ac17b8e-0a8a-4f7f-af54-46f7f8898929",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "ca58d7ff-be14-447e-8464-3aa1237e2cc0",
                  "7266683f-8a60-40ac-92c0-2fea486c454d",
                  "714acf40-c647-42f6-8adc-b5c13a0a26b2",
                  "7218a5f3-42b1-40ca-b23a-2866c49b12e8",
                  "93c46d51-42d3-4065-9ae3-c12605fd2c43",
                  "6ac17b8e-0a8a-4f7f-af54-46f7f8898929"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 133,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              },
              {
                "uuid": "9cca03fd-ecf8-46e3-95d5-2886e966fcc7",
                "title": "The value is `1` with `Number.prototype` modified to have a `then` method",
                "fullFile": "c:\\Users\\liang.qi\\Promises\\test\\index.js",
                "file": "\\test\\index.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `1` with `Number.prototype` modified to have a `then` method \"before each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "Number.prototype.then = function () {};",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e542c12e-f481-4d34-b1a5-15e1b6da453b",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [
                  {
                    "title": "\"after each\" hook",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `1` with `Number.prototype` modified to have a `then` method \"after each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "delete Number.prototype.then;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b9f9306f-45eb-4f03-abdd-6c7c234d290a",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `1` with `Number.prototype` modified to have a `then` method already-fulfilled",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b9ba13d7-85c5-47ea-956f-a785ed0eb4ab",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `1` with `Number.prototype` modified to have a `then` method immediately-fulfilled",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4f45e420-dd00-41ca-8a87-95c346b2e118",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `1` with `Number.prototype` modified to have a `then` method eventually-fulfilled",
                    "timedOut": false,
                    "duration": 59,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f5decc21-8230-4cc9-aca7-419b6228a68f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `1` with `Number.prototype` modified to have a `then` method already-rejected",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d66c9890-1332-4518-a3ef-c516d3286c4f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `1` with `Number.prototype` modified to have a `then` method immediately-rejected",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5ba0483a-c007-4e1f-9a29-71443a78cdab",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "Promises/A+ Tests 2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `1` with `Number.prototype` modified to have a `then` method eventually-rejected",
                    "timedOut": false,
                    "duration": 58,
                    "state": "passed",
                    "speed": "medium",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9fd7a28e-c998-4576-9791-0403e7e473cb",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "b9ba13d7-85c5-47ea-956f-a785ed0eb4ab",
                  "4f45e420-dd00-41ca-8a87-95c346b2e118",
                  "f5decc21-8230-4cc9-aca7-419b6228a68f",
                  "d66c9890-1332-4518-a3ef-c516d3286c4f",
                  "5ba0483a-c007-4e1f-9a29-71443a78cdab",
                  "9fd7a28e-c998-4576-9791-0403e7e473cb"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 143,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}